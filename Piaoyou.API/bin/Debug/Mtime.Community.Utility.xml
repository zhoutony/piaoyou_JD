<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Mtime.Community.Utility</name>
    </assembly>
    <members>
        <member name="T:ICSharpCode.SharpZipLib.Zip.KeysRequiredEventArgs">
            <summary>
            Arguments used with KeysRequiredEvent
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.KeysRequiredEventArgs.#ctor(System.String)">
            <summary>
            Initialise a new instance of <see cref="T:ICSharpCode.SharpZipLib.Zip.KeysRequiredEventArgs"></see>
            </summary>
            <param name="name">The name of the file for which keys are required.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.KeysRequiredEventArgs.#ctor(System.String,System.Byte[])">
            <summary>
            Initialise a new instance of <see cref="T:ICSharpCode.SharpZipLib.Zip.KeysRequiredEventArgs"></see>
            </summary>
            <param name="name">The name of the file for which keys are required.</param>
            <param name="keyValue">The current key value.</param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.KeysRequiredEventArgs.FileName">
            <summary>
            Get the name of the file for which keys are required.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.KeysRequiredEventArgs.Key">
            <summary>
            Get/set the key value
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.TestStrategy">
            <summary>
            The strategy to apply to testing.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.TestStrategy.FindFirstError">
            <summary>
            Find the first error only.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.TestStrategy.FindAllErrors">
            <summary>
            Find all possible errors.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.TestOperation">
            <summary>
            The operation in progress reported by a <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipTestResultHandler"/> during testing.
            </summary>
            <seealso cref="M:ICSharpCode.SharpZipLib.Zip.ZipFile.TestArchive(System.Boolean)">TestArchive</seealso>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.TestOperation.Initialising">
            <summary>
            Setting up testing.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.TestOperation.EntryHeader">
            <summary>
            Testing an individual entries header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.TestOperation.EntryData">
            <summary>
            Testing an individual entries data
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.TestOperation.EntryComplete">
            <summary>
            Testing an individual entry has completed.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.TestOperation.MiscellaneousTests">
            <summary>
            Running miscellaneous tests
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.TestOperation.Complete">
            <summary>
            Testing is complete
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.TestStatus">
            <summary>
            Status returned returned by <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipTestResultHandler"/> during testing.
            </summary>
            <seealso cref="M:ICSharpCode.SharpZipLib.Zip.ZipFile.TestArchive(System.Boolean)">TestArchive</seealso>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.TestStatus.#ctor(ICSharpCode.SharpZipLib.Zip.ZipFile)">
            <summary>
            Initialise a new instance of <see cref="T:ICSharpCode.SharpZipLib.Zip.TestStatus"/>
            </summary>
            <param name="file">The <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipFile"/> this status applies to.</param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.TestStatus.Operation">
            <summary>
            Get the current <see cref="T:ICSharpCode.SharpZipLib.Zip.TestOperation"/> in progress.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.TestStatus.File">
            <summary>
            Get the <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipFile"/> this status is applicable to.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.TestStatus.Entry">
            <summary>
            Get the current/last entry tested.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.TestStatus.ErrorCount">
            <summary>
            Get the number of errors detected so far.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.TestStatus.BytesTested">
            <summary>
            Get the number of bytes tested so far for the current entry.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.TestStatus.EntryValid">
            <summary>
            Get a value indicating wether the last entry test was valid.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ZipTestResultHandler">
            <summary>
            Delegate invoked during <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipFile.TestArchive(System.Boolean,ICSharpCode.SharpZipLib.Zip.TestStrategy,ICSharpCode.SharpZipLib.Zip.ZipTestResultHandler)">testing</see> if supplied indicating current progress and status.
            </summary>
            <remarks>If the message is non-null an error has occured.  If the message is null
            the operation as found in <see cref="T:ICSharpCode.SharpZipLib.Zip.TestStatus">status</see> has started.</remarks>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.FileUpdateMode">
            <summary>
            The possible ways of <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipFile.CommitUpdate">applying updates</see> to an archive.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.FileUpdateMode.Safe">
            <summary>
            Perform all updates on temporary files ensuring that the original file is saved.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.FileUpdateMode.Direct">
            <summary>
            Update the archive directly, which is faster but less safe.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ZipFile">
            <summary>
            This class represents a Zip archive.  You can ask for the contained
            entries, or get an input stream for a file entry.  The entry is
            automatically decompressed.
            
            You can also update the archive adding or deleting entries.
            
            This class is thread safe for input:  You can open input streams for arbitrary
            entries in different threads.
            <br/>
            <br/>Author of the original java version : Jochen Hoenicke
            </summary>
            <example>
            <code>
            using System;
            using System.Text;
            using System.Collections;
            using System.IO;
            
            using ICSharpCode.SharpZipLib.Zip;
            
            class MainClass
            {
            	static public void Main(string[] args)
            	{
            		using (ZipFile zFile = new ZipFile(args[0])) {
            			Console.WriteLine("Listing of : " + zFile.Name);
            			Console.WriteLine("");
            			Console.WriteLine("Raw Size    Size      Date     Time     Name");
            			Console.WriteLine("--------  --------  --------  ------  ---------");
            			foreach (ZipEntry e in zFile) {
            				if ( e.IsFile ) {
            					DateTime d = e.DateTime;
            					Console.WriteLine("{0, -10}{1, -10}{2}  {3}   {4}", e.Size, e.CompressedSize,
            						d.ToString("dd-MM-yy"), d.ToString("HH:mm"),
            						e.Name);
            				}
            			}
            		}
            	}
            }
            </code>
            </example>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipFile.KeysRequired">
            <summary>
            Event handler for handling encryption keys.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.OnKeysRequired(System.String)">
            <summary>
            Handles getting of encryption keys when required.
            </summary>
            <param name="fileName">The file for which encryption keys are required.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.#ctor(System.String)">
            <summary>
            Opens a Zip file with the given name for reading.
            </summary>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs
            </exception>
            <exception cref="T:ICSharpCode.SharpZipLib.Zip.ZipException">
            The file doesn't contain a valid zip archive.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.#ctor(System.IO.FileStream)">
            <summary>
            Opens a Zip file reading the given <see cref="T:System.IO.FileStream"/>.
            </summary>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs.
            </exception>
            <exception cref="T:ICSharpCode.SharpZipLib.Zip.ZipException">
            The file doesn't contain a valid zip archive.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.#ctor(System.IO.Stream)">
            <summary>
            Opens a Zip file reading the given <see cref="T:System.IO.Stream"/>.
            </summary>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs
            </exception>
            <exception cref="T:ICSharpCode.SharpZipLib.Zip.ZipException">
            The file doesn't contain a valid zip archive.<br/>
            The stream provided cannot seek
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.#ctor">
            <summary>
            Initialises a default <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipFile"/> instance with no entries and no file storage.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.Finalize">
            <summary>
            Finalize this instance.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.Close">
            <summary>
            Closes the ZipFile.  If the stream is <see cref="P:ICSharpCode.SharpZipLib.Zip.ZipFile.IsStreamOwner">owned</see> then this also closes the underlying input stream.
            Once closed, no further instance methods should be called.
            </summary>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.Create(System.String)">
            <summary>
            Create a new <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipFile"/> whose data will be stored in a file.
            </summary>
            <param name="fileName">The name of the archive to create.</param>
            <returns>Returns the newly created <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipFile"/></returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.Create(System.IO.Stream)">
            <summary>
            Create a new <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipFile"/> whose data will be stored on a stream.
            </summary>
            <param name="outStream">The stream providing data storage.</param>
            <returns>Returns the newly created <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipFile"/></returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.GetEnumerator">
            <summary>
            Returns an enumerator for the Zip entries in this Zip file.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The Zip file has been closed.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.FindEntry(System.String,System.Boolean)">
            <summary>
            Return the index of the entry with a matching name
            </summary>
            <param name="name">Entry name to find</param>
            <param name="ignoreCase">If true the comparison is case insensitive</param>
            <returns>The index position of the matching entry or -1 if not found</returns>
            <exception cref="T:System.InvalidOperationException">
            The Zip file has been closed.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.GetEntry(System.String)">
            <summary>
            Searches for a zip entry in this archive with the given name.
            String comparisons are case insensitive
            </summary>
            <param name="name">
            The name to find. May contain directory components separated by slashes ('/').
            </param>
            <returns>
            A clone of the zip entry, or null if no entry with that name exists.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The Zip file has been closed.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.GetInputStream(ICSharpCode.SharpZipLib.Zip.ZipEntry)">
            <summary>
            Creates an input stream reading the given zip entry as
            uncompressed data.  Normally zip entry should be an entry
            returned by GetEntry().
            </summary>
            <returns>
            the input stream.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The ZipFile has already been closed
            </exception>
            <exception cref="T:ICSharpCode.SharpZipLib.Zip.ZipException">
            The compression method for the entry is unknown
            </exception>
            <exception cref="T:System.IndexOutOfRangeException">
            The entry is not found in the ZipFile
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.GetInputStream(System.Int64)">
            <summary>
            Creates an input stream reading a zip entry
            </summary>
            <param name="entryIndex">The index of the entry to obtain an input stream for.</param>
            <returns>
            An input stream.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The ZipFile has already been closed
            </exception>
            <exception cref="T:ICSharpCode.SharpZipLib.Zip.ZipException">
            The compression method for the entry is unknown
            </exception>
            <exception cref="T:System.IndexOutOfRangeException">
            The entry is not found in the ZipFile
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.TestArchive(System.Boolean)">
            <summary>
            Test an archive for integrity/validity
            </summary>
            <param name="testData">Perform low level data Crc check</param>
            <returns>true if all tests pass, false otherwise</returns>
            <remarks>Testing will terminate on the first error found.</remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.TestArchive(System.Boolean,ICSharpCode.SharpZipLib.Zip.TestStrategy,ICSharpCode.SharpZipLib.Zip.ZipTestResultHandler)">
            <summary>
            Test an archive for integrity/validity
            </summary>
            <param name="testData">Perform low level data Crc check</param>
            <param name="strategy">The <see cref="T:ICSharpCode.SharpZipLib.Zip.TestStrategy"></see> to apply.</param>
            <param name="resultHandler">The <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipTestResultHandler"></see> handler to call during testing.</param>
            <returns>true if all tests pass, false otherwise</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.TestLocalHeader(ICSharpCode.SharpZipLib.Zip.ZipEntry,ICSharpCode.SharpZipLib.Zip.ZipFile.HeaderTest)">
            <summary>
            Test a local header against that provided from the central directory
            </summary>
            <param name="entry">
            The entry to test against
            </param>
            <param name="tests">The type of <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipFile.HeaderTest">tests</see> to carry out.</param>
            <returns>The offset of the entries data in the file</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.BeginUpdate(ICSharpCode.SharpZipLib.Zip.IArchiveStorage,ICSharpCode.SharpZipLib.Zip.IDynamicDataSource)">
            <summary>
            Begin updating this <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipFile"/> archive.
            </summary>
            <param name="archiveStorage">The <see cref="T:ICSharpCode.SharpZipLib.Zip.IArchiveStorage">archive storage</see> for use during the update.</param>
            <param name="dataSource">The <see cref="T:ICSharpCode.SharpZipLib.Zip.IDynamicDataSource">data source</see> to utilise during updating.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.BeginUpdate(ICSharpCode.SharpZipLib.Zip.IArchiveStorage)">
            <summary>
            Begin updating to this <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipFile"/> archive.
            </summary>
            <param name="archiveStorage">The storage to use during the update.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.BeginUpdate">
            <summary>
            Begin updating this <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipFile"/> archive.
            </summary>
            <seealso cref="M:ICSharpCode.SharpZipLib.Zip.ZipFile.CommitUpdate"></seealso>
            <seealso cref="M:ICSharpCode.SharpZipLib.Zip.ZipFile.AbortUpdate"></seealso>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.CommitUpdate">
            <summary>
            Commit current updates, updating this archive.
            </summary>
            <seealso cref="M:ICSharpCode.SharpZipLib.Zip.ZipFile.BeginUpdate"></seealso>
            <seealso cref="M:ICSharpCode.SharpZipLib.Zip.ZipFile.AbortUpdate"></seealso>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.AbortUpdate">
            <summary>
            Abort updating leaving the archive unchanged.
            </summary>
            <seealso cref="M:ICSharpCode.SharpZipLib.Zip.ZipFile.BeginUpdate"></seealso>
            <seealso cref="M:ICSharpCode.SharpZipLib.Zip.ZipFile.CommitUpdate"></seealso>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.SetComment(System.String)">
            <summary>
            Set the file comment to be recorded when the current update is <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipFile.CommitUpdate">commited</see>.
            </summary>
            <param name="comment">The comment to record.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.Add(System.String,ICSharpCode.SharpZipLib.Zip.CompressionMethod,System.Boolean)">
            <summary>
            Add a new entry to the archive.
            </summary>
            <param name="fileName">The name of the file to add.</param>
            <param name="compressionMethod">The compression method to use.</param>
            <param name="useUnicodeText">Ensure Unicode text is used for name and comment for this entry.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.Add(System.String,ICSharpCode.SharpZipLib.Zip.CompressionMethod)">
            <summary>
            Add a new entry to the archive.
            </summary>
            <param name="fileName">The name of the file to add.</param>
            <param name="compressionMethod">The compression method to use.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.Add(System.String)">
            <summary>
            Add a file to the archive.
            </summary>
            <param name="fileName">The name of the file to add.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.Add(ICSharpCode.SharpZipLib.Zip.IStaticDataSource,System.String)">
            <summary>
            Add a file entry with data.
            </summary>
            <param name="dataSource">The source of the data for this entry.</param>
            <param name="entryName">The name to give to the entry.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.Add(ICSharpCode.SharpZipLib.Zip.IStaticDataSource,System.String,ICSharpCode.SharpZipLib.Zip.CompressionMethod)">
            <summary>
            Add a file entry with data.
            </summary>
            <param name="dataSource">The source of the data for this entry.</param>
            <param name="entryName">The name to give to the entry.</param>
            <param name="compressionMethod">The compression method to use.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.Add(ICSharpCode.SharpZipLib.Zip.IStaticDataSource,System.String,ICSharpCode.SharpZipLib.Zip.CompressionMethod,System.Boolean)">
            <summary>
            Add a file entry with data.
            </summary>
            <param name="dataSource">The source of the data for this entry.</param>
            <param name="entryName">The name to give to the entry.</param>
            <param name="compressionMethod">The compression method to use.</param>
            <param name="useUnicodeText">Ensure Unicode text is used for name and comments for this entry.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.Add(ICSharpCode.SharpZipLib.Zip.ZipEntry)">
            <summary>
            Add a <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry"/> that contains no data.
            </summary>
            <param name="entry">The entry to add.</param>
            <remarks>This can be used to add directories, volume labels, or empty file entries.</remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.AddDirectory(System.String)">
            <summary>
            Add a directory entry to the archive.
            </summary>
            <param name="directoryName">The directory to add.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.Delete(System.String)">
            <summary>
            Delete an entry by name
            </summary>
            <param name="fileName">The filename to delete</param>
            <returns>True if the entry was found and deleted; false otherwise.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.Delete(ICSharpCode.SharpZipLib.Zip.ZipEntry)">
            <summary>
            Delete a <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry"/> from the archive.
            </summary>
            <param name="entry">The entry to delete.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.WriteLEUshort(System.UInt16)">
            <summary>
            Write an unsigned short in little endian byte order.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.WriteLEInt(System.Int32)">
            <summary>
            Write an int in little endian byte order.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.WriteLEUint(System.UInt32)">
            <summary>
            Write an unsigned int in little endian byte order.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.WriteLeLong(System.Int64)">
            <summary>
            Write a long in little endian byte order.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.GetBuffer">
            <summary>
            Get a raw memory buffer.
            </summary>
            <returns>Returns a raw memory buffer.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.GetDescriptorSize(ICSharpCode.SharpZipLib.Zip.ZipFile.ZipUpdate)">
            <summary>
            Get the size of the source descriptor for a <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipFile.ZipUpdate"/>.
            </summary>
            <param name="update">The update to get the size for.</param>
            <returns>The descriptor size, zero if there isnt one.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.GetOutputStream(ICSharpCode.SharpZipLib.Zip.ZipEntry)">
            <summary>
            Get an output stream for the specified <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry"/>
            </summary>
            <param name="entry">The entry to get an output stream for.</param>
            <returns>The output stream obtained for the entry.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the this instance and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources;
            false to release only unmanaged resources.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.ReadLEUshort">
            <summary>
            Read an unsigned short in little endian byte order.
            </summary>
            <returns>Returns the value read.</returns>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs.
            </exception>
            <exception cref="T:System.IO.EndOfStreamException">
            The file ends prematurely
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.ReadLEUint">
            <summary>
            Read a uint in little endian byte order.
            </summary>
            <returns>Returns the value read.</returns>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs.
            </exception>
            <exception cref="T:System.IO.EndOfStreamException">
            The file ends prematurely
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.ReadEntries">
            <summary>
            Search for and read the central directory of a zip file filling the entries array.
            </summary>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs.
            </exception>
            <exception cref="T:ICSharpCode.SharpZipLib.Zip.ZipException">
            The central directory is malformed or cannot be found
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.LocateEntry(ICSharpCode.SharpZipLib.Zip.ZipEntry)">
            <summary>
            Locate the data for a given entry.
            </summary>
            <returns>
            The start offset of the data.
            </returns>
            <exception cref="T:System.IO.EndOfStreamException">
            The stream ends prematurely
            </exception>
            <exception cref="T:ICSharpCode.SharpZipLib.Zip.ZipException">
            The local header signature is invalid, the entry and central header file name lengths are different
            or the local and entry compression methods dont match
            </exception>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.Key">
            <summary>
            Get/set the encryption key value.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.Password">
            <summary>
            Password to be used for encrypting/decrypting files.
            </summary>
            <remarks>Set to null if no password is required.</remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.HaveKeys">
            <summary>
            Get a value indicating wether encryption keys are currently available.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.IsStreamOwner">
            <summary>
            Get/set a flag indicating if the underlying stream is owned by the ZipFile instance.
            If the flag is true then the stream will be closed when <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipFile.Close">Close</see> is called.
            </summary>
            <remarks>
            The default value is true in all cases.
            </remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.IsEmbeddedArchive">
            <summary>
            Get a value indicating wether
            this archive is embedded in another file or not.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.IsNewArchive">
            <summary>
            Get a value indicating that this archive is a new one.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.ZipFileComment">
            <summary>
            Gets the comment for the zip file.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.Name">
            <summary>
            Gets the name of this zip file.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.Size">
            <summary>
            Gets the number of entries in this zip file.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The Zip file has been closed.
            </exception>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.Count">
            <summary>
            Get the number of entries contained in this <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipFile"/>.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.EntryByIndex(System.Int32)">
            <summary>
            Indexer property for ZipEntries
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.NameTransform">
            <summary>
            Get / set the <see cref="T:ICSharpCode.SharpZipLib.Core.INameTransform"/> to apply to names when updating.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.BufferSize">
            <summary>
            Get /set the buffer size to be used when updating this zip file.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.IsUpdating">
            <summary>
            Get a value indicating an update has <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipFile.BeginUpdate">been started</see>.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.UseZip64">
            <summary>
            Get / set a value indicating how Zip64 Extension usage is determined when adding entries.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ZipFile.KeysRequiredEventHandler">
            <summary>
            Delegate for handling keys/password setting during compresion/decompression.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ZipFile.UpdateCommand">
            <summary>
            The kind of update to apply.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ZipFile.UpdateComparer">
            <summary>
            Class used to sort updates.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.UpdateComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects and returns a value indicating whether one is 
            less than, equal to or greater than the other.
            </summary>
            <param name="x">First object to compare</param>
            <param name="y">Second object to compare.</param>
            <returns>Compare result.</returns>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ZipFile.ZipUpdate">
            <summary>
            Represents a pending update to a Zip file.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.ZipUpdate.#ctor(ICSharpCode.SharpZipLib.Zip.ZipEntry)">
            <summary>
            Copy an existing entry.
            </summary>
            <param name="entry">The existing entry to copy.</param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.ZipUpdate.Entry">
            <summary>
            Get the <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry"/> for this update.
            </summary>
            <remarks>This is the source or original entry.</remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.ZipUpdate.OutEntry">
            <summary>
            Get the <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry"/> that will be written to the updated/new file.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.ZipUpdate.Command">
            <summary>
            Get the command for this update.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.ZipUpdate.Filename">
            <summary>
            Get the filename if any for this update.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.ZipUpdate.SizePatchOffset">
            <summary>
            Get/set the location of the size patch for this update.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.ZipUpdate.CrcPatchOffset">
            <summary>
            Get /set the location of the crc patch for this update.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ZipFile.ZipString">
            <summary>
            Represents a string from a <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipFile"/> which is stored as an array of bytes.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.ZipString.#ctor(System.String)">
            <summary>
            Initialise a <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipFile.ZipString"/> with a string.
            </summary>
            <param name="comment">The textual string form.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.ZipString.#ctor(System.Byte[])">
            <summary>
            Initialise a <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipFile.ZipString"/> using a string in its binary 'raw' form.
            </summary>
            <param name="rawString"></param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.ZipString.Reset">
            <summary>
            Reset the comment to its initial state.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.ZipString.op_Implicit(ICSharpCode.SharpZipLib.Zip.ZipFile.ZipString)~System.String">
            <summary>
            Implicit conversion of comment to a string.
            </summary>
            <param name="comment">The <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipFile.ZipString"/> to convert to a string.</param>
            <returns>The string value for the comment.</returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.ZipString.RawLength">
            <summary>
            Get the length of the comment when represented as raw bytes.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.ZipString.RawComment">
            <summary>
            Get the comment in its 'raw' form as plain bytes.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ZipFile.UncompressedStream">
            <summary>
            An <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipFile.UncompressedStream"/> is a stream that you can write uncompressed data
            to and flush, but cannot read, seek or do anything else to.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.UncompressedStream.Close">
            <summary>
            Close this stream instance.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.UncompressedStream.Flush">
            <summary>
            Write any buffered data to underlying storage.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.UncompressedStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.UncompressedStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.UncompressedStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.UncompressedStream.Length">
            <summary>
            Get the length in bytes of the stream.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.UncompressedStream.Position">
            <summary>
            Gets or sets the position within the current stream.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ZipFile.PartialInputStream">
            <summary>
            A <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipFile.PartialInputStream"/> is an <see cref="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream"/>
            whose data is only a part or subsection of a file.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream">
             <summary>
             This filter stream is used to decompress data compressed using the "deflate"
             format. The "deflate" format is described in RFC 1951.
            
             This stream may form the basis for other decompression filters, such
             as the <see cref="T:ICSharpCode.SharpZipLib.GZip.GZipInputStream">GZipInputStream</see>.
            
             Author of the original java version : John Leuner.
             </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.#ctor(System.IO.Stream)">
            <summary>
            Create an InflaterInputStream with the default decompressor
            and a default buffer size of 4KB.
            </summary>
            <param name = "baseInputStream">
            The InputStream to read bytes from
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.#ctor(System.IO.Stream,ICSharpCode.SharpZipLib.Zip.Compression.Inflater)">
            <summary>
            Create an InflaterInputStream with the specified decompressor
            and a default buffer size of 4KB.
            </summary>
            <param name = "baseInputStream">
            The source of input data
            </param>
            <param name = "inf">
            The decompressor used to decompress data read from baseInputStream
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.#ctor(System.IO.Stream,ICSharpCode.SharpZipLib.Zip.Compression.Inflater,System.Int32)">
            <summary>
            Create an InflaterInputStream with the specified decompressor
            and the specified buffer size.
            </summary>
            <param name = "baseInputStream">
            The InputStream to read bytes from
            </param>
            <param name = "inflater">
            The decompressor to use
            </param>
            <param name = "bufferSize">
            Size of the buffer to use
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Skip(System.Int64)">
            <summary>
            Skip specified number of bytes of uncompressed data
            </summary>
            <param name="count">
            Number of bytes to skip
            </param>
            <returns>
            The number of bytes skipped, zero if the end of 
            stream has been reached
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Number of bytes to skip is less than zero
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.StopDecrypting">
            <summary>
            Clear any cryptographic state.
            </summary>		
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Fill">
            <summary>
            Fills the buffer with more data to decompress.
            </summary>
            <exception cref="T:ICSharpCode.SharpZipLib.SharpZipBaseException">
            Stream ends early
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Flush">
            <summary>
            Flushes the baseInputStream
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream
            Always throws a NotSupportedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.SetLength(System.Int64)">
            <summary>
            Set the length of the current stream
            Always throws a NotSupportedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to stream and advances the current position
            This method always throws a NotSupportedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.WriteByte(System.Byte)">
            <summary>
            Writes one byte to the current stream and advances the current position
            Always throws a NotSupportedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Entry point to begin an asynchronous write.  Always throws a NotSupportedException.
            </summary>
            <param name="buffer">The buffer to write data from</param>
            <param name="offset">Offset of first byte to write</param>
            <param name="count">The maximum number of bytes to write</param>
            <param name="callback">The method to be called when the asynchronous write operation is completed</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous write request from other requests</param>
            <returns>An <see cref="T:System.IAsyncResult">IAsyncResult</see> that references the asynchronous write</returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Close">
            <summary>
            Closes the input stream.  When <see cref="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.IsStreamOwner"></see>
            is true the underlying stream is also closed.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads decompressed data into the provided buffer byte array
            </summary>
            <param name="buffer">
            The array to read and decompress data into
            </param>
            <param name="offset">
            The offset indicating where the data should be placed
            </param>
            <param name="count">
            The number of bytes to decompress
            </param>
            <returns>The number of bytes read.  Zero signals the end of stream</returns>
            <exception cref="T:ICSharpCode.SharpZipLib.SharpZipBaseException">
            Inflater needs a dictionary
            </exception>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.inf">
            <summary>
            Decompressor for this stream
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.inputBuffer">
            <summary>
            <see cref="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer">Input buffer</see> for this stream.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.baseInputStream">
            <summary>
            Base stream the inflater reads from.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.csize">
            <summary>
            The compressed size
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.isClosed">
            <summary>
            Flag indicating wether this instance has been closed or not.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.isStreamOwner">
            <summary>
            Flag indicating wether this instance is designated the stream owner.
            When closing if this flag is true the underlying stream is closed.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.IsStreamOwner">
            <summary>
            Get/set flag indicating ownership of underlying stream.
            When the flag is true <see cref="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Close"/> will close the underlying stream also.
            </summary>
            <remarks>
            The default value is true.
            </remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Available">
            <summary>
            Returns 0 once the end of the stream (EOF) has been reached.
            Otherwise returns 1.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.CanSeek">
            <summary>
            Gets a value of false indicating seeking is not supported for this stream.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.CanWrite">
            <summary>
            Gets a value of false indicating that this stream is not writeable.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Length">
            <summary>
            A value representing the length of the stream in bytes.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Position">
            <summary>
            The current position within the stream.
            Throws a NotSupportedException when attempting to set the position
            </summary>
            <exception cref="T:System.NotSupportedException">Attempting to set the position</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.PartialInputStream.#ctor(System.IO.Stream,System.Int64,System.Int64)">
            <summary>
            Initialise a new instance of the <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipFile.PartialInputStream"/> class.
            </summary>
            <param name="baseStream">The underlying stream to use for IO.</param>
            <param name="start">The start of the partial data.</param>
            <param name="length">The length of the partial data.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.PartialInputStream.SkipBytes(System.Int64)">
            <summary>
            Skip the specified number of input bytes.
            </summary>
            <param name="count">The maximum number of input bytes to skip.</param>
            <returns>The actuial number of input bytes skipped.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.PartialInputStream.ReadByte">
            <summary>
            Read a byte from this stream.
            </summary>
            <returns>Returns the byte read or -1 on end of stream.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.PartialInputStream.Close">
            <summary>
            Close this <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipFile.PartialInputStream">partial input stream</see>.
            </summary>
            <remarks>
            The underlying stream is not closed.  Close the parent ZipFile class to do that.
            </remarks>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.IStaticDataSource">
            <summary>
            Provides a static way to obtain a source of data for an entry.
            </summary>
            <remarks>The </remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.IStaticDataSource.GetSource">
            <summary>
            Get a data source.
            </summary>
            <returns>Returns a <see cref="T:System.IO.Stream"/> to use for compression input.</returns>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.IDynamicDataSource">
            <summary>
            Represents a source of data that dynamically provide multiple <see cref="T:System.IO.Stream">data sources</see>
            based on the parameters passed.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.IDynamicDataSource.GetSource(ICSharpCode.SharpZipLib.Zip.ZipEntry,System.String)">
            <summary>
            Get a data source.
            </summary>
            <param name="entry">The <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry"/> to get a source for.</param>
            <param name="name">The name for data if known.</param>
            <returns>Returns a <see cref="T:System.IO.Stream"/> to use for compression input.</returns>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.StaticDiskDataSource">
            <summary>
            Default implementation of a <see cref="T:ICSharpCode.SharpZipLib.Zip.IStaticDataSource"/>
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.StaticDiskDataSource.#ctor(System.String)">
            <summary>
            Initialise a new instnace of <see cref="T:ICSharpCode.SharpZipLib.Zip.StaticDiskDataSource"/>
            </summary>
            <param name="fileName">The name of the file to obtain data from.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.StaticDiskDataSource.GetSource">
            <summary>
            Get a <see cref="T:System.IO.Stream"/> providing data.
            </summary>
            <returns>Returns a <see cref="T:System.IO.Stream"/> provising data.</returns>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.DynamicDiskDataSource">
            <summary>
            Default implementation of <see cref="T:ICSharpCode.SharpZipLib.Zip.IDynamicDataSource"/>
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.DynamicDiskDataSource.#ctor">
            <summary>
            Initialise a default instance of <see cref="T:ICSharpCode.SharpZipLib.Zip.DynamicDiskDataSource"/>.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.DynamicDiskDataSource.GetSource(ICSharpCode.SharpZipLib.Zip.ZipEntry,System.String)">
            <summary>
            Get a <see cref="T:System.IO.Stream"/> providing data for an entry.
            </summary>
            <param name="entry">The entry to provide data for.</param>
            <param name="name">The file name for data if known.</param>
            <returns>Returns a stream providing data; or null if not available</returns>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.IArchiveStorage">
            <summary>
            Defines facilities for data storage when updating Zip Archives.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.IArchiveStorage.GetTemporaryOutput">
            <summary>
            Get an empty <see cref="T:System.IO.Stream"/> that can be used for temporary output.
            </summary>
            <returns>Returns a temporary output <see cref="T:System.IO.Stream"/></returns>
            <seealso cref="M:ICSharpCode.SharpZipLib.Zip.IArchiveStorage.ConvertTemporaryToFinal"></seealso>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.IArchiveStorage.ConvertTemporaryToFinal">
            <summary>
            Convert a temporary output stream to a final stream.
            </summary>
            <returns>The resulting final <see cref="T:System.IO.Stream"/></returns>
            <seealso cref="M:ICSharpCode.SharpZipLib.Zip.IArchiveStorage.GetTemporaryOutput"/>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.IArchiveStorage.MakeTemporaryCopy(System.IO.Stream)">
            <summary>
            Make a temporary copy of the original stream.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to copy.</param>
            <returns>Returns a temporary output <see cref="T:System.IO.Stream"/> that is a copy of the input.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.IArchiveStorage.OpenForDirectUpdate(System.IO.Stream)">
            <summary>
            Return a stream suitable for performing direct updates on the original source.
            </summary>
            <param name="stream">The current stream.</param>
            <returns>Returns a stream suitable for direct updating.</returns>
            <remarks>This may be the current stream passed.</remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.IArchiveStorage.Dispose">
            <summary>
            Dispose of this instance.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.IArchiveStorage.UpdateMode">
            <summary>
            Get the <see cref="T:ICSharpCode.SharpZipLib.Zip.FileUpdateMode"/> to apply during updates.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.BaseArchiveStorage">
            <summary>
            An abstract <see cref="T:ICSharpCode.SharpZipLib.Zip.IArchiveStorage"/> suitable for extension by inheritance.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.BaseArchiveStorage.#ctor(ICSharpCode.SharpZipLib.Zip.FileUpdateMode)">
            <summary>
            Initializes a new instance of the <see cref="T:ICSharpCode.SharpZipLib.Zip.BaseArchiveStorage"/> class.
            </summary>
            <param name="updateMode">The update mode.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.BaseArchiveStorage.GetTemporaryOutput">
            <summary>
            Gets a temporary output <see cref="T:System.IO.Stream"/>
            </summary>
            <returns>Returns the temporary output stream.</returns>
            <seealso cref="M:ICSharpCode.SharpZipLib.Zip.BaseArchiveStorage.ConvertTemporaryToFinal"></seealso>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.BaseArchiveStorage.ConvertTemporaryToFinal">
            <summary>
            Converts the temporary <see cref="T:System.IO.Stream"/> to its final form.
            </summary>
            <returns>Returns a <see cref="T:System.IO.Stream"/> that can be used to read
            the final storage for the archive.</returns>
            <seealso cref="M:ICSharpCode.SharpZipLib.Zip.BaseArchiveStorage.GetTemporaryOutput"/>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.BaseArchiveStorage.MakeTemporaryCopy(System.IO.Stream)">
            <summary>
            Make a temporary copy of a <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to make a copy of.</param>
            <returns>Returns a temporary output <see cref="T:System.IO.Stream"/> that is a copy of the input.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.BaseArchiveStorage.OpenForDirectUpdate(System.IO.Stream)">
            <summary>
            Return a stream suitable for performing direct updates on the original source.
            </summary>
            <returns>Returns a stream suitable for direct updating.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.BaseArchiveStorage.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.BaseArchiveStorage.UpdateMode">
            <summary>
            Gets the update mode applicable.
            </summary>
            <value>The update mode.</value>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.DiskArchiveStorage">
            <summary>
            An <see cref="T:ICSharpCode.SharpZipLib.Zip.IArchiveStorage"/> implementation suitable for hard disks.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.DiskArchiveStorage.#ctor(ICSharpCode.SharpZipLib.Zip.ZipFile,ICSharpCode.SharpZipLib.Zip.FileUpdateMode)">
            <summary>
            Initializes a new instance of the <see cref="T:ICSharpCode.SharpZipLib.Zip.DiskArchiveStorage"/> class.
            </summary>
            <param name="file">The file.</param>
            <param name="updateMode">The update mode.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.DiskArchiveStorage.#ctor(ICSharpCode.SharpZipLib.Zip.ZipFile)">
            <summary>
            Initializes a new instance of the <see cref="T:ICSharpCode.SharpZipLib.Zip.DiskArchiveStorage"/> class.
            </summary>
            <param name="file">The file.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.DiskArchiveStorage.GetTemporaryOutput">
            <summary>
            Gets a temporary output <see cref="T:System.IO.Stream"/> for performing updates on.
            </summary>
            <returns>Returns the temporary output stream.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.DiskArchiveStorage.ConvertTemporaryToFinal">
            <summary>
            Converts a temporary <see cref="T:System.IO.Stream"/> to its final form.
            </summary>
            <returns>Returns a <see cref="T:System.IO.Stream"/> that can be used to read
            the final storage for the archive.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.DiskArchiveStorage.MakeTemporaryCopy(System.IO.Stream)">
            <summary>
            Make a temporary copy of a stream.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to copy.</param>
            <returns>Returns a temporary output <see cref="T:System.IO.Stream"/> that is a copy of the input.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.DiskArchiveStorage.OpenForDirectUpdate(System.IO.Stream)">
            <summary>
            Return a stream suitable for performing direct updates on the original source.
            </summary>
            <returns>Returns a stream suitable for direct updating.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.DiskArchiveStorage.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.MemoryArchiveStorage">
            <summary>
            An <see cref="T:ICSharpCode.SharpZipLib.Zip.IArchiveStorage"/> implementation suitable for in memory streams.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.MemoryArchiveStorage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ICSharpCode.SharpZipLib.Zip.MemoryArchiveStorage"/> class.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.MemoryArchiveStorage.#ctor(ICSharpCode.SharpZipLib.Zip.FileUpdateMode)">
            <summary>
            Initializes a new instance of the <see cref="T:ICSharpCode.SharpZipLib.Zip.MemoryArchiveStorage"/> class.
            </summary>
            <param name="updateMode">The <see cref="T:ICSharpCode.SharpZipLib.Zip.FileUpdateMode"/> to use</param>
            <remarks>This constructor is for testing as memory streams dont really require safe mode.</remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.MemoryArchiveStorage.GetTemporaryOutput">
            <summary>
            Gets the temporary output <see cref="T:System.IO.Stream"/>
            </summary>
            <returns>Returns the temporary output stream.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.MemoryArchiveStorage.ConvertTemporaryToFinal">
            <summary>
            Converts the temporary <see cref="T:System.IO.Stream"/> to its final form.
            </summary>
            <returns>Returns a <see cref="T:System.IO.Stream"/> that can be used to read
            the final storage for the archive.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.MemoryArchiveStorage.MakeTemporaryCopy(System.IO.Stream)">
            <summary>
            Make a temporary copy of the original stream.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to copy.</param>
            <returns>Returns a temporary output <see cref="T:System.IO.Stream"/> that is a copy of the input.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.MemoryArchiveStorage.OpenForDirectUpdate(System.IO.Stream)">
            <summary>
            Return a stream suitable for performing direct updates on the original source.
            </summary>
            <returns>Returns a stream suitable for direct updating.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.MemoryArchiveStorage.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.MemoryArchiveStorage.FinalStream">
            <summary>
            Get the stream returned by <see cref="M:ICSharpCode.SharpZipLib.Zip.MemoryArchiveStorage.ConvertTemporaryToFinal"/> if this was in fact called.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer">
            <summary>
            This class is general purpose class for writing data to a buffer.
            
            It allows you to write bits as well as bytes
            Based on DeflaterPending.java
            
            author of the original java version : Jochen Hoenicke
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.buffer_">
            <summary>
            Internal work buffer
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.#ctor">
            <summary>
            construct instance using default buffer size of 4096
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.#ctor(System.Int32)">
            <summary>
            construct instance using specified buffer size
            </summary>
            <param name="bufferSize">
            size to use for internal buffer
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.Reset">
            <summary>
            Clear internal state/buffers
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.WriteByte(System.Int32)">
            <summary>
            Write a byte to buffer
            </summary>
            <param name="value">
            The value to write
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.WriteShort(System.Int32)">
            <summary>
            Write a short value to buffer LSB first
            </summary>
            <param name="value">
            The value to write.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.WriteInt(System.Int32)">
            <summary>
            write an integer LSB first
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.WriteBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write a block of data to buffer
            </summary>
            <param name="block">data to write</param>
            <param name="offset">offset of first byte to write</param>
            <param name="length">number of bytes to write</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.AlignToByte">
            <summary>
            Align internal buffer on a byte boundary
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.WriteBits(System.Int32,System.Int32)">
            <summary>
            Write bits to internal buffer
            </summary>
            <param name="b">source of bits</param>
            <param name="count">number of bits to write</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.WriteShortMSB(System.Int32)">
            <summary>
            Write a short value to internal buffer most significant byte first
            </summary>
            <param name="s">value to write</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.Flush(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Flushes the pending buffer into the given output array.  If the
            output array is to small, only a partial flush is done.
            </summary>
            <param name="output">
            The output array.
            </param>
            <param name="offset">
            The offset into output array.
            </param>
            <param name="length">
            The maximum number of bytes to store.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.ToByteArray">
            <summary>
            Convert internal buffer to byte array.
            Buffer is empty on completion
            </summary>
            <returns>
            The internal buffer contents converted to a byte array.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.BitCount">
            <summary>
            The number of bits written to the buffer
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.IsFlushed">
            <summary>
            Indicates if buffer has been flushed
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.InflaterHuffmanTree">
            <summary>
            Huffman tree used for inflation
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.InflaterHuffmanTree.defLitLenTree">
            <summary>
            Literal length tree
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.InflaterHuffmanTree.defDistTree">
            <summary>
            Distance tree
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.InflaterHuffmanTree.#ctor(System.Byte[])">
            <summary>
            Constructs a Huffman tree from the array of code lengths.
            </summary>
            <param name = "codeLengths">
            the array of code lengths
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.InflaterHuffmanTree.GetSymbol(ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator)">
            <summary>
            Reads the next symbol from input.  The symbol is encoded using the
            huffman tree.
            </summary>
            <param name="input">
            input the input source.
            </param>
            <returns>
            the next symbol, or -1 if not enough input is available.
            </returns>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.DeflateStrategy">
            <summary>
            Strategies for deflater
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflateStrategy.Default">
            <summary>
            The default strategy
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflateStrategy.Filtered">
            <summary>
            This strategy will only allow longer string repetitions.  It is
            useful for random data with a small character set.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflateStrategy.HuffmanOnly">
            <summary>
            This strategy will not look for string repetitions at all.  It
            only encodes with Huffman trees (which means, that more common
            characters get a smaller encoding.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine">
            <summary>
            Low level compression engine for deflate algorithm which uses a 32K sliding window
            with secondary compression from Huffman/Shannon-Fano codes.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants">
            <summary>
            This class contains constants used for deflation.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.DEBUGGING">
            <summary>
            Set to true to enable debugging
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.STORED_BLOCK">
            <summary>
            Written to Zip file to identify a stored block
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.STATIC_TREES">
            <summary>
            Identifies static tree in Zip file
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.DYN_TREES">
            <summary>
            Identifies dynamic tree in Zip file
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.PRESET_DICT">
            <summary>
            Header flag indicating a preset dictionary for deflation
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.DEFAULT_MEM_LEVEL">
            <summary>
            Sets internal buffer sizes for Huffman encoding
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.MAX_MATCH">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.MIN_MATCH">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.MAX_WBITS">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.WSIZE">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.WMASK">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.HASH_BITS">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.HASH_SIZE">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.HASH_MASK">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.HASH_SHIFT">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.MIN_LOOKAHEAD">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.MAX_DIST">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.PENDING_BUF_SIZE">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.DEFLATE_STORED">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.DEFLATE_FAST">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.DEFLATE_SLOW">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.MAX_BLOCK_SIZE">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.GOOD_LENGTH">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.MAX_LAZY">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.NICE_LENGTH">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.MAX_CHAIN">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.COMPR_FUNC">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.#ctor(ICSharpCode.SharpZipLib.Zip.Compression.DeflaterPending)">
            <summary>
            Construct instance with pending buffer
            </summary>
            <param name="pending">
            Pending buffer to use
            </param>>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.Deflate(System.Boolean,System.Boolean)">
            <summary>
            Deflate drives actual compression of data
            </summary>
            <returns>Returns true if progress has been made.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.SetInput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets input data to be deflated.  Should only be called when <code>NeedsInput()</code>
            returns true
            </summary>
            <param name="buffer">The buffer containing input data.</param>
            <param name="offset">The offset of the first byte of data.</param>
            <param name="count">The number of bytes of data to use as input.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.NeedsInput">
            <summary>
            Return true if input is needed via <see cref="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.SetInput(System.Byte[],System.Int32,System.Int32)"> SetInput</see>
            </summary>		
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.SetDictionary(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Set compression dictionary
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.Reset">
            <summary>
            Reset internal state
            </summary>		
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.ResetAdler">
            <summary>
            Reset Adler checksum
            </summary>		
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.SetLevel(System.Int32)">
            <summary>
            Set the deflate level (0-9)
            </summary>
            <param name="level">The value to set the level to.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.FillWindow">
            <summary>
            Fill the window
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.InsertString">
            <summary>
            Inserts the current string in the head hash and returns the previous
            value for this hash.
            </summary>
            <returns>The previous hash value</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.FindLongestMatch(System.Int32)">
             <summary>
             Find the best (longest) string in the window matching the 
             string starting at strstart.
            
             Preconditions:
             <code>
             strstart + MAX_MATCH &lt;= window.length.</code>
             </summary>
             <param name="curMatch"></param>
             <returns>True if a match greater than the minimum length is found</returns>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.head">
            <summary>
            Hashtable, hashing three characters to an index for window, so
            that window[index]..window[index+2] have this hash code.  
            Note that the array should really be unsigned short, so you need
            to and the values with 0xffff.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.prev">
            <summary>
            <code>prev[index &amp; WMASK]</code> points to the previous index that has the
            same hash code as the string starting at index.  This way 
            entries with the same hash code are in a linked list.
            Note that the array should really be unsigned short, so you need
            to and the values with 0xffff.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.strstart">
            <summary>
            Points to the current character in the window.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.lookahead">
            <summary>
            lookahead is the number of characters starting at strstart in
            window that are valid.
            So window[strstart] until window[strstart+lookahead-1] are valid
            characters.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.window">
            <summary>
            This array contains the part of the uncompressed stream that 
            is of relevance.  The current character is indexed by strstart.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.compressionFunction">
            <summary>
            The current compression function.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.inputBuf">
            <summary>
            The input data for compression.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.totalIn">
            <summary>
            The total bytes of input read.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.inputOff">
            <summary>
            The offset into inputBuf, where input data starts.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.inputEnd">
            <summary>
            The end offset of the input data.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.adler">
            <summary>
            The adler checksum
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.Adler">
            <summary>
            Get current value of Adler checksum
            </summary>		
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.TotalIn">
            <summary>
            Total data processed
            </summary>		
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.Strategy">
            <summary>
            Get/set the <see cref="T:ICSharpCode.SharpZipLib.Zip.Compression.DeflateStrategy">deflate strategy</see>
            </summary>		
        </member>
        <member name="T:Mtime.Community.Utility.URLRewriter.Config.MtimeRewriterConfig">
            <summary>
            定义了URL重写的配置类文件结构以及获取配置
            </summary>
        </member>
        <member name="T:Rss.RssTextInput">
            <summary>Multi-purpose channel element for the purpose of allowing users to submit queries back to the publisher's site</summary>
            <remarks>Typically for a search or subscription</remarks>
        </member>
        <member name="T:Rss.RssElement">
            <summary>Base class for all RSS elements</summary>
        </member>
        <member name="M:Rss.RssElement.#ctor">
            <summary>Initialize a new instance of the RssElement class</summary>
        </member>
        <member name="M:Rss.RssTextInput.#ctor">
            <summary>Initialize a new instance of the RssTextInput class</summary>
        </member>
        <member name="P:Rss.RssTextInput.Title">
            <summary>The label of the submit button in the text input area</summary>
            <remarks>Maximum length is 100 (For RSS 0.91)</remarks>
        </member>
        <member name="P:Rss.RssTextInput.Description">
            <summary>Explains the text input area</summary>
            <remarks>Maximum length is 500 (For RSS 0.91)</remarks>
        </member>
        <member name="P:Rss.RssTextInput.Name">
            <summary>The name of the text object in the text input area</summary>
            <remarks>Maximum length is 20 (For RSS 0.91).</remarks>
        </member>
        <member name="P:Rss.RssTextInput.Link">
            <summary>The URL of the script that processes text input requests</summary>
            <remarks>Maximum length is 500 (For RSS 0.91)</remarks>
        </member>
        <member name="T:Rss.RssCategoryCollection">
            <summary>A strongly typed collection of <see cref="T:Rss.RssCategory"/> objects</summary>
        </member>
        <member name="M:Rss.RssCategoryCollection.Add(Rss.RssCategory)">
            <summary>Adds a specified category to this collection.</summary>
            <param name="rssCategory">The category to add.</param>
            <returns>The zero-based index of the added category.</returns>
        </member>
        <member name="M:Rss.RssCategoryCollection.Contains(Rss.RssCategory)">
            <summary>Determines whether the RssCategoryCollection contains a specific element.</summary>
            <param name="rssCategory">The RssCategory to locate in the RssCategoryCollection.</param>
            <returns>true if the RssCategoryCollection contains the specified value; otherwise, false.</returns>
        </member>
        <member name="M:Rss.RssCategoryCollection.CopyTo(Rss.RssCategory[],System.Int32)">
            <summary>Copies the entire RssCategoryCollection to a compatible one-dimensional <see cref="T:System.Array"/>, starting at the specified index of the target array.</summary>
            <param name="array">The one-dimensional RssCategory Array that is the destination of the elements copied from RssCategoryCollection. The Array must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">array is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero.</exception>
            <exception cref="T:System.ArgumentException">array is multidimensional. -or- index is equal to or greater than the length of array.-or-The number of elements in the source RssCategoryCollection is greater than the available space from index to the end of the destination array.</exception>
        </member>
        <member name="M:Rss.RssCategoryCollection.IndexOf(Rss.RssCategory)">
            <summary>Searches for the specified RssCategory and returns the zero-based index of the first occurrence within the entire RssCategoryCollection.</summary>
            <param name="rssCategory">The RssCategory to locate in the RssCategoryCollection.</param>
            <returns>The zero-based index of the first occurrence of RssCategory within the entire RssCategoryCollection, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Rss.RssCategoryCollection.Insert(System.Int32,Rss.RssCategory)">
            <summary>Inserts an category into this collection at a specified index.</summary>
            <param name="index">The zero-based index of the collection at which to insert the category.</param>
            <param name="rssCategory">The category to insert into this collection.</param>
        </member>
        <member name="M:Rss.RssCategoryCollection.Remove(Rss.RssCategory)">
            <summary>Removes a specified category from this collection.</summary>
            <param name="rssCategory">The category to remove.</param>
        </member>
        <member name="P:Rss.RssCategoryCollection.Item(System.Int32)">
            <summary>Gets or sets the category at a specified index.<para>In C#, this property is the indexer for the class.</para></summary>
            <param name="index">The index of the collection to access.</param>
            <value>A category at each valid index.</value>
            <remarks>This method is an indexer that can be used to access the collection.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index.</exception>
        </member>
        <member name="T:Rss.ExceptionCollection">
            <summary>A strongly typed collection of <see cref="T:System.Exception"/> objects</summary>
        </member>
        <member name="M:Rss.ExceptionCollection.Add(System.Exception)">
            <summary>Adds a specified exception to this collection.</summary>
            <param name="exception">The exception to add.</param>
            <returns>The zero-based index of the added exception -or- -1 if the exception already exists.</returns>
        </member>
        <member name="M:Rss.ExceptionCollection.Contains(System.Exception)">
            <summary>Determines whether the ExceptionCollection contains a specific element.</summary>
            <param name="exception">The Exception to locate in the ExceptionCollection.</param>
            <returns>true if the ExceptionCollection contains the specified value; otherwise, false.</returns>
        </member>
        <member name="M:Rss.ExceptionCollection.CopyTo(System.Exception[],System.Int32)">
            <summary>Copies the entire ExceptionCollection to a compatible one-dimensional <see cref="T:System.Array"/>, starting at the specified index of the target array.</summary>
            <param name="array">The one-dimensional Exception Array that is the destination of the elements copied from ExceptionCollection. The Array must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">array is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero.</exception>
            <exception cref="T:System.ArgumentException">array is multidimensional. -or- index is equal to or greater than the length of array.-or-The number of elements in the source ExceptionCollection is greater than the available space from index to the end of the destination array.</exception>
        </member>
        <member name="M:Rss.ExceptionCollection.IndexOf(System.Exception)">
            <summary>Searches for the specified Exception and returns the zero-based index of the first occurrence within the entire ExceptionCollection.</summary>
            <param name="exception">The Exception to locate in the ExceptionCollection.</param>
            <returns>The zero-based index of the first occurrence of RssChannel within the entire ExceptionCollection, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Rss.ExceptionCollection.Insert(System.Int32,System.Exception)">
            <summary>Inserts an Exception into this collection at a specified index.</summary>
            <param name="index">The zero-based index of the collection at which to insert the Exception.</param>
            <param name="exception">The Exception to insert into this collection.</param>
        </member>
        <member name="M:Rss.ExceptionCollection.Remove(System.Exception)">
            <summary>Removes a specified Exception from this collection.</summary>
            <param name="exception">The Exception to remove.</param>
        </member>
        <member name="P:Rss.ExceptionCollection.Item(System.Int32)">
            <summary>Gets or sets the exception at a specified index.<para>In C#, this property is the indexer for the class.</para></summary>
            <param name="index">The index of the collection to access.</param>
            <value>A exception at each valid index.</value>
            <remarks>This method is an indexer that can be used to access the collection.</remarks>
        </member>
        <member name="P:Rss.ExceptionCollection.LastException">
            <summary>Returns the last exception added through the Add method.</summary>
            <value>The last exception -or- null if no exceptions exist</value>
        </member>
        <member name="T:Mtime.Community.Utility.Helper.FileHelper">
            <summary>
            文件操作类
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.FileHelper.SaveZipFileText(System.String,System.String)">
            <summary>
            保存文本文件内容
            </summary>
            <param name="content">要保存的内容</param>
            <param name="filePath">文件路径</param>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.FileHelper.SaveFileText(System.String,System.String)">
            <summary>
            保存文本文件内容
            </summary>
            <param name="content">要保存的内容</param>
            <param name="filePath">文件路径</param>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.FileHelper.GetFileText(System.String)">
            <summary>
            取得文本文件内容
            </summary>
            <param name="filePath">文件路径</param>
            <returns>文本文件内容</returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.FileHelper.SaveFileBinary(System.Byte[],System.String)">
            <summary>
            保存二进制文件内容
            </summary>
            <param name="content">要保存的内容</param>
            <param name="filePath">文件路径</param>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.FileHelper.GetFileBinary(System.String)">
            <summary>
            读取二进制文件内容
            </summary>
            <param name="filePath">文件路径</param>
        </member>
        <member name="M:ProtoBuf.Serializers.IProtoSerializer.Write(System.Object,ProtoBuf.ProtoWriter)">
            <summary>
            Perform the steps necessary to serialize this data.
            </summary>
            <param name="value">The value to be serialized.</param>
            <param name="dest">The writer entity that is accumulating the output data.</param>
        </member>
        <member name="M:ProtoBuf.Serializers.IProtoSerializer.Read(System.Object,ProtoBuf.ProtoReader)">
            <summary>
            Perform the steps necessary to deserialize this data.
            </summary>
            <param name="value">The current value, if appropriate.</param>
            <param name="source">The reader providing the input data.</param>
            <returns>The updated / replacement value.</returns>
        </member>
        <member name="M:ProtoBuf.Serializers.IProtoSerializer.EmitWrite(ProtoBuf.Compiler.CompilerContext,ProtoBuf.Compiler.Local)">
            <summary>Emit the IL necessary to perform the given actions
            to serialize this data.
            </summary>
            <param name="ctx">Details and utilities for the method being generated.</param>
            <param name="valueFrom">The source of the data to work against;
            If the value is only needed once, then LoadValue is sufficient. If
            the value is needed multiple times, then note that a "null"
            means "the top of the stack", in which case you should create your
            own copy - GetLocalWithValue.</param>
        </member>
        <member name="M:ProtoBuf.Serializers.IProtoSerializer.EmitRead(ProtoBuf.Compiler.CompilerContext,ProtoBuf.Compiler.Local)">
            <summary>
            Emit the IL necessary to perform the given actions to deserialize this data.
            </summary>
            <param name="ctx">Details and utilities for the method being generated.</param>
            <param name="entity">For nested values, the instance holding the values; note
            that this is not always provided - a null means not supplied. Since this is always
            a variable or argument, it is not necessary to consume this value.</param>
        </member>
        <member name="P:ProtoBuf.Serializers.IProtoSerializer.ExpectedType">
            <summary>
            The type that this serializer is intended to work for.
            </summary>
        </member>
        <member name="P:ProtoBuf.Serializers.IProtoSerializer.RequiresOldValue">
            <summary>
            Indicates whether a Read operation <em>replaces</em> the existing value, or
            <em>extends</em> the value. If false, the "value" parameter to Read is
            discarded, and should be passed in as null.
            </summary>
        </member>
        <member name="P:ProtoBuf.Serializers.IProtoSerializer.ReturnsValue">
            <summary>
            Now all Read operations return a value (although most do); if false no
            value should be expected.
            </summary>
        </member>
        <member name="T:ProtoBuf.ProtoContractAttribute">
            <summary>
            Indicates that a type is defined for protocol-buffer serialization.
            </summary>
        </member>
        <member name="P:ProtoBuf.ProtoContractAttribute.Name">
            <summary>
            Gets or sets the defined name of the type.
            </summary>
        </member>
        <member name="P:ProtoBuf.ProtoContractAttribute.ImplicitFirstTag">
            <summary>
            Gets or sets the fist offset to use with implicit field tags;
            only uesd if ImplicitFields is set.
            </summary>
        </member>
        <member name="P:ProtoBuf.ProtoContractAttribute.UseProtoMembersOnly">
            <summary>
            If specified, alternative contract markers (such as markers for XmlSerailizer or DataContractSerializer) are ignored.
            </summary>
        </member>
        <member name="P:ProtoBuf.ProtoContractAttribute.ImplicitFields">
            <summary>
            Gets or sets the mechanism used to automatically infer field tags
            for members. This option should be used in advanced scenarios only.
            Please review the important notes against the ImplicitFields enumeration.
            </summary>
        </member>
        <member name="P:ProtoBuf.ProtoContractAttribute.InferTagFromName">
            <summary>
            Enables/disables automatic tag generation based on the existing name / order
            of the defined members. This option is not used for members marked
            with ProtoMemberAttribute, as intended to provide compatibility with
            WCF serialization. WARNING: when adding new fields you must take
            care to increase the Order for new elements, otherwise data corruption
            may occur.
            </summary>
            <remarks>If not specified, the default is assumed from <see cref="P:ProtoBuf.Serializer.GlobalOptions.InferTagFromName"/>.</remarks>
        </member>
        <member name="P:ProtoBuf.ProtoContractAttribute.InferTagFromNameHasValue">
            <summary>
            Has a InferTagFromName value been explicitly set? if not, the default from the type-model is assumed.
            </summary>
        </member>
        <member name="P:ProtoBuf.ProtoContractAttribute.DataMemberOffset">
            <summary>
            Specifies an offset to apply to [DataMember(Order=...)] markers;
            this is useful when working with mex-generated classes that have
            a different origin (usually 1 vs 0) than the original data-contract.
            
            This value is added to the Order of each member.
            </summary>
        </member>
        <member name="T:ProtoBuf.Meta.ValueMember">
            <summary>
            Represents a member (property/field) that is mapped to a protobuf field
            </summary>
        </member>
        <member name="M:ProtoBuf.Meta.ValueMember.#ctor(ProtoBuf.Meta.RuntimeTypeModel,System.Type,System.Int32,System.Reflection.MemberInfo,System.Type,System.Type,System.Type,ProtoBuf.DataFormat,System.Object)">
            <summary>
            Creates a new ValueMember instance
            </summary>
        </member>
        <member name="M:ProtoBuf.Meta.ValueMember.#ctor(ProtoBuf.Meta.RuntimeTypeModel,System.Int32,System.Type,System.Type,System.Type,ProtoBuf.DataFormat)">
            <summary>
            Creates a new ValueMember instance
            </summary>
        </member>
        <member name="M:ProtoBuf.Meta.ValueMember.SetSpecified(System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
            <summary>
            Specifies methods for working with optional data members.
            </summary>
            <param name="getSpecified">Provides a method (null for none) to query whether this member should
            be serialized; it must be of the form "bool {Method}()". The member is only serialized if the
            method returns true.</param>
            <param name="setSpecified">Provides a method (null for none) to indicate that a member was
            deserialized; it must be of the form "void {Method}(bool)", and will be called with "true"
            when data is found.</param>
        </member>
        <member name="P:ProtoBuf.Meta.ValueMember.FieldNumber">
            <summary>
            The number that identifies this member in a protobuf stream
            </summary>
        </member>
        <member name="P:ProtoBuf.Meta.ValueMember.ItemType">
            <summary>
            Within a list / array / etc, the type of object for each item in the list (especially useful with ArrayList)
            </summary>
        </member>
        <member name="P:ProtoBuf.Meta.ValueMember.MemberType">
            <summary>
            The underlying type of the member
            </summary>
        </member>
        <member name="P:ProtoBuf.Meta.ValueMember.DefaultType">
            <summary>
            For abstract types (IList etc), the type of concrete object to create (if required)
            </summary>
        </member>
        <member name="P:ProtoBuf.Meta.ValueMember.ParentType">
            <summary>
            The type the defines the member
            </summary>
        </member>
        <member name="P:ProtoBuf.Meta.ValueMember.DefaultValue">
            <summary>
            The default value of the item (members with this value will not be serialized)
            </summary>
        </member>
        <member name="P:ProtoBuf.Meta.ValueMember.DataFormat">
            <summary>
            Specifies the rules used to process the field; this is used to determine the most appropriate
            wite-type, but also to describe subtypes <i>within</i> that wire-type (such as SignedVariant)
            </summary>
        </member>
        <member name="P:ProtoBuf.Meta.ValueMember.IsStrict">
            <summary>
            Indicates whether this field should follow strict encoding rules; this means (for example) that if a "fixed32"
            is encountered when "variant" is defined, then it will fail (throw an exception) when parsing. Note that
            when serializing the defined type is always used.
            </summary>
        </member>
        <member name="P:ProtoBuf.Meta.ValueMember.IsPacked">
            <summary>
            Indicates whether this field should use packed encoding (which can save lots of space for repeated primitive values).
            </summary>
        </member>
        <member name="P:ProtoBuf.Meta.ValueMember.IsRequired">
            <summary>
            Indicates whether this field is mandatory.
            </summary>
        </member>
        <member name="P:ProtoBuf.Meta.ValueMember.AsReference">
            <summary>
            Enables full object-tracking/full-graph support.
            </summary>
        </member>
        <member name="P:ProtoBuf.Meta.ValueMember.DynamicType">
            <summary>
            Embeds the type information into the stream, allowing usage with types not known in advance.
            </summary>
        </member>
        <member name="P:ProtoBuf.Meta.ValueMember.Name">
            <summary>
            Gets the logical name for this member in the schema (this is not critical for binary serialization, but may be used
            when inferring a schema).
            </summary>
        </member>
        <member name="T:ProtoBuf.Meta.RuntimeTypeModel">
            <summary>
            Provides protobuf serialization support for a number of types that can be defined at runtime
            </summary>
        </member>
        <member name="T:ProtoBuf.Meta.TypeModel">
            <summary>
            Provides protobuf serialization support for a number of types
            </summary>
        </member>
        <member name="M:ProtoBuf.Meta.TypeModel.TrySerializeAuxiliaryType(ProtoBuf.ProtoWriter,System.Type,ProtoBuf.DataFormat,System.Int32,System.Object)">
            <summary>
            This is the more "complete" version of Serialize, which handles single instances of mapped types.
            The value is written as a complete field, including field-header and (for sub-objects) a
            length-prefix
            In addition to that, this provides support for:
             - basic values; individual int / string / Guid / etc
             - IEnumerable sequences of any type handled by TrySerializeAuxiliaryType
             
            </summary>
        </member>
        <member name="M:ProtoBuf.Meta.TypeModel.Serialize(System.IO.Stream,System.Object)">
            <summary>
            Writes a protocol-buffer representation of the given instance to the supplied stream.
            </summary>
            <param name="value">The existing instance to be serialized (cannot be null).</param>
            <param name="dest">The destination stream to write to.</param>
        </member>
        <member name="M:ProtoBuf.Meta.TypeModel.DeserializeWithLengthPrefix(System.IO.Stream,System.Object,System.Type,ProtoBuf.PrefixStyle,System.Int32)">
            <summary>
            Applies a protocol-buffer stream to an existing instance (or null), using length-prefixed
            data - useful with network IO.
            </summary>
            <param name="type">The type being merged.</param>
            <param name="value">The existing instance to be modified (can be null).</param>
            <param name="source">The binary stream to apply to the instance (cannot be null).</param>
            <param name="style">How to encode the length prefix.</param>
            <param name="fieldNumber">The tag used as a prefix to each record (only used with base-128 style prefixes).</param>
            <returns>The updated instance; this may be different to the instance argument if
            either the original instance was null, or the stream defines a known sub-type of the
            original instance.</returns>
        </member>
        <member name="M:ProtoBuf.Meta.TypeModel.DeserializeWithLengthPrefix(System.IO.Stream,System.Object,System.Type,ProtoBuf.PrefixStyle,System.Int32,ProtoBuf.Serializer.TypeResolver)">
            <summary>
            Applies a protocol-buffer stream to an existing instance (or null), using length-prefixed
            data - useful with network IO.
            </summary>
            <param name="type">The type being merged.</param>
            <param name="value">The existing instance to be modified (can be null).</param>
            <param name="source">The binary stream to apply to the instance (cannot be null).</param>
            <param name="style">How to encode the length prefix.</param>
            <param name="expectedField">The tag used as a prefix to each record (only used with base-128 style prefixes).</param>
            <param name="resolver">Used to resolve types on a per-field basis.</param>
            <returns>The updated instance; this may be different to the instance argument if
            either the original instance was null, or the stream defines a known sub-type of the
            original instance.</returns>
        </member>
        <member name="M:ProtoBuf.Meta.TypeModel.DeserializeWithLengthPrefix(System.IO.Stream,System.Object,System.Type,ProtoBuf.PrefixStyle,System.Int32,ProtoBuf.Serializer.TypeResolver,System.Int32@)">
            <summary>
            Applies a protocol-buffer stream to an existing instance (or null), using length-prefixed
            data - useful with network IO.
            </summary>
            <param name="type">The type being merged.</param>
            <param name="value">The existing instance to be modified (can be null).</param>
            <param name="source">The binary stream to apply to the instance (cannot be null).</param>
            <param name="style">How to encode the length prefix.</param>
            <param name="expectedField">The tag used as a prefix to each record (only used with base-128 style prefixes).</param>
            <param name="resolver">Used to resolve types on a per-field basis.</param>
            <param name="bytesRead">Returns the number of bytes consumed by this operation (includes length-prefix overheads and any skipped data).</param>
            <returns>The updated instance; this may be different to the instance argument if
            either the original instance was null, or the stream defines a known sub-type of the
            original instance.</returns>
        </member>
        <member name="M:ProtoBuf.Meta.TypeModel.DeserializeItems(System.IO.Stream,System.Type,ProtoBuf.PrefixStyle,System.Int32,ProtoBuf.Serializer.TypeResolver)">
            <summary>
            Reads a sequence of consecutive length-prefixed items from a stream, using
            either base-128 or fixed-length prefixes. Base-128 prefixes with a tag
            are directly comparable to serializing multiple items in succession
            (use the <see cref="F:ProtoBuf.Serializer.ListItemTag"/> tag to emulate the implicit behavior
            when serializing a list/array). When a tag is
            specified, any records with different tags are silently omitted. The
            tag is ignored. The tag is ignores for fixed-length prefixes.
            </summary>
            <param name="source">The binary stream containing the serialized records.</param>
            <param name="style">The prefix style used in the data.</param>
            <param name="expectedField">The tag of records to return (if non-positive, then no tag is
            expected and all records are returned).</param>
            <param name="resolver">On a field-by-field basis, the type of object to deserialize (can be null if "type" is specified). </param>
            <param name="type">The type of object to deserialize (can be null if "resolver" is specified).</param>
            <returns>The sequence of deserialized objects.</returns>
        </member>
        <member name="M:ProtoBuf.Meta.TypeModel.DeserializeItems``1(System.IO.Stream,ProtoBuf.PrefixStyle,System.Int32)">
            <summary>
            Reads a sequence of consecutive length-prefixed items from a stream, using
            either base-128 or fixed-length prefixes. Base-128 prefixes with a tag
            are directly comparable to serializing multiple items in succession
            (use the <see cref="F:ProtoBuf.Serializer.ListItemTag"/> tag to emulate the implicit behavior
            when serializing a list/array). When a tag is
            specified, any records with different tags are silently omitted. The
            tag is ignored. The tag is ignores for fixed-length prefixes.
            </summary>
            <typeparam name="T">The type of object to deserialize.</typeparam>
            <param name="source">The binary stream containing the serialized records.</param>
            <param name="style">The prefix style used in the data.</param>
            <param name="expectedField">The tag of records to return (if non-positive, then no tag is
            expected and all records are returned).</param>
            <returns>The sequence of deserialized objects.</returns>
        </member>
        <member name="M:ProtoBuf.Meta.TypeModel.SerializeWithLengthPrefix(System.IO.Stream,System.Object,System.Type,ProtoBuf.PrefixStyle,System.Int32)">
            <summary>
            Writes a protocol-buffer representation of the given instance to the supplied stream,
            with a length-prefix. This is useful for socket programming,
            as DeserializeWithLengthPrefix can be used to read the single object back
            from an ongoing stream.
            </summary>
            <param name="type">The type being serialized.</param>
            <param name="value">The existing instance to be serialized (cannot be null).</param>
            <param name="style">How to encode the length prefix.</param>
            <param name="dest">The destination stream to write to.</param>
            <param name="fieldNumber">The tag used as a prefix to each record (only used with base-128 style prefixes).</param>
        </member>
        <member name="M:ProtoBuf.Meta.TypeModel.Deserialize(System.IO.Stream,System.Object,System.Type)">
            <summary>
            Applies a protocol-buffer stream to an existing instance (which may be null).
            </summary>
            <param name="type">The type (including inheritance) to consider.</param>
            <param name="value">The existing instance to be modified (can be null).</param>
            <param name="source">The binary stream to apply to the instance (cannot be null).</param>
            <returns>The updated instance; this may be different to the instance argument if
            either the original instance was null, or the stream defines a known sub-type of the
            original instance.</returns>
        </member>
        <member name="M:ProtoBuf.Meta.TypeModel.Deserialize(System.IO.Stream,System.Object,System.Type,System.Int32)">
            <summary>
            Applies a protocol-buffer stream to an existing instance (which may be null).
            </summary>
            <param name="type">The type (including inheritance) to consider.</param>
            <param name="value">The existing instance to be modified (can be null).</param>
            <param name="source">The binary stream to apply to the instance (cannot be null).</param>
            <param name="length">The number of bytes to consume.</param>
            <returns>The updated instance; this may be different to the instance argument if
            either the original instance was null, or the stream defines a known sub-type of the
            original instance.</returns>
        </member>
        <member name="M:ProtoBuf.Meta.TypeModel.TryDeserializeAuxiliaryType(ProtoBuf.ProtoReader,ProtoBuf.DataFormat,System.Int32,System.Type,System.Object@,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            This is the more "complete" version of Deserialize, which handles single instances of mapped types.
            The value is read as a complete field, including field-header and (for sub-objects) a
            length-prefix..kmc  
            
            In addition to that, this provides support for:
             - basic values; individual int / string / Guid / etc
             - IList sets of any type handled by TryDeserializeAuxiliaryType
            </summary>
        </member>
        <member name="M:ProtoBuf.Meta.TypeModel.Create">
            <summary>
            Creates a new runtime model, to which the caller
            can add support for a range of types. A model
            can be used "as is", or can be compiled for
            optimal performance.
            </summary>
        </member>
        <member name="M:ProtoBuf.Meta.TypeModel.ResolveProxies(System.Type)">
            <summary>
            Applies common proxy scenarios, resolving the actual type to consider
            </summary>
        </member>
        <member name="M:ProtoBuf.Meta.TypeModel.IsDefined(System.Type)">
            <summary>
            Indicates whether the supplied type is explicitly modelled by the model
            </summary>
        </member>
        <member name="M:ProtoBuf.Meta.TypeModel.GetKey(System.Type@)">
            <summary>
            Provides the key that represents a given type in the current model.
            The type is also normalized for proxies at the same time.
            </summary>
        </member>
        <member name="M:ProtoBuf.Meta.TypeModel.GetKeyImpl(System.Type)">
            <summary>
            Provides the key that represents a given type in the current model.
            </summary>
        </member>
        <member name="M:ProtoBuf.Meta.TypeModel.Serialize(System.Int32,System.Object,ProtoBuf.ProtoWriter)">
            <summary>
            Writes a protocol-buffer representation of the given instance to the supplied stream.
            </summary>
            <param name="key">Represents the type (including inheritance) to consider.</param>
            <param name="value">The existing instance to be serialized (cannot be null).</param>
            <param name="dest">The destination stream to write to.</param>
        </member>
        <member name="M:ProtoBuf.Meta.TypeModel.Deserialize(System.Int32,System.Object,ProtoBuf.ProtoReader)">
            <summary>
            Applies a protocol-buffer stream to an existing instance (which may be null).
            </summary>
            <param name="key">Represents the type (including inheritance) to consider.</param>
            <param name="value">The existing instance to be modified (can be null).</param>
            <param name="source">The binary stream to apply to the instance (cannot be null).</param>
            <returns>The updated instance; this may be different to the instance argument if
            either the original instance was null, or the stream defines a known sub-type of the
            original instance.</returns>
        </member>
        <member name="M:ProtoBuf.Meta.TypeModel.DeepClone(System.Object)">
            <summary>
            Create a deep clone of the supplied instance; any sub-items are also cloned.
            </summary>
        </member>
        <member name="M:ProtoBuf.Meta.TypeModel.ThrowUnexpectedSubtype(System.Type,System.Type)">
            <summary>
            Indicates that while an inheritance tree exists, the exact type encountered was not
            specified in that hierarchy and cannot be processed.
            </summary>
        </member>
        <member name="M:ProtoBuf.Meta.TypeModel.ThrowUnexpectedType(System.Type)">
            <summary>
            Indicates that the given type was not expected, and cannot be processed.
            </summary>
        </member>
        <member name="M:ProtoBuf.Meta.TypeModel.ThrowCannotCreateInstance(System.Type)">
            <summary>
            Indicates that the given type cannot be constructed; it may still be possible to 
            deserialize into existing instances.
            </summary>
        </member>
        <member name="E:ProtoBuf.Meta.TypeModel.DynamicTypeFormatting">
            <summary>
            Used to provide custom services for writing and parsing type names when using dynamic types. Both parsing and formatting
            are provided on a single API as it is essential that both are mapped identically at all times.
            </summary>
        </member>
        <member name="T:ProtoBuf.Meta.TypeModel.CallbackType">
            <summary>
            Indicates the type of callback to be used
            </summary>
        </member>
        <member name="F:ProtoBuf.Meta.TypeModel.CallbackType.BeforeSerialize">
            <summary>
            Invoked before an object is serialized
            </summary>
        </member>
        <member name="F:ProtoBuf.Meta.TypeModel.CallbackType.AfterSerialize">
            <summary>
            Invoked after an object is serialized
            </summary>
        </member>
        <member name="F:ProtoBuf.Meta.TypeModel.CallbackType.BeforeDeserialize">
            <summary>
            Invoked before an object is deserialized (or when a new instance is created)
            </summary>            
        </member>
        <member name="F:ProtoBuf.Meta.TypeModel.CallbackType.AfterDeserialize">
            <summary>
            Invoked after an object is deserialized
            </summary>
        </member>
        <member name="M:ProtoBuf.Meta.RuntimeTypeModel.GetTypes">
            <summary>
            Returns a sequence of the Type instances that can be
            processed by this model.
            </summary>
        </member>
        <member name="M:ProtoBuf.Meta.RuntimeTypeModel.Add(System.Type,System.Boolean)">
            <summary>
            Adds support for an additional type in this model, optionally
            appplying inbuilt patterns. If the type is already known to the
            model, the existing type is returned **without** applying
            any additional behaviour.
            </summary>
            <remarks>Inbuilt patterns include:
            [ProtoContract]/[ProtoMember(n)]
            [DataContract]/[DataMember(Order=n)]
            [XmlType]/[XmlElement(Order=n)]
            [On{Des|S}erializ{ing|ed}]
            ShouldSerialize*/*Specified
            </remarks>
            <param name="type">The type to be supported</param>
            <param name="applyDefaultBehaviour">Whether to apply the inbuilt configuration patterns (via attributes etc), or
            just add the type with no additional configuration (the type must then be manually configured).</param>
            <returns>The MetaType representing this type, allowing
            further configuration.</returns>
        </member>
        <member name="M:ProtoBuf.Meta.RuntimeTypeModel.ThrowIfFrozen">
            <summary>
            Verifies that the model is still open to changes; if not, an exception is thrown
            </summary>
        </member>
        <member name="M:ProtoBuf.Meta.RuntimeTypeModel.Freeze">
            <summary>
            Prevents further changes to this model
            </summary>
        </member>
        <member name="M:ProtoBuf.Meta.RuntimeTypeModel.GetKeyImpl(System.Type)">
            <summary>
            Provides the key that represents a given type in the current model.
            </summary>
        </member>
        <member name="M:ProtoBuf.Meta.RuntimeTypeModel.Serialize(System.Int32,System.Object,ProtoBuf.ProtoWriter)">
            <summary>
            Writes a protocol-buffer representation of the given instance to the supplied stream.
            </summary>
            <param name="key">Represents the type (including inheritance) to consider.</param>
            <param name="value">The existing instance to be serialized (cannot be null).</param>
            <param name="dest">The destination stream to write to.</param>
        </member>
        <member name="M:ProtoBuf.Meta.RuntimeTypeModel.Deserialize(System.Int32,System.Object,ProtoBuf.ProtoReader)">
            <summary>
            Applies a protocol-buffer stream to an existing instance (which may be null).
            </summary>
            <param name="key">Represents the type (including inheritance) to consider.</param>
            <param name="value">The existing instance to be modified (can be null).</param>
            <param name="source">The binary stream to apply to the instance (cannot be null).</param>
            <returns>The updated instance; this may be different to the instance argument if
            either the original instance was null, or the stream defines a known sub-type of the
            original instance.</returns>
        </member>
        <member name="M:ProtoBuf.Meta.RuntimeTypeModel.CompileInPlace">
            <summary>
            Compiles the serializers individually; this is *not* a full
            standalone compile, but can significantly boost performance
            while allowing additional types to be added.
            </summary>
            <remarks>An in-place compile can access non-public types / members</remarks>
        </member>
        <member name="M:ProtoBuf.Meta.RuntimeTypeModel.Compile">
            <summary>
            Fully compiles the current model into a static-compiled model instance
            </summary>
            <remarks>A full compilation is restricted to accessing public types / members</remarks>
            <returns>An instance of the newly created compiled type-model</returns>
        </member>
        <member name="M:ProtoBuf.Meta.RuntimeTypeModel.Compile(System.String,System.String)">
            <summary>
            Fully compiles the current model into a static-compiled serialization dll
            (the serialization dll still requires protobuf-net for support services).
            </summary>
            <remarks>A full compilation is restricted to accessing public types / members</remarks>
            <param name="name">The name of the TypeModel class to create</param>
            <param name="path">The path for the new dll</param>
            <returns>An instance of the newly created compiled type-model</returns>
        </member>
        <member name="P:ProtoBuf.Meta.RuntimeTypeModel.InferTagFromNameDefault">
            <summary>
            Global default for that
            enables/disables automatic tag generation based on the existing name / order
            of the defined members. See <seealso cref="P:ProtoBuf.ProtoContractAttribute.InferTagFromName"/>
            for usage and <b>important warning</b> / explanation.
            You must set the global default before attempting to serialize/deserialize any
            impacted type.
            </summary>
        </member>
        <member name="P:ProtoBuf.Meta.RuntimeTypeModel.Default">
            <summary>
            The default model, used to support ProtoBuf.Serializer
            </summary>
        </member>
        <member name="P:ProtoBuf.Meta.RuntimeTypeModel.Item(System.Type)">
            <summary>
            Obtains the MetaType associated with a given Type for the current model,
            allowing additional configuration.
            </summary>
        </member>
        <member name="P:ProtoBuf.Meta.RuntimeTypeModel.AutoCompile">
            <summary>
            Should serializers be compiled on demand? It may be useful
            to disable this for debugging purposes.
            </summary>
        </member>
        <member name="P:ProtoBuf.Meta.RuntimeTypeModel.AutoAddMissingTypes">
            <summary>
            Should support for unexpected types be added automatically?
            If false, an exception is thrown when unexpected types
            are encountered.
            </summary>
        </member>
        <member name="P:ProtoBuf.Meta.RuntimeTypeModel.MetadataTimeoutMilliseconds">
            <summary>
            The amount of time to wait if there are concurrent metadata access operations
            </summary>
        </member>
        <member name="T:ProtoBuf.IExtension">
            <summary>
            Provides addition capability for supporting unexpected fields during
            protocol-buffer serialization/deserialization. This allows for loss-less
            round-trip/merge, even when the data is not fully understood.
            </summary>
        </member>
        <member name="M:ProtoBuf.IExtension.BeginAppend">
            <summary>
            Requests a stream into which any unexpected fields can be persisted.
            </summary>
            <returns>A new stream suitable for storing data.</returns>
        </member>
        <member name="M:ProtoBuf.IExtension.EndAppend(System.IO.Stream,System.Boolean)">
            <summary>
            Indicates that all unexpected fields have now been stored. The
            implementing class is responsible for closing the stream. If
            "commit" is not true the data may be discarded.
            </summary>
            <param name="stream">The stream originally obtained by BeginAppend.</param>
            <param name="commit">True if the append operation completed successfully.</param>
        </member>
        <member name="M:ProtoBuf.IExtension.BeginQuery">
            <summary>
            Requests a stream of the unexpected fields previously stored.
            </summary>
            <returns>A prepared stream of the unexpected fields.</returns>
        </member>
        <member name="M:ProtoBuf.IExtension.EndQuery(System.IO.Stream)">
            <summary>
            Indicates that all unexpected fields have now been read. The
            implementing class is responsible for closing the stream.
            </summary>
            <param name="stream">The stream originally obtained by BeginQuery.</param>
        </member>
        <member name="M:ProtoBuf.IExtension.GetLength">
            <summary>
            Requests the length of the raw binary stream; this is used
            when serializing sub-entities to indicate the expected size.
            </summary>
            <returns>The length of the binary stream representing unexpected data.</returns>
        </member>
        <member name="T:ProtoBuf.ProtoBeforeSerializationAttribute">
            <summary>Specifies a method on the root-contract in an hierarchy to be invoked before serialization.</summary>
        </member>
        <member name="T:ProtoBuf.ProtoAfterSerializationAttribute">
            <summary>Specifies a method on the root-contract in an hierarchy to be invoked after serialization.</summary>
        </member>
        <member name="T:ProtoBuf.ProtoBeforeDeserializationAttribute">
            <summary>Specifies a method on the root-contract in an hierarchy to be invoked before deserialization.</summary>
        </member>
        <member name="T:ProtoBuf.ProtoAfterDeserializationAttribute">
            <summary>Specifies a method on the root-contract in an hierarchy to be invoked after deserialization.</summary>
        </member>
        <member name="T:Mtime.Community.Utility.zxing.common.BitArray">
            <summary> <p>A simple, fast array of bits, represented compactly by an array of ints internally.</p>
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="M:Mtime.Community.Utility.zxing.common.BitArray.get_Renamed(System.Int32)">
            <param name="i">bit to get
            </param>
            <returns> true iff bit i is set
            </returns>
        </member>
        <member name="M:Mtime.Community.Utility.zxing.common.BitArray.set_Renamed(System.Int32)">
            <summary> Sets bit i.
            
            </summary>
            <param name="i">bit to set
            </param>
        </member>
        <member name="M:Mtime.Community.Utility.zxing.common.BitArray.flip(System.Int32)">
            <summary> Flips bit i.
            
            </summary>
            <param name="i">bit to set
            </param>
        </member>
        <member name="M:Mtime.Community.Utility.zxing.common.BitArray.setBulk(System.Int32,System.Int32)">
            <summary> Sets a block of 32 bits, starting at bit i.
            
            </summary>
            <param name="i">first bit to set
            </param>
            <param name="newBits">the new value of the next 32 bits. Note again that the least-significant bit
            corresponds to bit i, the next-least-significant to i+1, and so on.
            </param>
        </member>
        <member name="M:Mtime.Community.Utility.zxing.common.BitArray.clear">
            <summary> Clears all bits (sets to false).</summary>
        </member>
        <member name="M:Mtime.Community.Utility.zxing.common.BitArray.isRange(System.Int32,System.Int32,System.Boolean)">
            <summary> Efficient method to check if a range of bits is set, or not set.
            
            </summary>
            <param name="start">start of range, inclusive.
            </param>
            <param name="end">end of range, exclusive
            </param>
            <param name="value">if true, checks that bits in range are set, otherwise checks that they are not set
            </param>
            <returns> true iff all bits are set or not set in range, according to value argument
            </returns>
            <throws>  IllegalArgumentException if end is less than or equal to start </throws>
        </member>
        <member name="M:Mtime.Community.Utility.zxing.common.BitArray.getBitArray">
            <returns> underlying array of ints. The first element holds the first 32 bits, and the least
            significant bit is bit 0.
            </returns>
        </member>
        <member name="M:Mtime.Community.Utility.zxing.common.BitArray.reverse">
            <summary> Reverses all bits in the array.</summary>
        </member>
        <member name="T:Mtime.Community.Utility.OAuth.OAuth2">
            <summary>
            OAuth2.0授权
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.OAuth.OAuth2.BuildQueryString(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            构建查询
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.OAuth.OAuth2.BuildQueryString(Mtime.Community.Utility.OAuth.Parameter[])">
            <summary>
            构建查询
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.OAuth.OAuth2.GetBoundary">
            <summary>
            获取分隔
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.OAuth.OAuth2.BuildPostData(System.String,Mtime.Community.Utility.OAuth.Parameter[])">
            <summary>
            获取Post数据
            </summary>
            <param name="boundary"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.OAuth.OAuth2.#ctor(System.String,System.String)">
            <summary>
            实例化OAuth类（用于实例化操作类）
            </summary>
            <param name="appKey">AppKey</param>
            <param name="appSecret">AppSecret</param>
        </member>
        <member name="M:Mtime.Community.Utility.OAuth.OAuth2.#ctor(System.String,System.String,System.String)">
            <summary>
            实例化OAuth类（用于实例化操作类）
            </summary>
            <param name="appKey">AppKey</param>
            <param name="appSecret">AppSecret</param>
            <param name="accessToken">已经获取的AccessToken，若Token没有过期即可通过操作类Client调用接口</param>
        </member>
        <member name="M:Mtime.Community.Utility.OAuth.OAuth2.SetUrl(System.String,System.String)">
            <summary>
            设置授权URL
            </summary>
            <param name="authorizeUrl">认证URL</param>
            <param name="accessTokenUrl">TokenURL</param>
        </member>
        <member name="M:Mtime.Community.Utility.OAuth.OAuth2.Request(System.String,Mtime.Community.Utility.OAuth.RequestMethod,System.Boolean,Mtime.Community.Utility.OAuth.Parameter[])">
            <summary>
            以授权做一请求
            </summary>
            <param name="url">请求地址</param>
            <param name="method">方法</param>
            <param name="multi">是否以多媒体方式</param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.OAuth.OAuth2.GetAuthorizeURL(Mtime.Community.Utility.OAuth.ResponseType)">
            <summary>
            OAuth2的authorize接口
            </summary>
            <param name="response">返回类型，支持code、token，默认值为code。</param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.OAuth.OAuth2.GetAccessTokenByAuthorizationCode(System.String)">
            <summary>
            使用code方式获取AccessToken
            </summary>
            <param name="code">Code</param>
            <returns></returns>
        </member>
        <member name="P:Mtime.Community.Utility.OAuth.OAuth2.AuthorizeUrl">
            <summary>
            授权URL
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.OAuth.OAuth2.AccessTocketUrl">
            <summary>
            令牌获取URL
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.OAuth.OAuth2.AppKey">
            <summary>
            获取App Key
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.OAuth.OAuth2.AppSecret">
            <summary>
            获取App Secret
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.OAuth.OAuth2.AccessToken">
            <summary>
            获取或设置请求Access Token
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.OAuth.OAuth2.CallbackUrl">
            <summary>
            获取或设置回调地址
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.OAuth.OAuth2.RefreshToken">
            <summary>
            暂无用，将来支持，保留以支持接口规范
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.Net.SocketServer.AppServer.Setup(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Setups the specified factory.
            </summary>
            <param name="assembly">The assembly name.</param>
            <param name="config">The config.</param>
            <returns></returns>
        </member>
        <member name="P:Mtime.Community.Utility.Net.SocketServer.AppServer.SessionCount">
            <summary>
            当前连接数
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.Net.SocketServer.AppServer.MaxSessionCount">
            <summary>
            最大连接数
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.Net.SocketServer.AppServer.ReceivePoolCount">
            <summary>
            SocketAsyncEventArgs池数
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.Net.SocketServer.AppServer.ReceivePoolFreeCount">
            <summary>
            SocketAsyncEventArgs池空闲数
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.Net.SocketServer.AppServer.ReceivePoolMaxCount">
            <summary>
            SocketAsyncEventArgs池空闲数
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.Net.SocketServer.AppServer.SendPoolCount">
            <summary>
            SocketAsyncEventArgs池数
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.Net.SocketServer.AppServer.SendPoolFreeCount">
            <summary>
            SocketAsyncEventArgs池空闲数
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.Net.SocketServer.AppServer.SendPoolMaxCount">
            <summary>
            SocketAsyncEventArgs池空闲数
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.Net.SocketServer.AppServer.ConnectPoolCount">
            <summary>
            SocketAsyncEventArgs池数
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.Net.SocketServer.AppServer.ConnectPoolFreeCount">
            <summary>
            SocketAsyncEventArgs池空闲数
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.Net.SocketServer.AppServer.ConnectPoolMaxCount">
            <summary>
            SocketAsyncEventArgs池空闲数
            </summary>
        </member>
        <member name="T:Mtime.IO.DataBuffer2">
            <summary>
            数据缓冲区
            </summary>
        </member>
        <member name="M:Mtime.IO.DataBuffer2.GetData">
            <summary>
            获取缓冲区数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mtime.IO.DataBuffer2.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从缓冲区中读取数据
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <returns>读取的字节数</returns>
        </member>
        <member name="M:Mtime.IO.DataBuffer2.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            写入数据到缓冲区中
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <returns>写入的字节数</returns>
        </member>
        <member name="P:Mtime.IO.DataBuffer2.Position">
            <summary>
            获取或设置缓冲区读取位置
            </summary>
        </member>
        <member name="P:Mtime.IO.DataBuffer2.Capacity">
            <summary>
            获取缓冲区最大容量
            </summary>
        </member>
        <member name="P:Mtime.IO.DataBuffer2.Length">
            <summary>
            获取缓冲区数据大小
            </summary>
        </member>
        <member name="T:Mtime.Service.Messaging.MsgService">
            <summary>
            消息发送类
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonReaderException">
            <summary>
            The exception thrown when an error occurs while reading Json text.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonReaderException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReaderException"/> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonReaderException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReaderException"/> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonReaderException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReaderException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:GifUtility.GraphicEx">
            <summary>
            图形控制扩展(Graphic Control Extension)这一部分是可选的（需要89a版本），
            可以放在一个图象块(包括图象标识符、局部颜色列表和图象数据)或文本扩展块的前面，
            用来控制跟在它后面的第一个图象（或文本）的渲染(Render)形式
            </summary>
        </member>
        <member name="F:GifUtility.GraphicEx.BlockSize">
            <summary>
            Block Size - 不包括块终结器，固定值4
            </summary>
        </member>
        <member name="P:GifUtility.GraphicEx.TransparencyFlag">
            <summary>
            i - 用户输入标志
            </summary>
        </member>
        <member name="P:GifUtility.GraphicEx.DisposalMethod">
            <summary>
            处置方法(Disposal Method)：指出处置图形的方法，当值为：
            0 - 不使用处置方法
            1 - 不处置图形，把图形从当前位置移去
            2 - 回复到背景色
            3 - 回复到先前状态
            4-7 - 自定义
            </summary>
        </member>
        <member name="P:GifUtility.GraphicEx.Packed">
            <summary>
            Packed
            </summary>
        </member>
        <member name="P:GifUtility.GraphicEx.Delay">
            <summary>
            Delay Time - 单位1/100秒，如果值不为1，表示暂停规定的时间后再继续往下处理数据流
            </summary>
        </member>
        <member name="P:GifUtility.GraphicEx.TranIndex">
            <summary>
            Transparent Color Index - 透明色索引值
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.GoogleSitemaps.Url.Priority">
            <summary>
            优先级，0.0~1.0
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.Controls.TextPager.showPageNumber">
            <summary>
            显示当前页两边的页码个数
            </summary>
        </member>
        <member name="T:Mtime.Community.Utility.ContactImporter.IMailContactExtract">
            <summary>
            联系人列表提取器的接口
            </summary>
        </member>
        <member name="T:Mtime.Net.Telnet.Client.JuniperClient">
            <summary>
            TelnetClient连接对象
            </summary>
        </member>
        <member name="T:Mtime.MongoDB.Protocol.DeleteMessage">
            <summary>
            
            </summary>
            <remarks>
             struct {
                 MsgHeader header;                 // standard message header
                 int32     ZERO;                   // 0 - reserved for future use
                 cstring   fullCollectionName;     // "dbname.collectionname"
                 int32     ZERO;                   // 0 - reserved for future use
                 BSON      selector;               // query object.  See below for details.
             }
            </remarks>
        </member>
        <member name="T:Mtime.MongoDB.Protocol.RequestMessage">
            <summary>
            Description of Message.
            </summary>
        </member>
        <member name="T:Mtime.MongoDB.Protocol.MessageBase">
            <summary>
            Base class for all raw messages
            </summary>
        </member>
        <member name="P:Mtime.MongoDB.Protocol.DeleteMessage.FullCollectionName">
            <summary>
            表的全路径名，如："dbname.collectionname"
            </summary>
        </member>
        <member name="T:Mtime.MongoDB.MongoException">
            <summary>
            Mongo异常基类
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.Strings.Set(System.String,System.String)">
            <summary>
            Set key to hold the string value. 
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.Strings.SetIfNotExists(System.String,System.String)">
            <summary>
            Set key to hold string value if key does not exist.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.Strings.SetAndExpire(System.String,System.Int32,System.String)">
            <summary>
            set key to hold the string value and set key to timeout after a given number of seconds.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expiretime">seconds</param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.Strings.Replace(System.String,System.Int32,System.String)">
            <summary>
            Overwrites part of the string stored at key, starting at the specified offset, for the entire length of value.
            </summary>
            <param name="key"></param>
            <param name="index"></param>
            <param name="value"></param>
            <returns>the length of the string after it was modified by the command.</returns>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.Strings.MulitySet(System.String[])">
            <summary>
            Sets the given keys to their respective values. 
            </summary>
            <param name="keyvalues"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.Strings.MulitySetIfNotExists(System.String[])">
            <summary>
            Sets the given keys to their respective values. MSETNX will not perform any operation at all even if just a single key already exists.
            </summary>
            <param name="keyvalues"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.Strings.Append(System.String,System.String)">
            <summary>
            append a string to an exists string, if no exist string it will set a string to the key.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>the length of the string after the append operation.</returns>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.Strings.GetValue(System.String)">
            <summary>
            Get the value of key.
            </summary>
            <param name="key"></param>
            <returns>the string store at key, null: no such key</returns>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.Strings.GetValues(System.String[])">
            <summary>
            Returns the values of all specified keys.
            </summary>
            <param name="keys"></param>
            <returns>list of values at the specified keys.</returns>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.Strings.GetSubString(System.String,System.Int32,System.Int32)">
            <summary>
            Returns the substring of the string value stored at key, determined by the offsets start and end (both are inclusive).
            </summary>
            <param name="key"></param>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
            <returns>the sub list</returns>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.Strings.ReSet(System.String,System.String)">
            <summary>
            tomically sets key to value and returns the old value stored at key. 
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>old value</returns>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.Strings.GetLength(System.String)">
            <summary>
            Returns the length of the string value stored at key.
            </summary>
            <param name="key"></param>
            <returns>0: no such key</returns>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.Strings.DECR(System.String)">
            <summary>
            Decrements the number stored at key by one.
            </summary>
            <param name="key"></param>
            <returns>the value of key after the decrement</returns>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.Strings.DECRBY(System.String,System.Int32)">
            <summary>
            Decrements the number stored at key by decrement.
            </summary>
            <param name="key"></param>
            <returns>the value of key after the decrement</returns>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.Strings.INCR(System.String)">
            <summary>
            Increments the number stored at key by one.
            </summary>
            <param name="key"></param>
            <returns>the value of key after the increment</returns>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.Strings.INCRBY(System.String,System.Int32)">
            <summary>
            Increments the number stored at key by increment.
            </summary>
            <param name="key"></param>
            <param name="increment"></param>
            <returns>the value of key after the increment</returns>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.Strings.GetValueForCache``1(System.String)">
            <summary>
            Get the value of key.
            </summary>
            <param name="key"></param>
            <returns>the string store at key, null: no such key</returns>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.Strings.GetValuesForCache``1(System.String[])">
            <summary>
            Returns the values of all specified keys.
            </summary>
            <param name="keys"></param>
            <returns>list of values at the specified keys.</returns>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.SortedSets.Add(System.String,System.Double,System.Object)">
            <summary>
            Adds the member with the specified score to the sorted set stored at key. 
            </summary>
            <param name="key"></param>
            <param name="score"></param>
            <param name="value"></param>
            <param name="pattern"></param>
            <returns>1 if the element was added. 0 if the element was already a member of the sorted set and the score was updated. -1 failed.</returns>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.SortedSets.Add``1(System.String,System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.Double,``0}})">
            <summary>
            Adds all the specified members with the specified scores to the sorted set stored at key.
            </summary>
            <param name="key"></param>
            <param name="score"></param>
            <param name="value"></param>
            <param name="pattern"></param>
            <returns>The number of elements added to the sorted sets, not including elements already existing for which the score was updated.</returns>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.SortedSets.Remove(System.String,System.Object)">
            <summary>
            Removes the member from the sorted set stored at key. If member is not a member of the sorted set, no operation is performed.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>1 if member was removed. 0 if member is not a member of the sorted set. -1 failed.</returns>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.SortedSets.GetCount(System.String)">
            <summary>
            Returns the sorted set cardinality (number of elements) of the sorted set stored at key.
            </summary>
            <param name="key"></param>
            <returns>the cardinality (number of elements) of the sorted set, or 0 if key does not exist. -1 failed.</returns>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.SortedSets.GetCountBetweenScore(System.String,System.Double,System.Double)">
            <summary>
            Returns the number of elements in the sorted set at key with a score between min and max.
            </summary>
            <param name="key"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns>the number of elements in the specified score range. -1 failed.</returns>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.SortedSets.GetScore(System.String,System.Object)">
            <summary>
            Returns the score of member in the sorted set at key.
            </summary>
            <param name="key"></param>
            <returns>the score of member (a double precision floating point number)</returns>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.SortedSets.INCRBY(System.String,System.Double,System.Object)">
            <summary>
            Increments the score of member in the sorted set stored at key by increment. 
            </summary>
            <param name="key"></param>
            <param name="increment"></param>
            <param name="value"></param>
            <returns>the new score of member </returns>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.SortedSets.GetValuesByRangeWithScore``1(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns the specified range of elements in the sorted set stored at key.
            </summary>
            <param name="key"></param>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
            <param name="pattern"></param>
            <returns>list of elements in the specified range (optionally with their scores).</returns>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.SortedSets.GetValueRank(System.String,System.Object,System.Boolean)">
            <summary>
            Returns the rank of member in the sorted set stored at key, with the scores ordered from low to high. 
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>the rank of member. -1 not exists or failed.</returns>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.SortedSets.RemoveValuesByRank(System.String,System.Int32,System.Int32)">
            <summary>
            Removes all elements in the sorted set stored at key with rank between start and stop.
            </summary>
            <param name="key"></param>
            <param name="startRank"></param>
            <param name="endRank"></param>
            <returns>the number of elements removed. -1 failed.</returns>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.SortedSets.RemoveValuesByScore(System.String,System.Double,System.Double)">
            <summary>
            Removes all elements in the sorted set stored at key with a score between min and max (inclusive).
            </summary>
            <param name="key"></param>
            <param name="minScore"></param>
            <param name="maxScore"></param>
            <returns>the number of elements removed. -1 failed.</returns>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.SortedSets.StoreOverLap(System.String,System.Int32,System.String[])">
            <summary>
            Computes the intersection of numkeys sorted sets given by the specified keys, and stores the result in destination.
            </summary>
            <param name="key"></param>
            <param name="keyNum"></param>
            <param name="keys"></param>
            <returns>the number of elements in the resulting sorted set at destination.</returns>
        </member>
        <member name="T:Mtime.Community.Utility.Client.SimpleRemoteService.Protocol.SimpleResponseProtocol">
            <summary>
            SimpleResponse SimpleResponseMessageDataLength\r\nSimpleResponseMessage
            </summary>
        </member>
        <member name="T:Mtime.Community.Utility.Client.BaseAsyncSocketProtocol">
            <summary>
            Command DataLength\r\nData
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.Client.BaseAsyncSocketProtocol.Reset">
            <summary>
            重置分析器
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.Client.SimpleRemoteService.Protocol.SimpleResponseProtocol.Reset">
            <summary>
            重置分析器
            </summary>
        </member>
        <member name="T:Mtime.Community.Utility.Client.SimpleRemoteService.Protocol.SimpleResponseProtocol.RemoteParseState">
            <summary>
            Remote协议分析状态
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.Client.SimpleRemoteService.Protocol.SimpleResponseProtocol.RemoteParseState.Action">
            <summary>
            操作
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.Client.SimpleRemoteService.Protocol.SimpleResponseProtocol.RemoteParseState.Length">
            <summary>
            消息长度
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.Client.SimpleRemoteService.Protocol.SimpleResponseProtocol.RemoteParseState.LF">
            <summary>
            换行符
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.Client.SimpleRemoteService.Protocol.SimpleResponseProtocol.RemoteParseState.Body">
            <summary>
            内容主体
            </summary>
        </member>
        <member name="T:Mtime.Community.Utility.Client.TigerHash">
            <summary>
            Implements the Tiger hash. (http://www.cs.technion.ac.il/~biham/Reports/Tiger/)
            
            Ported (and cleaned&amp;sped up) from the Tiger.NET VB code. (http://www.hotpixel.net/software.html)
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.Client.TigerHash.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TigerHash"/> class.
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.Client.TigerHash.Initialize">
            <summary>
            Initializes an instance of <see cref="T:TigerHash"/>.
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.Client.TigerHash.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>Routes data written to the object into the <see cref="T:TigerHash" /> hash algorithm for computing the hash.</summary>
            <param name="array">The input data. </param>
            <param name="ibStart">The offset into the byte array from which to begin using data. </param>
            <param name="cbSize">The number of bytes in the array to use as data. </param>
        </member>
        <member name="M:Mtime.Community.Utility.Client.TigerHash.HashFinal">
            <summary>
            Returns the computed <see cref="T:TigerHash" /> hash value after all data has been written to the object.
            </summary>
            <returns>The computed hash code.</returns>
        </member>
        <member name="T:Mtime.Community.Utility.URLRewriter.Config.FoxRewriterConfig">
            <summary>
            定义了URL重写的配置类文件结构以及获取配置
            </summary>
        </member>
        <member name="T:Rss.RssDefault">
            <summary>Contains default values and methods for maintaining data consistency</summary>
        </member>
        <member name="F:Rss.RssDefault.String">
            <summary>Default value for a string in all RSS classes</summary>
            <value>empty string</value>
            <remarks>If an element in the RSS class library has the value of RssDefault.String, consider the element as "not entered", "null", or empty.</remarks>
        </member>
        <member name="F:Rss.RssDefault.Int">
            <summary>Default value for an int in all RSS classes</summary>
            <value>-1</value>
            <remarks>If an element in the RSS class library has the value of RssDefault.Int, consider the element as "not entered", "null", or empty.</remarks>
        </member>
        <member name="F:Rss.RssDefault.DateTime">
            <summary>Default value for a DateTime in all RSS classes</summary>
            <value>DateTime.MinValue</value>
            <remarks>If an element in the RSS class library has the value of RssDefault.DateTime, consider the element as "not entered", "null", or empty.</remarks>
        </member>
        <member name="F:Rss.RssDefault.Uri">
            <summary>Default value for a Uri in all RSS classes</summary>
            <value>gopher://rss-net.sf.net</value>
            <remarks>If an element in the RSS class library has the value of RssDefault.Uri, consider the element as "not entered", "null", or empty.</remarks>
        </member>
        <member name="M:Rss.RssDefault.Check(System.String)">
            <summary>Verifies the string passed is not null</summary>
            <param name="input">string to verify</param>
            <returns>RssDefault.String if input is null, otherwise input</returns>
            <remarks>Method is used in properties to prevent a null value</remarks>
        </member>
        <member name="M:Rss.RssDefault.Check(System.Int32)">
            <summary>Verifies the int passed is greater than or equal to -1</summary>
            <param name="input">int to verify</param>
            <returns>RssDefault.Int if int is less than -1, else input</returns>
            <remarks>Method is used in properties to prevent values less than -1</remarks>
        </member>
        <member name="M:Rss.RssDefault.Check(System.Uri)">
            <summary>Verifies the Uri passed is not null</summary>
            <param name="input">Uri to verify</param>
            <returns>RssDefault.Uri if input is null, otherwise input</returns>
            <remarks>Method is used in all properties to prevent a null value</remarks>
        </member>
        <member name="T:Rss.RssGuid">
            <summary>Globally unique identifier</summary>
        </member>
        <member name="M:Rss.RssGuid.#ctor">
            <summary>Initialize a new instance of the RssGuid class.</summary>
        </member>
        <member name="P:Rss.RssGuid.PermaLink">
            <summary>If true, a url that can be opened in a web browser that points to the item</summary>
        </member>
        <member name="P:Rss.RssGuid.Name">
            <summary>Globally unique identifier value</summary>
        </member>
        <member name="T:Rss.RssChannel">
            <summary>Grouping of related content items on a site</summary>
        </member>
        <member name="M:Rss.RssChannel.#ctor">
            <summary>Initialize a new instance of the RssChannel class.</summary>
        </member>
        <member name="M:Rss.RssChannel.ToString">
            <summary>Returns a string representation of the current Object.</summary>
            <returns>The channel's title, description, or "RssChannel" if the title and description are blank.</returns>
        </member>
        <member name="P:Rss.RssChannel.Title">
            <summary>The name of the channel</summary>
            <remarks>Maximum length is 100 characters (For RSS 0.91)</remarks>
        </member>
        <member name="P:Rss.RssChannel.Link">
            <summary>URL of the website named in the title</summary>
            <remarks>Maximum length is 500 characters (For RSS 0.91)</remarks>
        </member>
        <member name="P:Rss.RssChannel.Description">
            <summary>Description of the channel</summary>
            <remarks>Maximum length is 500 characters (For RSS 0.91)</remarks>
        </member>
        <member name="P:Rss.RssChannel.Language">
            <summary>Language the channel is written in</summary>
        </member>
        <member name="P:Rss.RssChannel.Image">
            <summary>A link and description for a graphic icon that represent a channel</summary>
        </member>
        <member name="P:Rss.RssChannel.Copyright">
            <summary>Copyright notice for content in the channel</summary>
            <remarks>Maximum length is 100 (For RSS 0.91)</remarks>
        </member>
        <member name="P:Rss.RssChannel.ManagingEditor">
            <summary>The email address of the managing editor of the channel, the person to contact for editorial inquiries</summary>
            <remarks>
            <para>Maximum length is 100 (For RSS 0.91)</para>
            <para>The suggested format for email addresses in RSS elements is</para>
            <para>bull@mancuso.com (Bull Mancuso)</para>
            </remarks>
        </member>
        <member name="P:Rss.RssChannel.WebMaster">
            <summary>The email address of the webmaster for the channel</summary>
            <remarks>
            <para>Person to contact if there are technical problems</para>
            <para>Maximum length is 100 (For RSS 0.91)</para>
            <para>The suggested format for email addresses in RSS elements is</para>
            <para>bull@mancuso.com (Bull Mancuso)</para>
            </remarks>
        </member>
        <member name="P:Rss.RssChannel.Rating">
            <summary>The PICS rating for the channel</summary>
            <remarks>Maximum length is 500 (For RSS 0.91)</remarks>
        </member>
        <member name="P:Rss.RssChannel.PubDate">
            <summary>The publication date for the content in the channel, expressed as the coordinated universal time (UTC)</summary>
        </member>
        <member name="P:Rss.RssChannel.LastBuildDate">
            <summary>The date-time the last time the content of the channel changed, expressed as the coordinated universal time (UTC)</summary>
        </member>
        <member name="P:Rss.RssChannel.Categories">
            <summary>One or more categories the channel belongs to.</summary>
        </member>
        <member name="P:Rss.RssChannel.Generator">
            <summary>A string indicating the program used to generate the channel</summary>
        </member>
        <member name="P:Rss.RssChannel.Docs">
            <summary>A URL, points to the documentation for the format used in the RSS file</summary>
            <remarks>Maximum length is 500 (For RSS 0.91).</remarks>
        </member>
        <member name="P:Rss.RssChannel.TextInput">
            <summary>Provides information about an HTTP GET feature, typically for a search or subscription</summary>
        </member>
        <member name="P:Rss.RssChannel.SkipDays">
            <summary>Readers should not read the channel during days listed. (UTC)</summary>
            <remarks>Days are listed in the array in the following order:<list type="number">
            <item><description>Monday</description></item>
            <item><description>Tuesday</description></item>
            <item><description>Wednesday</description></item>
            <item><description>Thursday</description></item>
            <item><description>Friday</description></item>
            <item><description>Saturday</description></item>
            <item><description>Sunday</description></item>
            <item><description>Monday</description></item>
            </list></remarks>
        </member>
        <member name="P:Rss.RssChannel.SkipHours">
            <summary>Readers should not read the channel during hours listed (UTC)</summary>
            <remarks>Represents a time in UTC - 1.</remarks>
        </member>
        <member name="P:Rss.RssChannel.Cloud">
            <summary>Allow processes to register with a cloud to be notified of updates to the channel</summary>
        </member>
        <member name="P:Rss.RssChannel.TimeToLive">
            <summary>The number of minutes that a channel can be cached.</summary>
        </member>
        <member name="P:Rss.RssChannel.Items">
            <summary>All items within the channel</summary>
        </member>
        <member name="T:Mtime.Community.Utility.ResourceManager.CityResourceManager">
            <summary>
            同城资源
            </summary>
        </member>
        <member name="T:Mtime.Community.Utility.Helper.SafeConvert">
            <summary>
            Safely convert a primary data type to another primary data type.
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.SafeConvert.ToTimeSpan(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.SafeConvert.ToTimeSpan(System.Object,System.TimeSpan)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.SafeConvert.ToTimeSpan(System.String,System.TimeSpan)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.SafeConvert.ToTimeSpan(System.String)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.SafeConvert.ToString(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.SafeConvert.ToString(System.String)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.SafeConvert.ToString(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <param name="defaultString"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.SafeConvert.ToString(System.Object,System.String)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <param name="defaultString"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.SafeConvert.ToDouble(System.String,System.Double)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.SafeConvert.ToDouble(System.String)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.SafeConvert.ToDouble(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.SafeConvert.ToDouble(System.Object,System.Double)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.SafeConvert.ToSingle(System.String,System.Single)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.SafeConvert.ToSingle(System.String)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.SafeConvert.ToSingle(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.SafeConvert.ToSingle(System.Object,System.Single)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.SafeConvert.ToDecimal(System.String,System.Decimal)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.SafeConvert.ToDecimal(System.String)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.SafeConvert.ToDecimal(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.SafeConvert.ToDecimal(System.Object,System.Decimal)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.SafeConvert.ToBoolean(System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.SafeConvert.ToBoolean(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.SafeConvert.ToBoolean(System.Object,System.Boolean)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.SafeConvert.ToChar(System.String,System.Char)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.SafeConvert.ToChar(System.String)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.SafeConvert.ToChar(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.SafeConvert.ToChar(System.Object,System.Char)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.SafeConvert.ToByte(System.String,System.Byte)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.SafeConvert.ToByte(System.String)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.SafeConvert.ToByte(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.SafeConvert.ToByte(System.Object,System.Byte)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.SafeConvert.ToSByte(System.String,System.SByte)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.SafeConvert.ToSByte(System.String)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.SafeConvert.ToSByte(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.SafeConvert.ToSByte(System.Object,System.SByte)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.SafeConvert.ToInt16(System.String,System.Int16)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.SafeConvert.ToInt16(System.String)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.SafeConvert.ToInt16(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.SafeConvert.ToInt16(System.Object,System.Int16)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.SafeConvert.ToUInt16(System.String,System.UInt16)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.SafeConvert.ToUInt16(System.String)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.SafeConvert.ToUInt16(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.SafeConvert.ToUInt16(System.Object,System.UInt16)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.SafeConvert.ToInt32(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.SafeConvert.ToInt32(System.String)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.SafeConvert.ToInt32(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.SafeConvert.ToInt32(System.Object,System.Int32)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.SafeConvert.ToUInt32(System.String,System.UInt32)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.SafeConvert.ToUInt32(System.String)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.SafeConvert.ToUInt32(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.SafeConvert.ToUInt32(System.Object,System.UInt32)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.SafeConvert.ToInt64(System.String,System.Int64)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.SafeConvert.ToInt64(System.String)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.SafeConvert.ToInt64(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.SafeConvert.ToInt64(System.Object,System.Int64)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.SafeConvert.ToUInt64(System.String,System.UInt64)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.SafeConvert.ToUInt64(System.String)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.SafeConvert.ToUInt64(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.SafeConvert.ToUInt64(System.Object,System.UInt64)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.SafeConvert.ToDateTime(System.String,System.DateTime)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.SafeConvert.ToDateTime(System.String)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.SafeConvert.ToDateTime(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.SafeConvert.ToDateTime(System.Object,System.DateTime)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.SafeConvert.ToEnum(System.Type,System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="enumType"></param>
            <param name="text"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.SafeConvert.ToEnum(System.Type,System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="enumType"></param>
            <param name="obj"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.SafeConvert.ToEnum(System.Type,System.Int32)">
            <summary>
            
            </summary>
            <param name="enumType"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.SafeConvert.ArrayToComparts``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            数组转换为逗号单条限4000长度分隔字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="inputs"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.SafeConvert.ArrayToComparts``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            数组转换为逗号限定长度分隔字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="inputs"></param>
            <param name="itemMaxLength"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.SafeConvert.ArrayToComparts``1(System.Collections.Generic.IEnumerable{``0},System.Char,System.Int32)">
            <summary>
            数组转换为限定长度分隔字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="inputs"></param>
            <param name="compart"></param>
            <param name="itemMaxLength"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.SafeConvert.ListToComparts``2(System.Collections.Generic.List{Mtime.Community.Utility.Pair{``0,``1}})">
            <summary>
            将参数列表转换为单项院4000字符串数组
            </summary>
            <param name="list">列表</param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.SafeConvert.ListToComparts``2(System.Collections.Generic.List{Mtime.Community.Utility.Pair{``0,``1}},System.Int32)">
            <summary>
            将参数列表转换为字符串数组
            </summary>
            <param name="list">列表</param>
            <param name="itemMaxLength">列表串单项最大长度</param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.CryptographyHelper.MD5Encrypt(System.String)">
            <summary> 
            MD5 Encrypt 
            </summary> 
            <param name="strText">text</param> 
            <returns>md5 Encrypt string</returns> 
        </member>
        <member name="T:Mtime.Community.Utility.Net.SocketServer.PerfCounters">
            <summary>
            性能计数器
            服务器上如果没有出现相应的计数器(X64):
            lodctr /R
            lodctr "C:\Windows\Microsoft.NET\Framework64\v2.0.50727\corperfmonsymbols.ini"
            </summary>
        </member>
        <member name="T:ProtoBuf.ProtoReader">
            <summary>
            A stateful reader, used to read a protobuf stream. Typical usage would be (sequentially) to call
            ReadFieldHeader and (after matching the field) an appropriate Read* method.
            </summary>
        </member>
        <member name="M:ProtoBuf.ProtoReader.#ctor(System.IO.Stream,ProtoBuf.Meta.TypeModel)">
            <summary>
            Creates a new reader against a stream
            </summary>
            <param name="source">The source stream</param>
            <param name="model">The model to use for serialization; this can be null, but this will impair the ability to deserialize sub-objects</param>
        </member>
        <member name="M:ProtoBuf.ProtoReader.Dispose">
            <summary>
            Releases resources used by the reader, but importantly <b>does not</b> Dispose the 
            underlying stream; in many typical use-cases the stream is used for different
            processes, so it is assumed that the consumer will Dispose their stream separately.
            </summary>
        </member>
        <member name="M:ProtoBuf.ProtoReader.ReadUInt32">
            <summary>
            Reads an unsigned 32-bit integer from the stream; supported wire-types: Variant, Fixed32, Fixed64
            </summary>
        </member>
        <member name="M:ProtoBuf.ProtoReader.ReadInt16">
            <summary>
            Reads a signed 16-bit integer from the stream: Variant, Fixed32, Fixed64, SignedVariant
            </summary>
        </member>
        <member name="M:ProtoBuf.ProtoReader.ReadUInt16">
            <summary>
            Reads an unsigned 16-bit integer from the stream; supported wire-types: Variant, Fixed32, Fixed64
            </summary>
        </member>
        <member name="M:ProtoBuf.ProtoReader.ReadByte">
            <summary>
            Reads an unsigned 8-bit integer from the stream; supported wire-types: Variant, Fixed32, Fixed64
            </summary>
        </member>
        <member name="M:ProtoBuf.ProtoReader.ReadSByte">
            <summary>
            Reads a signed 8-bit integer from the stream; supported wire-types: Variant, Fixed32, Fixed64, SignedVariant
            </summary>
        </member>
        <member name="M:ProtoBuf.ProtoReader.ReadInt32">
            <summary>
            Reads a signed 32-bit integer from the stream; supported wire-types: Variant, Fixed32, Fixed64, SignedVariant
            </summary>
        </member>
        <member name="M:ProtoBuf.ProtoReader.ReadInt64">
            <summary>
            Reads a signed 64-bit integer from the stream; supported wire-types: Variant, Fixed32, Fixed64, SignedVariant
            </summary>
        </member>
        <member name="M:ProtoBuf.ProtoReader.ReadString">
            <summary>
            Reads a string from the stream (using UTF8); supported wire-types: String
            </summary>
        </member>
        <member name="M:ProtoBuf.ProtoReader.ThrowEnumException(System.Type,System.Int32)">
            <summary>
            Throws an exception indication that the given value cannot be mapped to an enum.
            </summary>
        </member>
        <member name="M:ProtoBuf.ProtoReader.ReadDouble">
            <summary>
            Reads a double-precision number from the stream; supported wire-types: Fixed32, Fixed64
            </summary>
        </member>
        <member name="M:ProtoBuf.ProtoReader.ReadObject(System.Object,System.Int32,ProtoBuf.ProtoReader)">
            <summary>
            Reads (merges) a sub-message from the stream, internally calling StartSubItem and EndSubItem, and (in between)
            parsing the message in accordance with the model associated with the reader
            </summary>
        </member>
        <member name="M:ProtoBuf.ProtoReader.EndSubItem(ProtoBuf.SubItemToken,ProtoBuf.ProtoReader)">
            <summary>
            Makes the end of consuming a nested message in the stream; the stream must be either at the correct EndGroup
            marker, or all fields of the sub-message must have been consumed (in either case, this means ReadFieldHeader
            should return zero)
            </summary>
        </member>
        <member name="M:ProtoBuf.ProtoReader.StartSubItem(ProtoBuf.ProtoReader)">
            <summary>
            Begins consuming a nested message in the stream; supported wire-types: StartGroup, String
            </summary>
            <remarks>The token returned must be help and used when callining EndSubItem</remarks>
        </member>
        <member name="M:ProtoBuf.ProtoReader.ReadFieldHeader">
            <summary>
            Reads a field header from the stream, setting the wire-type and retuning the field number. If no
            more fields are available, then 0 is returned. This methods respects sub-messages.
            </summary>
        </member>
        <member name="M:ProtoBuf.ProtoReader.TryReadFieldHeader(System.Int32)">
            <summary>
            Looks ahead to see whether the next field in the stream is what we expect
            (typically; what we've just finished reading - for example ot read successive list items)
            </summary>
        </member>
        <member name="M:ProtoBuf.ProtoReader.Hint(ProtoBuf.WireType)">
            <summary>
            Compares the streams current wire-type to the hinted wire-type, updating the reader if necessary; for example,
            a Variant may be updated to SignedVariant. If the hinted wire-type is unrelated then no change is made.
            </summary>
        </member>
        <member name="M:ProtoBuf.ProtoReader.Assert(ProtoBuf.WireType)">
            <summary>
            Verifies that the stream's current wire-type is as expected, or a specialized sub-type (for example,
            SignedVariant) - in which case the current wire-type is updated. Otherwise an exception is thrown.
            </summary>
        </member>
        <member name="M:ProtoBuf.ProtoReader.SkipField">
            <summary>
            Discards the data for the current field.
            </summary>
        </member>
        <member name="M:ProtoBuf.ProtoReader.ReadUInt64">
            <summary>
            Reads an unsigned 64-bit integer from the stream; supported wire-types: Variant, Fixed32, Fixed64
            </summary>
        </member>
        <member name="M:ProtoBuf.ProtoReader.ReadSingle">
            <summary>
            Reads a single-precision number from the stream; supported wire-types: Fixed32, Fixed64
            </summary>
        </member>
        <member name="M:ProtoBuf.ProtoReader.ReadBoolean">
            <summary>
            Reads a boolean value from the stream; supported wire-types: Variant, Fixed32, Fixed64
            </summary>
            <returns></returns>
        </member>
        <member name="M:ProtoBuf.ProtoReader.AppendBytes(System.Byte[],ProtoBuf.ProtoReader)">
            <summary>
            Reads a byte-sequence from the stream, appending them to an existing byte-sequence (which can be null); supported wire-types: String
            </summary>
        </member>
        <member name="M:ProtoBuf.ProtoReader.ReadLengthPrefix(System.IO.Stream,System.Boolean,ProtoBuf.PrefixStyle,System.Int32@)">
            <summary>
            Reads the length-prefix of a message from a stream without buffering additional data, allowing a fixed-length
            reader to be created.
            </summary>
        </member>
        <member name="M:ProtoBuf.ProtoReader.ReadLengthPrefix(System.IO.Stream,System.Boolean,ProtoBuf.PrefixStyle,System.Int32@,System.Int32@)">
            <summary>
            Reads the length-prefix of a message from a stream without buffering additional data, allowing a fixed-length
            reader to be created.
            </summary>
        </member>
        <member name="M:ProtoBuf.ProtoReader.TryReadUInt32Variant(System.IO.Stream,System.UInt32@)">
            <returns>The number of bytes consumed; 0 if no data available</returns>
        </member>
        <member name="M:ProtoBuf.ProtoReader.AppendExtensionData(ProtoBuf.IExtensible)">
            <summary>
            Copies the current field into the instance as extension data
            </summary>
        </member>
        <member name="M:ProtoBuf.ProtoReader.HasSubValue(ProtoBuf.WireType,ProtoBuf.ProtoReader)">
            <summary>
            Indicates whether the reader still has data remaining in the current sub-item,
            additionally setting the wire-type for the next field if there is more data.
            This is used when decoding packed data.
            </summary>
        </member>
        <member name="M:ProtoBuf.ProtoReader.NoteObject(System.Object,ProtoBuf.ProtoReader)">
            <summary>
            Utility method, not intended for public use; this helps maintain the root object is complex scenarios
            </summary>
        </member>
        <member name="P:ProtoBuf.ProtoReader.FieldNumber">
            <summary>
            Gets the number of the field being processed.
            </summary>
        </member>
        <member name="P:ProtoBuf.ProtoReader.WireType">
            <summary>
            Indicates the underlying proto serialization format on the wire.
            </summary>
        </member>
        <member name="P:ProtoBuf.ProtoReader.Position">
            <summary>
            Returns the position of the current reader (note that this is not necessarily the same as the position
            in the underlying stream, if multiple readers are used on the same stream)
            </summary>
        </member>
        <member name="T:ProtoBuf.Serializer">
            <summary>
            Provides protocol-buffer serialization capability for concrete, attributed types. This
            is a *default* model, but custom serializer models are also supported.
            </summary>
            <remarks>
            Protocol-buffer serialization is a compact binary format, designed to take
            advantage of sparse data and knowledge of specific data types; it is also
            extensible, allowing a type to be deserialized / merged even if some data is
            not recognised.
            </remarks>
        </member>
        <member name="F:ProtoBuf.Serializer.ListItemTag">
            <summary>
            The field number that is used as a default when serializing/deserializing a list of objects.
            The data is treated as repeated message with field number 1.
            </summary>
        </member>
        <member name="M:ProtoBuf.Serializer.GetProto``1">
            <summary>
            Suggest a .proto definition for the given type
            </summary>
            <typeparam name="T">The type to generate a .proto definition for</typeparam>
            <returns>The .proto definition as a string</returns>
        </member>
        <member name="M:ProtoBuf.Serializer.DeepClone``1(``0)">
            <summary>
            Create a deep clone of the supplied instance; any sub-items are also cloned.
            </summary>
        </member>
        <member name="M:ProtoBuf.Serializer.Merge``1(System.IO.Stream,``0)">
            <summary>
            Applies a protocol-buffer stream to an existing instance.
            </summary>
            <typeparam name="T">The type being merged.</typeparam>
            <param name="instance">The existing instance to be modified (can be null).</param>
            <param name="source">The binary stream to apply to the instance (cannot be null).</param>
            <returns>The updated instance; this may be different to the instance argument if
            either the original instance was null, or the stream defines a known sub-type of the
            original instance.</returns>
        </member>
        <member name="M:ProtoBuf.Serializer.Deserialize``1(System.IO.Stream)">
            <summary>
            Creates a new instance from a protocol-buffer stream
            </summary>
            <typeparam name="T">The type to be created.</typeparam>
            <param name="source">The binary stream to apply to the new instance (cannot be null).</param>
            <returns>A new, initialized instance.</returns>
        </member>
        <member name="M:ProtoBuf.Serializer.Serialize``1(System.IO.Stream,``0)">
            <summary>
            Writes a protocol-buffer representation of the given instance to the supplied stream.
            </summary>
            <param name="instance">The existing instance to be serialized (cannot be null).</param>
            <param name="destination">The destination stream to write to.</param>
        </member>
        <member name="M:ProtoBuf.Serializer.ChangeType``2(``0)">
            <summary>
            Serializes a given instance and deserializes it as a different type;
            this can be used to translate between wire-compatible objects (where
            two .NET types represent the same data), or to promote/demote a type
            through an inheritance hierarchy.
            </summary>
            <remarks>No assumption of compatibility is made between the types.</remarks>
            <typeparam name="TFrom">The type of the object being copied.</typeparam>
            <typeparam name="TTo">The type of the new object to be created.</typeparam>
            <param name="instance">The existing instance to use as a template.</param>
            <returns>A new instane of type TNewType, with the data from TOldType.</returns>
        </member>
        <member name="M:ProtoBuf.Serializer.PrepareSerializer``1">
            <summary>
            Precompiles the serializer for a given type.
            </summary>
        </member>
        <member name="M:ProtoBuf.Serializer.DeserializeItems``1(System.IO.Stream,ProtoBuf.PrefixStyle,System.Int32)">
            <summary>
            Reads a sequence of consecutive length-prefixed items from a stream, using
            either base-128 or fixed-length prefixes. Base-128 prefixes with a tag
            are directly comparable to serializing multiple items in succession
            (use the <see cref="F:ProtoBuf.Serializer.ListItemTag"/> tag to emulate the implicit behavior
            when serializing a list/array). When a tag is
            specified, any records with different tags are silently omitted. The
            tag is ignored. The tag is ignores for fixed-length prefixes.
            </summary>
            <typeparam name="T">The type of object to deserialize.</typeparam>
            <param name="source">The binary stream containing the serialized records.</param>
            <param name="style">The prefix style used in the data.</param>
            <param name="fieldNumber">The tag of records to return (if non-positive, then no tag is
            expected and all records are returned).</param>
            <returns>The sequence of deserialized objects.</returns>
        </member>
        <member name="M:ProtoBuf.Serializer.DeserializeWithLengthPrefix``1(System.IO.Stream,ProtoBuf.PrefixStyle)">
            <summary>
            Creates a new instance from a protocol-buffer stream that has a length-prefix
            on data (to assist with network IO).
            </summary>
            <typeparam name="T">The type to be created.</typeparam>
            <param name="source">The binary stream to apply to the new instance (cannot be null).</param>
            <param name="style">How to encode the length prefix.</param>
            <returns>A new, initialized instance.</returns>
        </member>
        <member name="M:ProtoBuf.Serializer.DeserializeWithLengthPrefix``1(System.IO.Stream,ProtoBuf.PrefixStyle,System.Int32)">
            <summary>
            Creates a new instance from a protocol-buffer stream that has a length-prefix
            on data (to assist with network IO).
            </summary>
            <typeparam name="T">The type to be created.</typeparam>
            <param name="source">The binary stream to apply to the new instance (cannot be null).</param>
            <param name="style">How to encode the length prefix.</param>
            <param name="fieldNumber">The expected tag of the item (only used with base-128 prefix style).</param>
            <returns>A new, initialized instance.</returns>
        </member>
        <member name="M:ProtoBuf.Serializer.MergeWithLengthPrefix``1(System.IO.Stream,``0,ProtoBuf.PrefixStyle)">
            <summary>
            Applies a protocol-buffer stream to an existing instance, using length-prefixed
            data - useful with network IO.
            </summary>
            <typeparam name="T">The type being merged.</typeparam>
            <param name="instance">The existing instance to be modified (can be null).</param>
            <param name="source">The binary stream to apply to the instance (cannot be null).</param>
            <param name="style">How to encode the length prefix.</param>
            <returns>The updated instance; this may be different to the instance argument if
            either the original instance was null, or the stream defines a known sub-type of the
            original instance.</returns>
        </member>
        <member name="M:ProtoBuf.Serializer.SerializeWithLengthPrefix``1(System.IO.Stream,``0,ProtoBuf.PrefixStyle)">
            <summary>
            Writes a protocol-buffer representation of the given instance to the supplied stream,
            with a length-prefix. This is useful for socket programming,
            as DeserializeWithLengthPrefix/MergeWithLengthPrefix can be used to read the single object back
            from an ongoing stream.
            </summary>
            <typeparam name="T">The type being serialized.</typeparam>
            <param name="instance">The existing instance to be serialized (cannot be null).</param>
            <param name="style">How to encode the length prefix.</param>
            <param name="destination">The destination stream to write to.</param>
        </member>
        <member name="M:ProtoBuf.Serializer.SerializeWithLengthPrefix``1(System.IO.Stream,``0,ProtoBuf.PrefixStyle,System.Int32)">
            <summary>
            Writes a protocol-buffer representation of the given instance to the supplied stream,
            with a length-prefix. This is useful for socket programming,
            as DeserializeWithLengthPrefix/MergeWithLengthPrefix can be used to read the single object back
            from an ongoing stream.
            </summary>
            <typeparam name="T">The type being serialized.</typeparam>
            <param name="instance">The existing instance to be serialized (cannot be null).</param>
            <param name="style">How to encode the length prefix.</param>
            <param name="destination">The destination stream to write to.</param>
            <param name="fieldNumber">The tag used as a prefix to each record (only used with base-128 style prefixes).</param>
        </member>
        <member name="M:ProtoBuf.Serializer.TryReadLengthPrefix(System.IO.Stream,ProtoBuf.PrefixStyle,System.Int32@)">
            <summary>Indicates the number of bytes expected for the next message.</summary>
            <param name="source">The stream containing the data to investigate for a length.</param>
            <param name="style">The algorithm used to encode the length.</param>
            <param name="length">The length of the message, if it could be identified.</param>
            <returns>True if a length could be obtained, false otherwise.</returns>
        </member>
        <member name="M:ProtoBuf.Serializer.TryReadLengthPrefix(System.Byte[],System.Int32,System.Int32,ProtoBuf.PrefixStyle,System.Int32@)">
            <summary>Indicates the number of bytes expected for the next message.</summary>
            <param name="buffer">The buffer containing the data to investigate for a length.</param>
            <param name="index">The offset of the first byte to read from the buffer.</param>
            <param name="count">The number of bytes to read from the buffer.</param>
            <param name="style">The algorithm used to encode the length.</param>
            <param name="length">The length of the message, if it could be identified.</param>
            <returns>True if a length could be obtained, false otherwise.</returns>
        </member>
        <member name="T:ProtoBuf.Serializer.GlobalOptions">
            <summary>
            Global switches that change the behavior of protobuf-net
            </summary>
        </member>
        <member name="P:ProtoBuf.Serializer.GlobalOptions.InferTagFromName">
            <summary>
            <see cref="P:ProtoBuf.Meta.RuntimeTypeModel.InferTagFromNameDefault"/>
            </summary>
        </member>
        <member name="T:ProtoBuf.Serializer.NonGeneric">
            <summary>
            Provides non-generic access to the default serializer.
            </summary>
        </member>
        <member name="M:ProtoBuf.Serializer.NonGeneric.DeepClone(System.Object)">
            <summary>
            Create a deep clone of the supplied instance; any sub-items are also cloned.
            </summary>
        </member>
        <member name="M:ProtoBuf.Serializer.NonGeneric.Serialize(System.IO.Stream,System.Object)">
            <summary>
            Writes a protocol-buffer representation of the given instance to the supplied stream.
            </summary>
            <param name="instance">The existing instance to be serialized (cannot be null).</param>
            <param name="dest">The destination stream to write to.</param>
        </member>
        <member name="M:ProtoBuf.Serializer.NonGeneric.Deserialize(System.Type,System.IO.Stream)">
            <summary>
            Creates a new instance from a protocol-buffer stream
            </summary>
            <param name="type">The type to be created.</param>
            <param name="source">The binary stream to apply to the new instance (cannot be null).</param>
            <returns>A new, initialized instance.</returns>
        </member>
        <member name="M:ProtoBuf.Serializer.NonGeneric.SerializeWithLengthPrefix(System.IO.Stream,System.Object,ProtoBuf.PrefixStyle,System.Int32)">
            <summary>
            Writes a protocol-buffer representation of the given instance to the supplied stream,
            with a length-prefix. This is useful for socket programming,
            as DeserializeWithLengthPrefix/MergeWithLengthPrefix can be used to read the single object back
            from an ongoing stream.
            </summary>
            <param name="instance">The existing instance to be serialized (cannot be null).</param>
            <param name="style">How to encode the length prefix.</param>
            <param name="destination">The destination stream to write to.</param>
            <param name="fieldNumber">The tag used as a prefix to each record (only used with base-128 style prefixes).</param>
        </member>
        <member name="M:ProtoBuf.Serializer.NonGeneric.TryDeserializeWithLengthPrefix(System.IO.Stream,ProtoBuf.PrefixStyle,ProtoBuf.Serializer.TypeResolver,System.Object@)">
            <summary>
            Applies a protocol-buffer stream to an existing instance (or null), using length-prefixed
            data - useful with network IO.
            </summary>
            <param name="value">The existing instance to be modified (can be null).</param>
            <param name="source">The binary stream to apply to the instance (cannot be null).</param>
            <param name="style">How to encode the length prefix.</param>
            <param name="resolver">Used to resolve types on a per-field basis.</param>
            <returns>The updated instance; this may be different to the instance argument if
            either the original instance was null, or the stream defines a known sub-type of the
            original instance.</returns>
        </member>
        <member name="M:ProtoBuf.Serializer.NonGeneric.CanSerialize(System.Type)">
            <summary>
            Indicates whether the supplied type is explicitly modelled by the model
            </summary>
        </member>
        <member name="T:ProtoBuf.Serializer.TypeResolver">
            <summary>
            Maps a field-number to a type
            </summary>
        </member>
        <member name="T:ProtoBuf.ExtensibleUtil">
            <summary>
            This class acts as an internal wrapper allowing us to do a dynamic
            methodinfo invoke; an't put into Serializer as don't want on public
            API; can't put into Serializer&lt;T&gt; since we need to invoke
            accross classes, which isn't allowed in Silverlight)
            </summary>
        </member>
        <member name="M:ProtoBuf.ExtensibleUtil.GetExtendedValues``1(ProtoBuf.IExtensible,System.Int32,ProtoBuf.DataFormat,System.Boolean,System.Boolean)">
            <summary>
            All this does is call GetExtendedValuesTyped with the correct type for "instance";
            this ensures that we don't get issues with subclasses declaring conflicting types -
            the caller must respect the fields defined for the type they pass in.
            </summary>
        </member>
        <member name="M:ProtoBuf.ExtensibleUtil.GetExtendedValuesTyped``2(``0,System.Int32,ProtoBuf.DataFormat,System.Boolean,System.Boolean)">
            <summary>
            Reads the given value(s) from the instance's stream; the serializer
            is inferred from TValue and format. For singletons, each occurrence
            is merged [only applies for sub-objects], and the composed
            value if yielded once; otherwise ("repeated") each occurrence
            is yielded separately.
            </summary>
            <remarks>Needs to be public to be callable thru reflection in Silverlight</remarks>
        </member>
        <member name="M:ProtoBuf.ExtensibleUtil.AppendExtendValueTyped``2(ProtoBuf.Meta.TypeModel,``0,System.Int32,ProtoBuf.DataFormat,``1)">
            <summary>
            Stores the given value into the instance's stream; the serializer
            is inferred from TValue and format.
            </summary>
            <remarks>Needs to be public to be callable thru reflection in Silverlight</remarks>
        </member>
        <member name="T:Mtime.Community.Utility.zxing.qrcode.encoder.EncoderInternal">
            <author>  satorux@google.com (Satoru Takabayashi) - creator
            </author>
            <author>  dswitkin@google.com (Daniel Switkin) - ported from C++
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="M:Mtime.Community.Utility.zxing.qrcode.encoder.EncoderInternal.encode(System.String,Mtime.Community.Utility.zxing.qrcode.decoder.ErrorCorrectionLevelInternal,Mtime.Community.Utility.zxing.qrcode.encoder.QRCodeInternal)">
            <summary>  Encode "bytes" with the error correction level "m_EcLevelInternal". The encoding mode will be chosen
            internally by chooseMode(). On success, store the result in "QRCodeInternal".
            
            We recommend you to use QRCodeInternal.EC_LEVEL_L (the lowest level) for
            "getECLevel" since our primary use is to show QR code on desktop screens. We don't need very
            strong error correction for this purpose.
            
            Note that there is no way to encode bytes in MODE_KANJI. We might want to add EncodeWithMode()
            with which clients can specify the encoding mode. For now, we don't need the functionality.
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.zxing.qrcode.encoder.EncoderInternal.getAlphanumericCode(System.Int32)">
            <returns> the code point of the table used in alphanumeric mode or
            -1 if there is no corresponding code in the table.
            </returns>
        </member>
        <member name="M:Mtime.Community.Utility.zxing.qrcode.encoder.EncoderInternal.chooseMode(System.String,System.String)">
            <summary> Choose the best mode by examining the content. Note that 'encoding' is used as a hint;
            if it is Shift_JIS, and the input is only double-byte Kanji, then we return {@link Mode#KANJI}.
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.zxing.qrcode.encoder.EncoderInternal.initQRCode(System.Int32,Mtime.Community.Utility.zxing.qrcode.decoder.ErrorCorrectionLevelInternal,Mtime.Community.Utility.zxing.qrcode.decoder.Mode,Mtime.Community.Utility.zxing.qrcode.encoder.QRCodeInternal)">
            <summary> Initialize "QRCodeInternal" according to "numInputBytes", "m_EcLevelInternal", and "mode". On success,
            modify "QRCodeInternal".
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.zxing.qrcode.encoder.EncoderInternal.terminateBits(System.Int32,Mtime.Community.Utility.zxing.qrcode.encoder.BitVector)">
            <summary> Terminate bits as described in 8.4.8 and 8.4.9 of JISX0510:2004 (p.24).</summary>
        </member>
        <member name="M:Mtime.Community.Utility.zxing.qrcode.encoder.EncoderInternal.getNumDataBytesAndNumECBytesForBlockID(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32[],System.Int32[])">
            <summary> Get number of data bytes and number of error correction bytes for block id "blockID". Store
            the result in "numDataBytesInBlock", and "numECBytesInBlock". See table 12 in 8.5.1 of
            JISX0510:2004 (p.30)
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.zxing.qrcode.encoder.EncoderInternal.interleaveWithECBytes(Mtime.Community.Utility.zxing.qrcode.encoder.BitVector,System.Int32,System.Int32,System.Int32,Mtime.Community.Utility.zxing.qrcode.encoder.BitVector)">
            <summary> Interleave "bits" with corresponding error correction bytes. On success, store the result in
            "result". The interleave rule is complicated. See 8.6 of JISX0510:2004 (p.37) for details.
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.zxing.qrcode.encoder.EncoderInternal.appendModeInfo(Mtime.Community.Utility.zxing.qrcode.decoder.Mode,Mtime.Community.Utility.zxing.qrcode.encoder.BitVector)">
            <summary> Append mode info. On success, store the result in "bits".</summary>
        </member>
        <member name="M:Mtime.Community.Utility.zxing.qrcode.encoder.EncoderInternal.appendLengthInfo(System.Int32,System.Int32,Mtime.Community.Utility.zxing.qrcode.decoder.Mode,Mtime.Community.Utility.zxing.qrcode.encoder.BitVector)">
            <summary> Append length info. On success, store the result in "bits".</summary>
        </member>
        <member name="M:Mtime.Community.Utility.zxing.qrcode.encoder.EncoderInternal.appendBytes(System.String,Mtime.Community.Utility.zxing.qrcode.decoder.Mode,Mtime.Community.Utility.zxing.qrcode.encoder.BitVector,System.String)">
            <summary> Append "bytes" in "mode" mode (encoding) into "bits". On success, store the result in "bits".</summary>
        </member>
        <member name="T:Mtime.Community.Utility.zxing.WriterException">
            <summary> A base class which covers the range of exceptions which may occur when encoding a barcode using
            the Writer framework.
            
            </summary>
            <author>  dswitkin@google.com (Daniel Switkin)
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="T:Mtime.Community.Utility.Client.INodeLocator">
            <summary>
            Defines a locator class whihc maps item keys to memcached servers.
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.Client.INodeLocator.Initialize(System.Collections.Generic.IList{Mtime.Community.Utility.Net.SocketPool})">
            <summary>
            Initializes the locator.
            </summary>
            <param name="nodes">The memcached nodes defined in the configuration.</param>
        </member>
        <member name="M:Mtime.Community.Utility.Client.INodeLocator.Locate(System.String)">
            <summary>
            Returns the memcached node the specified key belongs to.
            </summary>
            <param name="key">The key of the item to be located.</param>
            <returns>The <see cref="T:MemcachedNode"/> the specifed item belongs to</returns>
        </member>
        <member name="T:Mtime.Service.Messaging.JsonMessageFormatter">
            <summary>
            Json消息格式化器
            </summary>
        </member>
        <member name="P:Mtime.Service.Messaging.JsonMessageFormatter.TargetType">
            <summary>
            目标数据类型
            </summary>
        </member>
        <member name="F:GifUtility.LZWEncoder.MaxStackSize">
            <summary>
            GIF规定编码最大为12bit，最大值即为4096
            </summary>
        </member>
        <member name="P:GifUtility.DataStruct.BlockSize">
            <summary>
            块大小
            </summary>
        </member>
        <member name="M:Mtime.MongoDB.MongoCommand.Delete(Mtime.MongoDB.Document)">
            <summary>
            删除文档
            </summary>
            <param name="selector"></param>
        </member>
        <member name="M:Mtime.MongoDB.MongoCommand.Delete(Mtime.MongoDB.Document,System.Boolean)">
            <summary>
            删除文档
            </summary>
            <param name="selector"></param>
            <param name="atomic">如果为true，则删除操作为原子操作(will block other operations)</param>
        </member>
        <member name="M:Mtime.MongoDB.MongoCommand.Insert(Mtime.MongoDB.Document[])">
            <summary>
            插入文档
            </summary>
            <param name="docs"></param>
        </member>
        <member name="M:Mtime.MongoDB.MongoCommand.Insert(System.Collections.Generic.IEnumerable{Mtime.MongoDB.Document})">
            <summary>
            插入文档
            </summary>
            <param name="docs"></param>
        </member>
        <member name="M:Mtime.MongoDB.MongoCommand.UpdateOrInsert(Mtime.MongoDB.Document,Mtime.MongoDB.Document)">
            <summary>
            更新或插入文档
            </summary>
            <param name="doc"></param>
        </member>
        <member name="M:Mtime.MongoDB.MongoCommand.UpdateOne(Mtime.MongoDB.Document,Mtime.MongoDB.Document)">
            <summary>
            仅更新一条记录
            </summary>
            <param name="doc"></param>
            <param name="selector"></param>
        </member>
        <member name="M:Mtime.MongoDB.MongoCommand.UpdateAll(Mtime.MongoDB.Document,Mtime.MongoDB.Document)">
            <summary>
            更新所有记录
            </summary>
            <param name="doc"></param>
            <param name="selector"></param>
        </member>
        <member name="M:Mtime.MongoDB.MongoCommand.SelectCount(Mtime.MongoDB.Document)">
            <summary>
            查询记录数
            </summary>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.MongoDB.MongoCommand.SelectOne(Mtime.MongoDB.Document,Mtime.MongoDB.ReturnFieldsBuilder)">
            <summary>
            查询一条记录
            </summary>
            <param name="selector"></param>
            <param name="returnFields"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.MongoDB.MongoCommand.Select(Mtime.MongoDB.Document,Mtime.MongoDB.ReturnFieldsBuilder,System.Int32,System.Int32)">
            <summary>
            查询多条记录
            </summary>
            <param name="selector"></param>
            <param name="returnFields"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.MongoDB.MongoCommand.SelectReader(Mtime.MongoDB.Document,Mtime.MongoDB.ReturnFieldsBuilder)">
            <summary>
            注意：IMongoReader必须Dispose
            </summary>
            <param name="selector"></param>
            <param name="returnFields"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.MongoDB.MongoCommand.Distinct``1(System.String,Mtime.MongoDB.Document)">
            <summary>
            
            </summary>
            <param name="key">distinct列名</param>
            <param name="selector">查询条件，可选</param>
            <returns></returns>
        </member>
        <member name="M:Mtime.MongoDB.MongoCommand.Group(Mtime.MongoDB.Document,Mtime.MongoDB.Document,Mtime.MongoDB.Document,System.String)">
            <summary>
            
            </summary>
            <param name="key">{ a: true, b: true }</param>
            <param name="selector"></param>
            <param name="initial">初始值</param>
            <param name="reduce"></param>
            <returns></returns>
        </member>
        <member name="P:Mtime.MongoDB.Communication.ConnectionString.Lifetime">
            <summary>
            生存时间（秒）
            </summary>
        </member>
        <member name="P:Mtime.MongoDB.Communication.ConnectionString.Timeout">
            <summary>
            超时时间（秒）
            </summary>
        </member>
        <member name="M:Mtime.MongoDB.ReturnFieldsBuilder.AddSlice(System.String,System.Int32)">
            <summary>
            获取数组的一部分数据
            </summary>
            <param name="fieldName">字段名</param>
            <param name="count">返回数量，大于0表示从头部开始，小于0表示从尾部开始</param>
            <returns></returns>
        </member>
        <member name="M:Mtime.MongoDB.ReturnFieldsBuilder.AddSlice(System.String,System.Int32,System.Int32)">
            <summary>
            获取数组的一部分数据
            </summary>
            <param name="fieldName">字段名</param>
            <param name="skip">跳过记录数，大于0表示从头部开始，小于0表示从尾部开始</param>
            <param name="count">返回数量</param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Caching.AspCachingService.RemoveByPattern(System.String,System.Boolean)">
            <summary>
            返回需要被Memcached移除的缓存key
            </summary>
            <param name="keyPattern"></param>
            <returns></returns>
        </member>
        <member name="P:Mtime.Community.Utility.BaiduVideoXML.BaiduVideoXML.BaiduVideoXMLItems">
            <summary>
            记录的集合
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream">
            <summary>
            A special stream deflating or compressing the bytes that are
            written to it.  It uses a Deflater to perform actual deflating.<br/>
            Authors of the original java version : Tom Tromey, Jochen Hoenicke 
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.#ctor(System.IO.Stream)">
            <summary>
            Creates a new DeflaterOutputStream with a default Deflater and default buffer size.
            </summary>
            <param name="baseOutputStream">
            the output stream where deflated output should be written.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.#ctor(System.IO.Stream,ICSharpCode.SharpZipLib.Zip.Compression.Deflater)">
            <summary>
            Creates a new DeflaterOutputStream with the given Deflater and
            default buffer size.
            </summary>
            <param name="baseOutputStream">
            the output stream where deflated output should be written.
            </param>
            <param name="deflater">
            the underlying deflater.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.#ctor(System.IO.Stream,ICSharpCode.SharpZipLib.Zip.Compression.Deflater,System.Int32)">
            <summary>
            Creates a new DeflaterOutputStream with the given Deflater and
            buffer size.
            </summary>
            <param name="baseOutputStream">
            The output stream where deflated output is written.
            </param>
            <param name="deflater">
            The underlying deflater to use
            </param>
            <param name="bufferSize">
            The buffer size to use when deflating
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            bufsize is less than or equal to zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            baseOutputStream does not support writing
            </exception>
            <exception cref="T:System.ArgumentNullException">
            deflater instance is null
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Finish">
            <summary>
            Finishes the stream by calling finish() on the deflater. 
            </summary>
            <exception cref="T:ICSharpCode.SharpZipLib.SharpZipBaseException">
            Not all input is deflated
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.EncryptByte">
            <summary>
            Encrypt a single byte 
            </summary>
            <returns>
            The encrypted value
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.EncryptBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Encrypt a block of data
            </summary>
            <param name="buffer">
            Data to encrypt.  NOTE the original contents of the buffer are lost
            </param>
            <param name="offset">
            Offset of first byte in buffer to encrypt
            </param>
            <param name="length">
            Number of bytes in buffer to encrypt
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.InitializePassword(System.String)">
            <summary>
            Initializes encryption keys based on given password
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.UpdateKeys(System.Byte)">
            <summary>
            Update encryption keys 
            </summary>		
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Deflate">
            <summary>
            Deflates everything in the input buffers.  This will call
            <code>def.deflate()</code> until all bytes from the input buffers
            are processed.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the current position of this stream to the given value. Not supported by this class!
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.SetLength(System.Int64)">
            <summary>
            Sets the length of this stream to the given value. Not supported by this class!
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.ReadByte">
            <summary>
            Read a byte from stream advancing position by one
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read a block of bytes from stream
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronous reads are not supported a NotSupportedException is always thrown
            </summary>
            <param name="buffer">The buffer to read into.</param>
            <param name="offset">The offset to start storing data at.</param>
            <param name="count">The number of bytes to read</param>
            <param name="callback">The async callback to use.</param>
            <param name="state">The state to use.</param>
            <returns>Returns an <see cref="T:System.IAsyncResult"/></returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronous writes arent supported, a NotSupportedException is always thrown
            </summary>
            <param name="buffer">The buffer to write.</param>
            <param name="offset">The offset to begin writing at.</param>
            <param name="count">The number of bytes to write.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> to use.</param>
            <param name="state">The state object.</param>
            <returns>Returns an IAsyncResult.</returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Flush">
            <summary>
            Flushes the stream by calling flush() on the deflater and then
            on the underlying stream.  This ensures that all bytes are
            flushed.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Close">
            <summary>
            Calls <see cref="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Finish"/> and closes the underlying
            stream when <see cref="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.IsStreamOwner"></see> is true.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.WriteByte(System.Byte)">
            <summary>
            Writes a single byte to the compressed output stream.
            </summary>
            <param name="value">
            The byte value.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes bytes from an array to the compressed stream.
            </summary>
            <param name="buffer">
            The byte array
            </param>
            <param name="offset">
            The offset into the byte array where to start.
            </param>
            <param name="count">
            The number of bytes to write.
            </param>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.buffer_">
            <summary>
            This buffer is used temporarily to retrieve the bytes from the
            deflater and write them to the underlying output stream.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.def">
            <summary>
            The deflater which is used to deflate the stream.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.baseOutputStream">
            <summary>
            Base stream the deflater depends on.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.IsStreamOwner">
            <summary>
            Get/set flag indicating ownership of the underlying stream.
            When the flag is true <see cref="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Close"></see> will close the underlying stream also.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.CanPatchEntries">
            <summary>
            Allows client to determine if an entry can be patched after its added
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Password">
            <summary>
            Get/set the password used for encryption.
            </summary>
            <remarks>When set to null or if the password is empty no encryption is performed</remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.CanRead">
            <summary>
            Gets value indicating stream can be read from
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.CanSeek">
            <summary>
            Gets a value indicating if seeking is supported for this stream
            This property always returns false
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.CanWrite">
            <summary>
            Get value indicating if this stream supports writing
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Length">
            <summary>
            Get current length of stream
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Position">
            <summary>
            Gets the current position within the stream.
            </summary>
            <exception cref="T:System.NotSupportedException">Any attempt to set position</exception>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman">
            <summary>
            This is the DeflaterHuffman class.
            
            This class is <i>not</i> thread safe.  This is inherent in the API, due
            to the split of Deflate and SetInput.
            
            author of the original java version : Jochen Hoenicke
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.pending">
            <summary>
            Pending buffer to use
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.#ctor(ICSharpCode.SharpZipLib.Zip.Compression.DeflaterPending)">
            <summary>
            Construct instance with pending buffer
            </summary>
            <param name="pending">Pending buffer to use</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Reset">
            <summary>
            Reset internal state
            </summary>		
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.SendAllTrees(System.Int32)">
            <summary>
            Write all trees to pending buffer
            </summary>		
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.CompressBlock">
            <summary>
            Compress current buffer writing data to pending buffer
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.FlushStoredBlock(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Flush block to output with no compression
            </summary>
            <param name="stored">Data to write</param>
            <param name="storedOffset">Index of first byte to write</param>
            <param name="storedLength">Count of bytes to write</param>
            <param name="lastBlock">True if this is the last block</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.FlushBlock(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Flush block to output with compression
            </summary>		
            <param name="stored">Data to flush</param>
            <param name="storedOffset">Index of first byte to flush</param>
            <param name="storedLength">Count of bytes to flush</param>
            <param name="lastBlock">True if this is the last block</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.IsFull">
            <summary>
            Get value indicating if internal buffer is full
            </summary>
            <returns>true if buffer is full</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.TallyLit(System.Int32)">
            <summary>
            Add literal to buffer
            </summary>
            <param name="literal">Literal value to add to buffer.</param>
            <returns>Value indicating internal buffer is full</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.TallyDist(System.Int32,System.Int32)">
            <summary>
            Add distance code and length to literal and distance trees
            </summary>
            <param name="distance">Distance code</param>
            <param name="length">Length</param>
            <returns>Value indicating if internal buffer is full</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.BitReverse(System.Int32)">
            <summary>
            Reverse the bits of a 16 bit value.
            </summary>
            <param name="toReverse">Value to reverse bits</param>
            <returns>Value with bits reversed</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.Reset">
            <summary>
            Resets the internal state of the tree
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.CheckEmpty">
            <summary>
            Check that all frequencies are zero
            </summary>
            <exception cref="T:ICSharpCode.SharpZipLib.SharpZipBaseException">
            At least one frequency is non-zero
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.SetStaticCodes(System.Int16[],System.Byte[])">
            <summary>
            Set static codes and length
            </summary>
            <param name="staticCodes">new codes</param>
            <param name="staticLengths">length for new codes</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.BuildCodes">
            <summary>
            Build dynamic codes and lengths
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.GetEncodedLength">
            <summary>
            Get encoded length
            </summary>
            <returns>Encoded length, the sum of frequencies * lengths</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.CalcBLFreq(ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree)">
            <summary>
            Scan a literal or distance tree to determine the frequencies of the codes
            in the bit length tree.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.WriteTree(ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree)">
            <summary>
            Write tree values
            </summary>
            <param name="blTree">Tree to write</param>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Tar.TarEntry">
            <summary>
            This class represents an entry in a Tar archive. It consists
            of the entry's header, as well as the entry's File. Entries
            can be instantiated in one of three ways, depending on how
            they are to be used.
            <p>
            TarEntries that are created from the header bytes read from
            an archive are instantiated with the TarEntry( byte[] )
            constructor. These entries will be used when extracting from
            or listing the contents of an archive. These entries have their
            header filled in using the header bytes. They also set the File
            to null, since they reference an archive entry not a file.</p>
            <p>
            TarEntries that are created from files that are to be written
            into an archive are instantiated with the CreateEntryFromFile(string)
            pseudo constructor. These entries have their header filled in using
            the File's information. They also keep a reference to the File
            for convenience when writing entries.</p>
            <p>
            Finally, TarEntries can be constructed from nothing but a name.
            This allows the programmer to construct the entry by hand, for
            instance when only an InputStream is available for writing to
            the archive, and the header information is constructed from
            other information. In this case the header fields are set to
            defaults and the File is set to null.</p>
            <see cref="P:ICSharpCode.SharpZipLib.Tar.TarEntry.TarHeader"/>
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarEntry.#ctor">
            <summary>
            Initialise a default instance of <see cref="T:ICSharpCode.SharpZipLib.Tar.TarEntry"/>.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarEntry.#ctor(System.Byte[])">
            <summary>
            Construct an entry from an archive's header bytes. File is set
            to null.
            </summary>
            <param name = "headerBuffer">
            The header bytes from a tar archive entry.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarEntry.#ctor(ICSharpCode.SharpZipLib.Tar.TarHeader)">
            <summary>
            Construct a TarEntry using the <paramref name="header">header</paramref> provided
            </summary>
            <param name="header">Header details for entry</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarEntry.Clone">
            <summary>
            Clone this tar entry.
            </summary>
            <returns>Returns a clone of this entry.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarEntry.CreateTarEntry(System.String)">
            <summary>
            Construct an entry with only a <paramref name="name">name</paramref>.
            This allows the programmer to construct the entry's header "by hand". 
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarEntry.CreateEntryFromFile(System.String)">
            <summary>
            Construct an entry for a file. File is set to file, and the
            header is constructed from information from the file.
            </summary>
            <param name = "fileName">
            The file that the entry represents.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarEntry.Equals(System.Object)">
            <summary>
            Determine if the two entries are equal. Equality is determined
            by the header names being equal.
            </summary>
            <returns>
            True if the entries are equal.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarEntry.GetHashCode">
            <summary>
            Must be overridden when you override Equals.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarEntry.IsDescendent(ICSharpCode.SharpZipLib.Tar.TarEntry)">
            <summary>
            Determine if the given entry is a descendant of this entry.
            Descendancy is determined by the name of the descendant
            starting with this entry's name.
            </summary>
            <param name = "toTest">
            Entry to be checked as a descendent of this.
            </param>
            <returns>
            True if entry is a descendant of this.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarEntry.SetIds(System.Int32,System.Int32)">
            <summary>
            Convenience method to set this entry's group and user ids.
            </summary>
            <param name="userId">
            This entry's new user id.
            </param>
            <param name="groupId">
            This entry's new group id.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarEntry.SetNames(System.String,System.String)">
            <summary>
            Convenience method to set this entry's group and user names.
            </summary>
            <param name="userName">
            This entry's new user name.
            </param>
            <param name="groupName">
            This entry's new group name.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarEntry.GetFileTarHeader(ICSharpCode.SharpZipLib.Tar.TarHeader,System.String,System.String)">
            <summary>
            Fill in a TarHeader with information from a File.
            </summary>
            <param name="header">
            The TarHeader to fill in.
            </param>
            <param name="file">
            The file from which to get the header information.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarEntry.GetDirectoryEntries">
            <summary>
            Get entries for all files present in this entries directory.
            If this entry doesnt represent a directory zero entries are returned.
            </summary>
            <returns>
            An array of TarEntry's for this entry's children.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarEntry.WriteEntryHeader(System.Byte[])">
            <summary>
            Write an entry's header information to a header buffer.
            </summary>
            <param name = "outBuffer">
            The tar entry header buffer to fill in.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarEntry.AdjustEntryName(System.Byte[],System.String)">
            <summary>
            Convenience method that will modify an entry's name directly
            in place in an entry header buffer byte array.
            </summary>
            <param name="buffer">
            The buffer containing the entry header to modify.
            </param>
            <param name="newName">
            The new name to place into the header buffer.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarEntry.NameTarHeader(ICSharpCode.SharpZipLib.Tar.TarHeader,System.String)">
            <summary>
            Fill in a TarHeader given only the entry's name.
            </summary>
            <param name="header">
            The TarHeader to fill in.
            </param>
            <param name="name">
            The tar entry name.
            </param>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarEntry.file">
            <summary>
            The name of the file this entry represents or null if the entry is not based on a file.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarEntry.header">
            <summary>
            The entry's header information.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarEntry.TarHeader">
            <summary>
            Get this entry's header.
            </summary>
            <returns>
            This entry's TarHeader.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarEntry.Name">
            <summary>
            Get/Set this entry's name.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarEntry.UserId">
            <summary>
            Get/set this entry's user id.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarEntry.GroupId">
            <summary>
            Get/set this entry's group id.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarEntry.UserName">
            <summary>
            Get/set this entry's user name.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarEntry.GroupName">
            <summary>
            Get/set this entry's group name.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarEntry.ModTime">
            <summary>
            Get/Set the modification time for this entry
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarEntry.File">
            <summary>
            Get this entry's file.
            </summary>
            <returns>
            This entry's file.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarEntry.Size">
            <summary>
            Get/set this entry's recorded file size.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarEntry.IsDirectory">
            <summary>
            Return true if this entry represents a directory, false otherwise
            </summary>
            <returns>
            True if this entry is a directory.
            </returns>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.GZip.GZipInputStream">
            <summary>
            This filter stream is used to decompress a "GZIP" format stream.
            The "GZIP" format is described baseInputStream RFC 1952.
            
            author of the original java version : John Leuner
            </summary>
            <example> This sample shows how to unzip a gzipped file
            <code>
            using System;
            using System.IO;
            
            using ICSharpCode.SharpZipLib.Core;
            using ICSharpCode.SharpZipLib.GZip;
            
            class MainClass
            {
            	public static void Main(string[] args)
            	{
            		using (Stream inStream = new GZipInputStream(File.OpenRead(args[0])))
            		using (FileStream outStream = File.Create(Path.GetFileNameWithoutExtension(args[0]))) {
            			byte[] buffer = new byte[4096];
            			StreamUtils.Copy(inStream, outStream, buffer);
            		}
            	}
            }	
            </code>
            </example>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.GZipInputStream.crc">
            <summary>
            CRC-32 value for uncompressed data
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.GZipInputStream.eos">
            <summary>
            Indicates end of stream
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.GZipInputStream.#ctor(System.IO.Stream)">
            <summary>
            Creates a GzipInputStream with the default buffer size
            </summary>
            <param name="baseInputStream">
            The stream to read compressed data from (baseInputStream GZIP format)
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.GZipInputStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Creates a GZIPInputStream with the specified buffer size
            </summary>
            <param name="baseInputStream">
            The stream to read compressed data from (baseInputStream GZIP format)
            </param>
            <param name="size">
            Size of the buffer to use
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.GZipInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads uncompressed data into an array of bytes
            </summary>
            <param name="buffer">
            The buffer to read uncompressed data into
            </param>
            <param name="offset">
            The offset indicating where the data should be placed
            </param>
            <param name="count">
            The number of uncompressed bytes to be read
            </param>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Checksums.Adler32">
            <summary>
            Computes Adler32 checksum for a stream of data. An Adler32
            checksum is not as reliable as a CRC32 checksum, but a lot faster to
            compute.
            
            The specification for Adler32 may be found in RFC 1950.
            ZLIB Compressed Data Format Specification version 3.3)
            
            
            From that document:
            
                 "ADLER32 (Adler-32 checksum)
                  This contains a checksum value of the uncompressed data
                  (excluding any dictionary data) computed according to Adler-32
                  algorithm. This algorithm is a 32-bit extension and improvement
                  of the Fletcher algorithm, used in the ITU-T X.224 / ISO 8073
                  standard.
            
                  Adler-32 is composed of two sums accumulated per byte: s1 is
                  the sum of all bytes, s2 is the sum of all s1 values. Both sums
                  are done modulo 65521. s1 is initialized to 1, s2 to zero.  The
                  Adler-32 checksum is stored as s2*65536 + s1 in most-
                  significant-byte first (network) order."
            
             "8.2. The Adler-32 algorithm
            
               The Adler-32 algorithm is much faster than the CRC32 algorithm yet
               still provides an extremely low probability of undetected errors.
            
               The modulo on unsigned long accumulators can be delayed for 5552
               bytes, so the modulo operation time is negligible.  If the bytes
               are a, b, c, the second sum is 3a + 2b + c + 3, and so is position
               and order sensitive, unlike the first sum, which is just a
               checksum.  That 65521 is prime is important to avoid a possible
               large class of two-byte errors that leave the check unchanged.
               (The Fletcher checksum uses 255, which is not prime and which also
               makes the Fletcher check insensitive to single byte changes 0 -
               255.)
            
               The sum s1 is initialized to 1 instead of zero to make the length
               of the sequence part of s2, so that the length does not have to be
               checked separately. (Any sequence of zeroes has a Fletcher
               checksum of zero.)"
            </summary>
            <see cref="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream"/>
            <see cref="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream"/>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Checksums.IChecksum">
            <summary>
            Interface to compute a data checksum used by checked input/output streams.
            A data checksum can be updated by one byte or with a byte array. After each
            update the value of the current checksum can be returned by calling
            <code>getValue</code>. The complete checksum object can also be reset
            so it can be used again with new data.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.IChecksum.Reset">
            <summary>
            Resets the data checksum as if no update was ever called.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.IChecksum.Update(System.Int32)">
            <summary>
            Adds one byte to the data checksum.
            </summary>
            <param name = "value">
            the data value to add. The high byte of the int is ignored.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.IChecksum.Update(System.Byte[])">
            <summary>
            Updates the data checksum with the bytes taken from the array.
            </summary>
            <param name="buffer">
            buffer an array of bytes
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.IChecksum.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Adds the byte array to the data checksum.
            </summary>
            <param name = "buffer">
            The buffer which contains the data
            </param>
            <param name = "offset">
            The offset in the buffer where the data starts
            </param>
            <param name = "count">
            the number of data bytes to add.
            </param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Checksums.IChecksum.Value">
            <summary>
            Returns the data checksum computed so far.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Checksums.Adler32.BASE">
            <summary>
            largest prime smaller than 65536
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Adler32.#ctor">
            <summary>
            Creates a new instance of the Adler32 class.
            The checksum starts off with a value of 1.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Adler32.Reset">
            <summary>
            Resets the Adler32 checksum to the initial value.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Adler32.Update(System.Int32)">
            <summary>
            Updates the checksum with a byte value.
            </summary>
            <param name="value">
            The data value to add. The high byte of the int is ignored.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Adler32.Update(System.Byte[])">
            <summary>
            Updates the checksum with an array of bytes.
            </summary>
            <param name="buffer">
            The source of the data to update with.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Adler32.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Updates the checksum with the bytes taken from the array.
            </summary>
            <param name="buffer">
            an array of bytes
            </param>
            <param name="offset">
            the start of the data used for this update
            </param>
            <param name="count">
            the number of bytes to use for this update
            </param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Checksums.Adler32.Value">
            <summary>
            Returns the Adler32 data checksum computed so far.
            </summary>
        </member>
        <member name="M:CookComputing.XmlRpc.XmlRpcProxyGen.GetMethods(System.Type)">
            <summary>
            Type.GetMethods() does not return methods that a derived interface
            inherits from its base interfaces; this method does.
            </summary>
        </member>
        <member name="T:Mtime.Community.Utility.URLRewriter.Config.RewriterRule">
            <summary>
            URL重写规则类
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.URLRewriter.Config.RewriterRule.LookFor">
            <summary>
            定义了的URL模式
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.URLRewriter.Config.RewriterRule.SendTo">
            <summary>
            要转到的URL
            </summary>
        </member>
        <member name="T:Rss.RssChannelCollection">
            <summary>A strongly typed collection of <see cref="T:Rss.RssChannel"/> objects</summary>
        </member>
        <member name="M:Rss.RssChannelCollection.Add(Rss.RssChannel)">
            <summary>Adds a specified channel to this collection.</summary>
            <param name="channel">The channel to add.</param>
            <returns>The zero-based index of the added channel.</returns>
        </member>
        <member name="M:Rss.RssChannelCollection.Contains(Rss.RssChannel)">
            <summary>Determines whether the RssChannelCollection contains a specific element.</summary>
            <param name="rssChannel">The RssChannel to locate in the RssChannelCollection.</param>
            <returns>true if the RssChannelCollection contains the specified value; otherwise, false.</returns>
        </member>
        <member name="M:Rss.RssChannelCollection.CopyTo(Rss.RssChannel[],System.Int32)">
            <summary>Copies the entire RssChannelCollection to a compatible one-dimensional <see cref="T:System.Array"/>, starting at the specified index of the target array.</summary>
            <param name="array">The one-dimensional RssChannel Array that is the destination of the elements copied from RssChannelCollection. The Array must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">array is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero.</exception>
            <exception cref="T:System.ArgumentException">array is multidimensional. -or- index is equal to or greater than the length of array.-or-The number of elements in the source RssChannelCollection is greater than the available space from index to the end of the destination array.</exception>
        </member>
        <member name="M:Rss.RssChannelCollection.IndexOf(Rss.RssChannel)">
            <summary>Searches for the specified RssChannel and returns the zero-based index of the first occurrence within the entire RssChannelCollection.</summary>
            <param name="rssChannel">The RssChannel to locate in the RssChannelCollection.</param>
            <returns>The zero-based index of the first occurrence of RssChannel within the entire RssChannelCollection, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Rss.RssChannelCollection.Insert(System.Int32,Rss.RssChannel)">
            <summary>Inserts a channel into this collection at a specified index.</summary>
            <param name="index">The zero-based index of the collection at which to insert the channel.</param>
            <param name="channel">The channel to insert into this collection.</param>
        </member>
        <member name="M:Rss.RssChannelCollection.Remove(Rss.RssChannel)">
            <summary>Removes a specified channel from this collection.</summary>
            <param name="channel">The channel to remove.</param>
        </member>
        <member name="P:Rss.RssChannelCollection.Item(System.Int32)">
            <summary>Gets or sets the channel at a specified index.<para>In C#, this property is the indexer for the class.</para></summary>
            <param name="index">The index of the collection to access.</param>
            <value>A channel at each valid index.</value>
            <remarks>This method is an indexer that can be used to access the collection.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index.</exception>
        </member>
        <member name="T:Mtime.Community.Utility.ResourceManager.BlogResourceManager">
            <summary>
            博客资源
            </summary>
        </member>
        <member name="T:Mtime.Community.Utility.ResourceManager.BaofengResourceManager">
            <summary>
            Baofeng资源
            </summary>
        </member>
        <member name="T:ProtoBuf.ProtoWriter">
            <summary>
            Represents an output stream for writing protobuf data.
            
            Why is the API backwards (static methods with writer arguments)?
            See: http://marcgravell.blogspot.com/2010/03/last-will-be-first-and-first-will-be.html
            </summary>
        </member>
        <member name="M:ProtoBuf.ProtoWriter.WriteObject(System.Object,System.Int32,ProtoBuf.ProtoWriter)">
            <summary>
            Write an encapsulated sub-object, using the supplied unique key (reprasenting a type).
            </summary>
            <param name="value">The object to write.</param>
            <param name="key">The key that uniquely identifies the type within the model.</param>
            <param name="writer">The destination.</param>
        </member>
        <member name="M:ProtoBuf.ProtoWriter.WriteRecursionSafeObject(System.Object,System.Int32,ProtoBuf.ProtoWriter)">
            <summary>
            Write an encapsulated sub-object, using the supplied unique key (reprasenting a type) - but the
            caller is asserting that this relationship is non-recursive; no recursion check will be
            performed.
            </summary>
            <param name="value">The object to write.</param>
            <param name="key">The key that uniquely identifies the type within the model.</param>
            <param name="writer">The destination.</param>
        </member>
        <member name="M:ProtoBuf.ProtoWriter.WriteFieldHeader(System.Int32,ProtoBuf.WireType,ProtoBuf.ProtoWriter)">
            <summary>
            Writes a field-header, indicating the format of the next data we plan to write.
            </summary>
        </member>
        <member name="M:ProtoBuf.ProtoWriter.WriteBytes(System.Byte[],ProtoBuf.ProtoWriter)">
            <summary>
            Writes a byte-array to the stream; supported wire-types: String
            </summary>
        </member>
        <member name="M:ProtoBuf.ProtoWriter.WriteBytes(System.Byte[],System.Int32,System.Int32,ProtoBuf.ProtoWriter)">
            <summary>
            Writes a byte-array to the stream; supported wire-types: String
            </summary>
        </member>
        <member name="M:ProtoBuf.ProtoWriter.StartSubItem(System.Object,ProtoBuf.ProtoWriter)">
            <summary>
            Indicates the start of a nested record.
            </summary>
            <param name="instance">The instance to write.</param>
            <param name="writer">The destination.</param>
            <returns>A token representing the state of the stream; this token is given to EndSubItem.</returns>
        </member>
        <member name="M:ProtoBuf.ProtoWriter.EndSubItem(ProtoBuf.SubItemToken,ProtoBuf.ProtoWriter)">
            <summary>
            Indicates the end of a nested record.
            </summary>
            <param name="token">The token obtained from StartubItem.</param>
            <param name="writer">The destination.</param>
        </member>
        <member name="M:ProtoBuf.ProtoWriter.#ctor(System.IO.Stream,ProtoBuf.Meta.TypeModel)">
            <summary>
            Creates a new writer against a stream
            </summary>
            <param name="dest">The destination stream</param>
            <param name="model">The model to use for serialization; this can be null, but this will impair the ability to serialize sub-objects</param>
        </member>
        <member name="M:ProtoBuf.ProtoWriter.Close">
            <summary>
            Flushes data to the underlying stream, and releases any resources. The underlying stream is *not* disposed
            by this operation.
            </summary>
        </member>
        <member name="M:ProtoBuf.ProtoWriter.Flush(ProtoBuf.ProtoWriter)">
            <summary>
            Writes any buffered data (if possible) to the underlying stream.
            </summary>
            <param name="writer">The writer to flush</param>
            <remarks>It is not always possible to fully flush, since some sequences
            may require values to be back-filled into the byte-stream.</remarks>
        </member>
        <member name="M:ProtoBuf.ProtoWriter.WriteUInt32Variant(System.UInt32,ProtoBuf.ProtoWriter)">
            <summary>
            Writes an unsigned 32-bit integer to the stream; supported wire-types: Variant, Fixed32, Fixed64
            </summary>
        </member>
        <member name="M:ProtoBuf.ProtoWriter.WriteString(System.String,ProtoBuf.ProtoWriter)">
            <summary>
            Writes a string to the stream; supported wire-types: String
            </summary>
        </member>
        <member name="M:ProtoBuf.ProtoWriter.WriteUInt64(System.UInt64,ProtoBuf.ProtoWriter)">
            <summary>
            Writes an unsigned 64-bit integer to the stream; supported wire-types: Variant, Fixed32, Fixed64
            </summary>
        </member>
        <member name="M:ProtoBuf.ProtoWriter.WriteInt64(System.Int64,ProtoBuf.ProtoWriter)">
            <summary>
            Writes a signed 64-bit integer to the stream; supported wire-types: Variant, Fixed32, Fixed64, SignedVariant
            </summary>
        </member>
        <member name="M:ProtoBuf.ProtoWriter.WriteUInt32(System.UInt32,ProtoBuf.ProtoWriter)">
            <summary>
            Writes an unsigned 16-bit integer to the stream; supported wire-types: Variant, Fixed32, Fixed64
            </summary>
        </member>
        <member name="M:ProtoBuf.ProtoWriter.WriteInt16(System.Int16,ProtoBuf.ProtoWriter)">
            <summary>
            Writes a signed 16-bit integer to the stream; supported wire-types: Variant, Fixed32, Fixed64, SignedVariant
            </summary>
        </member>
        <member name="M:ProtoBuf.ProtoWriter.WriteUInt16(System.UInt16,ProtoBuf.ProtoWriter)">
            <summary>
            Writes an unsigned 16-bit integer to the stream; supported wire-types: Variant, Fixed32, Fixed64
            </summary>
        </member>
        <member name="M:ProtoBuf.ProtoWriter.WriteByte(System.Byte,ProtoBuf.ProtoWriter)">
            <summary>
            Writes an unsigned 8-bit integer to the stream; supported wire-types: Variant, Fixed32, Fixed64
            </summary>
        </member>
        <member name="M:ProtoBuf.ProtoWriter.WriteSByte(System.SByte,ProtoBuf.ProtoWriter)">
            <summary>
            Writes a signed 8-bit integer to the stream; supported wire-types: Variant, Fixed32, Fixed64, SignedVariant
            </summary>
        </member>
        <member name="M:ProtoBuf.ProtoWriter.WriteInt32(System.Int32,ProtoBuf.ProtoWriter)">
            <summary>
            Writes a signed 32-bit integer to the stream; supported wire-types: Variant, Fixed32, Fixed64, SignedVariant
            </summary>
        </member>
        <member name="M:ProtoBuf.ProtoWriter.WriteDouble(System.Double,ProtoBuf.ProtoWriter)">
            <summary>
            Writes a double-precision number to the stream; supported wire-types: Fixed32, Fixed64
            </summary>
        </member>
        <member name="M:ProtoBuf.ProtoWriter.WriteSingle(System.Single,ProtoBuf.ProtoWriter)">
            <summary>
            Writes a single-precision number to the stream; supported wire-types: Fixed32, Fixed64
            </summary>
        </member>
        <member name="M:ProtoBuf.ProtoWriter.ThrowEnumException(ProtoBuf.ProtoWriter,System.Object)">
            <summary>
            Throws an exception indicating that the given enum cannot be mapped to a serialized value.
            </summary>
        </member>
        <member name="M:ProtoBuf.ProtoWriter.WriteBoolean(System.Boolean,ProtoBuf.ProtoWriter)">
            <summary>
            Writes a boolean to the stream; supported wire-types: Variant, Fixed32, Fixed64
            </summary>
        </member>
        <member name="M:ProtoBuf.ProtoWriter.AppendExtensionData(ProtoBuf.IExtensible,ProtoBuf.ProtoWriter)">
            <summary>
            Copies any extension data stored for the instance to the underlying stream
            </summary>
        </member>
        <member name="M:ProtoBuf.ProtoWriter.SetPackedField(System.Int32,ProtoBuf.ProtoWriter)">
            <summary>
            Used for packed encoding; indicates that the next field should be skipped rather than
            a field header written. Note that the field number must match, else an exception is thrown
            when the attempt is made to write the (incorrect) field. The wire-type is taken from the
            subsequent call to WriteFieldHeader. Only primitive types can be packed.
            </summary>
        </member>
        <member name="M:ProtoBuf.ProtoWriter.SetRootObject(System.Object)">
            <summary>
            Specifies a known root object to use during reference-tracked serialization
            </summary>
        </member>
        <member name="T:Mtime.Community.Utility.zxing.common.CharacterSetECI">
            <summary> Encapsulates a Character Set ECI, according to "Extended Channel Interpretations" 5.3.1.1
            of ISO 18004.
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="T:Mtime.Community.Utility.zxing.common.ECI">
            <summary> Superclass of classes encapsulating types ECIs, according to "Extended Channel Interpretations"
            5.3 of ISO 18004.
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="M:Mtime.Community.Utility.zxing.common.ECI.getECIByValue(System.Int32)">
            <param name="value">ECI value
            </param>
            <returns> {@link ECI} representing ECI of given value, or null if it is legal but unsupported
            </returns>
            <throws>  IllegalArgumentException if ECI value is invalid </throws>
        </member>
        <member name="M:Mtime.Community.Utility.zxing.common.CharacterSetECI.getCharacterSetECIByValue(System.Int32)">
            <param name="value">character set ECI value
            </param>
            <returns> {@link CharacterSetECI} representing ECI of given value, or null if it is legal but
            unsupported
            </returns>
            <throws>  IllegalArgumentException if ECI value is invalid </throws>
        </member>
        <member name="M:Mtime.Community.Utility.zxing.common.CharacterSetECI.getCharacterSetECIByName(System.String)">
            <param name="name">character set ECI encoding name
            </param>
            <returns> {@link CharacterSetECI} representing ECI for character encoding, or null if it is legal
            but unsupported
            </returns>
        </member>
        <member name="T:Mtime.Community.Utility.OAuth.Parameter">
            <summary>
            微博API参数
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.OAuth.Parameter.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.OAuth.Parameter.#ctor(System.String,System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="name">key</param>
            <param name="value">value</param>
        </member>
        <member name="P:Mtime.Community.Utility.OAuth.Parameter.Name">
            <summary>
            参数名称
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.OAuth.Parameter.Value">
            <summary>
            参数值
            </summary>
        </member>
        <member name="T:Mtime.Community.Utility.Net.SocketServer.SocketContext">
            <summary>
            The base class of socketContext
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.Net.SocketServer.SocketContext.Charset">
            <summary>
            Gets or sets the charset.
            </summary>
            <value>The charset.</value>
        </member>
        <member name="P:Mtime.Community.Utility.Net.SocketServer.AsyncSocketSession.LastActiveTime">
            <summary>
            Gets the last active time of the session.
            </summary>
            <value>The last active time.</value>
        </member>
        <member name="T:Mtime.IO.AutoShrinkBufferStream2">
            <summary>
            自动收缩的对分段Buffer进行操作的流
            </summary>
        </member>
        <member name="F:Mtime.IO.AutoShrinkBufferStream2._Current">
            <summary>
            当前读取缓冲区位置
            </summary>
        </member>
        <member name="M:Mtime.IO.AutoShrinkBufferStream2.Reset">
            <summary>
            重置流的所有属性和字段
            </summary>
        </member>
        <member name="M:Mtime.IO.AutoShrinkBufferStream2.GetWriteBuffer">
            <summary>
            获取写入Buffer
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mtime.IO.AutoShrinkBufferStream2.GetReadBuffer">
            <summary>
            获取读取Buffer
            </summary>
            <returns></returns>
        </member>
        <member name="P:Mtime.IO.AutoShrinkBufferStream2.Buffers">
            <summary>
            获取内部缓冲区列表(非线程安全)
            </summary>
        </member>
        <member name="P:Mtime.IO.AutoShrinkBufferStream2.CanRead">
            <summary>
            是否支持读取
            </summary>
        </member>
        <member name="P:Mtime.IO.AutoShrinkBufferStream2.CanSeek">
            <summary>
            是否支持查找
            </summary>
        </member>
        <member name="P:Mtime.IO.AutoShrinkBufferStream2.CanWrite">
            <summary>
            是否支持写入
            </summary>
        </member>
        <member name="P:Mtime.IO.AutoShrinkBufferStream2.Length">
            <summary>
            数据长度
            </summary>
        </member>
        <member name="P:Mtime.IO.AutoShrinkBufferStream2.Position">
            <summary>
            当前位置
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.Net.SocketPool.SetSocketKeepAliveValues(System.Int32,System.Int32)">
            <summary>
            Using IOControl code to configue socket KeepAliveValues for line disconnection detection(because default is toooo slow) 
            </summary>
            <param name="tcpc">TcpClient</param>
            <param name="KeepAliveTime">The keep alive time. (ms)</param>
            <param name="KeepAliveInterval">The keep alive interval. (ms)</param>
        </member>
        <member name="M:Mtime.Community.Utility.Net.PooledSocket.Send(System.IO.MemoryStream)">
            <summary>
            Writes an array of bytes to the socket and flushes the stream.
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.Net.PooledSocket.GetResponse">
            <summary>
            该流不能关闭或者Dispose
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Net.PooledSocket.Reset">
            <summary>
            Resets this PooledSocket by making sure the incoming buffer of the socket is empty.
            If there was any leftover data, this method return true.
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.Net.PooledSocket.Read(System.Byte[])">
            <summary>
            Fills the given byte array with data from the socket.
            </summary>
        </member>
        <member name="T:Mtime.Community.Utility.StringUtility">
            <summary>
            字符串处理类
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.StringUtility.GetSubString(System.String,System.Int32)">
            <summary>
            取得前n位长度的字串
            </summary>
            <param name="theString">需要处理的字符串</param>
            <param name="count">需要的字符串长度</param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.StringUtility.GetSubString(System.String,System.Int32,System.String)">
            <summary>
            取得前n位长度的字串加后缀字符串
            </summary>
            <param name="theString">需要处理的字符串</param>
            <param name="count">需要的字符串长度</param>
            <param name="addition">后缀字符串</param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.StringUtility.GetEnglishNameFromUrl(System.String)">
            <summary>
            根据URL参数取得英文名
            </summary>
            <param name="queryString">URL参数</param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.StringUtility.GetUrlFromEnglishName(System.String)">
            <summary>
            根据英文名取得用于URL的字符串
            </summary>
            <param name="englishName">英文名</param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.StringUtility.ParagraphFormat(System.String,System.String,System.String)">
            <summary>
            段落格式化
            </summary>
            <param name="context">正文</param>
            <param name="paragraphClass">段落样式Class</param>
            <param name="paragraphStyle">段落样式</param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.StringUtility.GetBase64StringFromString(System.Object)">
            <summary>
            取得整型的Base64字符串
            </summary>
            <param name="o">整型对象</param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.StringUtility.GetStringFromBase64String(System.String)">
            <summary>
            取得Base64字符串的整型
            </summary>
            <param name="s">字符串</param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.StringUtility.ShowHighlightKeyword(System.String,System.String)">
            <summary>
            返回高亮(红色)显示关键字的内容文本
            </summary>
            <param name="keyword">关键字文本</param>
            <param name="content">内容文本</param>
            <returns>高亮后的文本</returns>
        </member>
        <member name="M:Mtime.Community.Utility.StringUtility.SafeInt(System.String)">
            <summary>
            获取安全的整形数，默认值为0
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.StringUtility.SafeInt(System.String,System.Int32)">
            <summary>
            获取安全的整形数
            </summary>
            <param name="text"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.StringUtility.StringCompare(System.String,System.String)">
            <summary>
            字符串比较
            </summary>
            <param name="strA"></param>
            <param name="strB"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.StringUtility.GetSafeHtmlText(System.String)">
            <summary>
            获取安全的HTML内容文本
            此方法将过滤掉可能造成不安全因素的HTML标记
            By Marila
            </summary>
            <param name="content">HTML内容文本</param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.StringUtility.GetCleanStringFromHtml(System.String)">
            <summary>
            获取符合格式的HTML
            </summary>
            <param name="inputHtml"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.StringUtility.GetCleanStringFromHtml(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            获取符合格式的HTML
            </summary>
            <param name="inputHtml"></param>
            <param name="allowedTags">允许的标记集合</param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.StringUtility.GetWordCountFromHtml(System.String)">
            <summary>
            统计字数（忽略HTML标记）
            </summary>
            <param name="inputHtml"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.StringUtility.GetCleanText(System.String)">
            <summary>
            去掉标记字符串
            </summary>
            <param name="inputString"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.StringUtility.GetFormattedSubString(System.String,System.Int32)">
            <summary>
            忽略标记得到字符串（需整理）
            </summary>
            <param name="formattedBody"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.StringUtility.GetFormattedString(System.String,System.Int32)">
            <summary>
            得到包含标记的子字符串（需整理）
            </summary>
            <param name="formattedBody"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.StringUtility.GetFixupImageWidthHtml(System.String,System.Int32)">
            <summary>
            返回已经固定图片宽度的HTML
            </summary>
            <param name="html">HTML</param>
            <param name="maxImageWidth">最大宽度</param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.StringUtility.CleanInputString(System.String)">
            <summary>
            针对用户输入的数据进行整理
            </summary>
            <param name="inputString"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.StringUtility.CheckedString(System.String)">
            <summary>
            替换BR
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.StringUtility.Encode(System.String)">
            <summary>
            实体编码
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.StringUtility.Chtml(System.String)">
            <summary>
            HTML转换
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.StringUtility.Cemotion(System.String)">
            <summary>
            表情转换
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.StringUtility.Cubb(System.String,System.Boolean)">
            <summary>
            UBB转换
            </summary>
            <param name="content"></param>
            <param name="isconvertemotion">指定是否转换表情</param>
            <returns></returns>
        </member>
        <member name="T:Mtime.Community.Utility.Json.FastJSON.JsonParser">
            <summary>
            This class encodes and decodes JSON strings.
            Spec. details, see http://www.json.org/
            
            JSON uses Arrays and Objects. These correspond here to the datatypes ArrayList and Hashtable.
            All numbers are parsed to doubles.
            </summary>
        </member>
        <member name="M:NGif.GifEncoder.SetDispose(System.Int32)">
            Sets the GIF frame disposal code for the last added frame
            and any subsequent frames.  Default is 0 if no transparent
            color has been set, otherwise 2.
            @param code int disposal code.
        </member>
        <member name="M:NGif.GifEncoder.SetRepeat(System.Int32)">
             Sets the number of times the set of GIF frames
             should be played.  Default is 1; 0 means play
             indefinitely.  Must be invoked before the first
             image is added.
            
             @param iter int number of iterations.
             @return
        </member>
        <member name="M:NGif.GifEncoder.SetTransparent(System.Drawing.Color)">
             Sets the transparent color for the last added frame
             and any subsequent frames.
             Since all colors are subject to modification
             in the quantization process, the color in the final
             palette for each frame closest to the given color
             becomes the transparent color for that frame.
             May be set to null to indicate no transparent color.
            
             @param c Color to be treated as transparent on display.
        </member>
        <member name="M:NGif.GifEncoder.SetFrameRate(System.Single)">
             Sets frame rate in frames per second.  Equivalent to
             <code>setDelay(1000/fps)</code>.
            
             @param fps float frame rate (frames per second)
        </member>
        <member name="M:NGif.GifEncoder.SetQuality(System.Int32)">
             Sets quality of color quantization (conversion of images
             to the maximum 256 colors allowed by the GIF specification).
             Lower values (minimum = 1) produce better colors, but slow
             processing significantly.  10 is the default, and produces
             good color mapping at reasonable speeds.  Values greater
             than 20 do not yield significant improvements in speed.
            
             @param quality int greater than 0.
             @return
        </member>
        <member name="M:NGif.GifEncoder.SetSize(System.Int32,System.Int32)">
             Sets the GIF frame size.  The default size is the
             size of the first frame added if this method is
             not invoked.
            
             @param w int frame width.
             @param h int frame width.
        </member>
        <member name="M:NGif.GifEncoder.WriteLSD">
            Writes Logical Screen Descriptor
        </member>
        <member name="M:NGif.GifEncoder.WritePalette">
            Writes color table
        </member>
        <member name="M:NGif.GifEncoder.WriteNetscapeExt">
            Writes Netscape application extension to define
            repeat count.
        </member>
        <member name="M:NGif.GifEncoder.WriteImageDesc">
            Writes Image Descriptor
        </member>
        <member name="T:GifUtility.PlainTextEx">
            <summary>
            形文本扩展(Plain Text Extension)这一部分是可选的（需要89a版本），
            用来绘制一个简单的文本图象，这一部分由用来绘制的纯文本数据（7-bit ASCII字符）
            和控制绘制的参数等组成。绘制文本借助于一个文本框（Text Grid）来定义边界，在文
            本框中划分多个单元格，每个字符占用一个单元，绘制时按从左到右、从上到下的顺序
            依次进行，直到最后一个字符或者占满整个文本框（之后的字符将被忽略，因此定义文
            本框的大小时应该注意到是否可以容纳整个文本），绘制文本的颜色使用全局颜色列表，
            没有则可以使用一个已经保存的前一个颜色列表。另外，图形文本扩展块也属于图形块
            (Graphic Rendering Block)，可以在它前面定义图形控制扩展对它的表现形式进一步修改。
            </summary>
        </member>
        <member name="F:GifUtility.PlainTextEx.BlockSize">
            <summary>
            Block Size - 块大小，固定值12
            </summary>
        </member>
        <member name="F:GifUtility.PlainTextEx.XOffSet">
            <summary>
            Text Glid Left Posotion - 像素值，文本框离逻辑屏幕的左边界距
            </summary>
        </member>
        <member name="F:GifUtility.PlainTextEx.YOffSet">
            <summary>
            Text Glid Top Posotion - 像素值，文本框离逻辑屏幕的上边界距离
            </summary>
        </member>
        <member name="F:GifUtility.PlainTextEx.Width">
            <summary>
            文本框高度 Text Glid Width -像素值
            </summary>
        </member>
        <member name="F:GifUtility.PlainTextEx.Height">
            <summary>
            文本框高度 Text Glid Height - 像素值
            </summary>
        </member>
        <member name="F:GifUtility.PlainTextEx.CharacterCellWidth">
            <summary>
            字符单元格宽度 Character Cell Width - 像素值，单个单元格宽度
            </summary>
        </member>
        <member name="F:GifUtility.PlainTextEx.CharacterCellHeight">
            <summary>
            字符单元格高度 Character Cell Height- 像素值，单个单元格高度
            </summary>
        </member>
        <member name="F:GifUtility.PlainTextEx.ForegroundColorIndex">
            <summary>
            文本前景色索引 Text Foreground Color Index - 前景色在全局颜色列表中的索引
            </summary>
        </member>
        <member name="F:GifUtility.PlainTextEx.BgColorIndex">
            <summary>
            文本背景色索引 Text Blackground Color Index - 背景色在全局颜色列表中的索引
            </summary>
        </member>
        <member name="F:GifUtility.PlainTextEx.TextDatas">
            <summary>
            文本数据块集合Plain Text Data - 一个或多个数据块(Data Sub-Blocks)组成，保存要在显示的字符串。
            </summary>
        </member>
        <member name="T:GifUtility.GifExtensions">
            <summary>
            扩展块中的一些常量
            </summary>
        </member>
        <member name="F:GifUtility.GifExtensions.ExtensionIntroducer">
            <summary>
            Extension Introducer - 标识这是一个扩展块，固定值0x21
            </summary>          
        </member>
        <member name="F:GifUtility.GifExtensions.Terminator">
            <summary>
            lock Terminator - 标识注释块结束，固定值0
            </summary>
        </member>
        <member name="F:GifUtility.GifExtensions.ApplicationExtensionLabel">
            <summary>
            Application Extension Label - 标识这是一个应用程序扩展块，固定值0xFF 
            </summary>
        </member>
        <member name="F:GifUtility.GifExtensions.CommentLabel">
            <summary>
            Comment Label - 标识这是一个注释块，固定值0xFE
            </summary>
        </member>
        <member name="F:GifUtility.GifExtensions.ImageDescriptorLabel">
            <summary>
            图象标识符开始，固定值为','
            </summary>
        </member>
        <member name="F:GifUtility.GifExtensions.PlainTextLabel">
            <summary>
            Plain Text Label - 标识这是一个图形文本扩展块，固定值0x01
            </summary>
        </member>
        <member name="F:GifUtility.GifExtensions.GraphicControlLabel">
            <summary>
            Graphic Control Label - 标识这是一个图形控制扩展块，固定值0xF9
            </summary>
        </member>
        <member name="F:GifUtility.GifExtensions.ImageLabel">
            <summary>
            图像的标示
            </summary>
        </member>
        <member name="F:GifUtility.GifExtensions.EndIntroducer">
            <summary>
            文件结尾
            </summary>
        </member>
        <member name="T:GifUtility.GifEncoder">
            <summary>
            Gif编码器GifEncoder
            </summary>
        </member>
        <member name="M:GifUtility.GifEncoder.GetImagePixels(System.Drawing.Bitmap,System.Byte[],System.Int32)">
            Extracts image pixels into byte array "pixels"
        </member>
        <member name="T:GifUtility.CommentEx">
            <summary>
            注释扩展(Comment Extension)
            这一部分是可选的（需要89a版本），可以用来记录图形、版权、描述等任何的非图形和控制
            的纯文本数据(7-bit ASCII字符)，注释扩展并不影响对图象数据流的处理，解码器完全可以忽
            略它。存放位置可以是数据流的任何地方，最好不要妨碍控制和数据块，推荐放在数据流的开始或结尾
            </summary>
        </member>
        <member name="F:GifUtility.CommentEx.CommentDatas">
            <summary>
            Comment Data - 一个或多个数据块组成
            </summary>
        </member>
        <member name="T:Mtime.Community.Utility.Helper.StringBuilderEx">
            <summary>
            a More effective and efficient string building class
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.Helper.StringBuilderEx._storedString">
            <summary>
            The internal private copy of the string
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.Helper.StringBuilderEx.lngAllocated">
            <summary>
            The number of allocated characters
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.Helper.StringBuilderEx.lngUsed">
            <summary>
            The number of used characters
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.Helper.StringBuilderEx.lngAllocSize">
            <summary>
            Number of characters to allocated with an increase
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.StringBuilderEx.#ctor">
            <summary>
            The default constructor for the class
            </summary>
            <remarks>Sets the allocation size to 1000</remarks>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.StringBuilderEx.#ctor(System.String)">
            <summary>
            The constructor used to set the initial value of the string
            </summary>
            <remarks>Sets the allocation size to 1000</remarks>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.StringBuilderEx.#ctor(System.Int32)">
            <summary>
            Constructor used to define a custom allocation size
            </summary>
            <param name="AllocationSize">The size of every allocation</param>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.StringBuilderEx.#ctor(System.String,System.Int32)">
            <summary>
            The constructor used to set the initial value of the string
            </summary>
            <param name="InitialValue">The initial value of the string</param>
            <param name="AllocationSize">The size of every allocation</param>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.StringBuilderEx.Append(System.String)">
            <summary>
            Append a string to the internal string
            </summary>
            <param name="StringToAppend">The string to be appended</param>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.StringBuilderEx.Overwrite(System.String)">
            <summary>
            Overwrite the string with the specified string
            </summary>
            <param name="StringToWrite">The new string value of the string</param>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.StringBuilderEx.ToString">
            <summary>
            Get the string
            </summary>
            <returns>The string that has been built</returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.StringBuilderEx.Clear">
            <summary>
            Clear the string from memory
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.StringBuilderEx.ResizeArray(System.Array,System.Int32)">
            <summary>
            Resize the internal array
            </summary>
            <param name="oldArray">The old array to resize</param>
            <param name="newSize">The new size of the expanded array</param>
            <returns>a New bigger array with all the contents of the old array</returns>
        </member>
        <member name="P:Mtime.Community.Utility.Helper.StringBuilderEx.Length">
            <summary>
            Get the length of the string
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.HtmlHelper2011.OutlineFirstCharOfText(System.String,System.String)">
            <summary>
            突出显示内容首字符
            </summary>
            <param name="html"></param>
            <param name="outlineRelaceFormat">首字符替换样式，例如：&lt;span class="first_letter" &gt;{0}&lt;/span&gt;</param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.HtmlHelper2011.#ctor(System.String)">
            <summary>
            Filters unknown markup. Will not encode exceptions
            </summary>
            <param name="html">Markup to filter</param>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.HtmlHelper2011.#ctor(System.String,System.Boolean)">
            <summary>
            Filters unknown markup
            </summary>
            <param name="html">Markup to filter</param>
            <param name="encodeRuleExceptions">Should unknown elements be encoded or removed?</param>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.HtmlHelper2011.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Filters unknown markup
            </summary>
            <param name="html">Markup to filter</param>
            <param name="encodeRuleExceptions">Should unknown elements be encoded or removed?</param>
            <param name="removeScripts">Check for javascript: attributes</param>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.HtmlHelper2011.Clean">
            <summary>
            Returns the results of a cleaning.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.HtmlHelper2011.OutlineFirstCharOfText(System.String)">
            <summary>
            突出显示内容首字符
            </summary>
            <param name="outlineRelaceFormat">首字符替换样式，例如：&lt;span class="first_letter" &gt;{0}&lt;/span&gt;</param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.HtmlHelper2011.Format">
            <summary>
            Walks one time through the HTML. All elements/tags are validated.
            The rest of the text is simply added to the internal queue
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.HtmlHelper2011.Validate(System.String)">
            <summary>
            Main method for starting element validation
            </summary>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.HtmlHelper2011.ValidateSingleTag(System.String)">
            <summary>
            Validates single element tags such as <br /> and <hr class = "X" />
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.HtmlHelper2011.ValidateStartTag(System.String)">
            <summary>
            Validates a start tag
            </summary>
            <param name="tag"></param>
            <returns>the tag and validate attributes</returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.HtmlHelper2011.ValidateAttributes(System.Collections.Generic.Dictionary{System.String,Mtime.Community.Components.Constants.v3.IHtmlAttributeValueValidator},System.String,System.String,System.String)">
            <summary>
            Validates the elements attribute collection
            </summary>
            <param name="diction"></param>
            <param name="tagAttributes"></param>
            <param name="tagName"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.HtmlHelper2011.ValidateEndTag(System.String)">
            <summary>
            Validate End/Closing tag
            </summary>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="F:Mtime.EPay.PayEase.PayEaseNotifyStatus.Doing">
            <summary>
            处理中
            </summary>
        </member>
        <member name="F:Mtime.EPay.PayEase.PayEaseNotifyStatus.Finish">
            <summary>
            完成
            </summary>
        </member>
        <member name="F:Mtime.EPay.PayEase.PayEaseNotifyStatus.Refuse">
            <summary>
            拒绝
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.Memcached.Protocol.StatsOperation.StatItem.Uptime">
            <summary>
            The number of seconds the server has been running.
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.Memcached.Protocol.StatsOperation.StatItem.ServerTime">
            <summary>
            Current time according to the server.
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.Memcached.Protocol.StatsOperation.StatItem.Version">
            <summary>
            The version of the server.
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.Memcached.Protocol.StatsOperation.StatItem.ItemCount">
            <summary>
            The number of items stored by the server.
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.Memcached.Protocol.StatsOperation.StatItem.TotalItems">
            <summary>
            The total number of items stored by the server including the ones whihc have been already evicted.
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.Memcached.Protocol.StatsOperation.StatItem.ConnectionCount">
            <summary>
            Number of active connections to the server.
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.Memcached.Protocol.StatsOperation.StatItem.TotalConnections">
            <summary>
            The total number of connections ever made to the server.
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.Memcached.Protocol.StatsOperation.StatItem.ConnectionStructures">
            <summary>
            ?
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.Memcached.Protocol.StatsOperation.StatItem.GetCount">
            <summary>
            Number of get operations performed by the server.
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.Memcached.Protocol.StatsOperation.StatItem.SetCount">
            <summary>
            Number of set operations performed by the server.
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.Memcached.Protocol.StatsOperation.StatItem.GetHits">
            <summary>
            Cache hit.
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.Memcached.Protocol.StatsOperation.StatItem.GetMisses">
            <summary>
            Cache miss.
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.Memcached.Protocol.StatsOperation.StatItem.UsedBytes">
            <summary>
            ?
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.Memcached.Protocol.StatsOperation.StatItem.BytesRead">
            <summary>
            Number of bytes read from the server.
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.Memcached.Protocol.StatsOperation.StatItem.BytesWritten">
            <summary>
            Number of bytes written to the server.
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.Memcached.Protocol.StatsOperation.StatItem.MaxBytes">
            <summary>
            ?
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.Memcached.Protocol.StatsOperation.ServerStats.All">
            <summary>
            Defines a value which indicates that the statstics should be retrieved for all servers in the pool.
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.Memcached.Protocol.StatsOperation.ServerStats.GetValue(System.String,Mtime.Community.Utility.Memcached.Protocol.StatsOperation.StatItem)">
            <summary>
            Gets a stat value for the specified server.
            </summary>
            <param name="server">The adress of the server. If <see cref="F:System.Net.IPAddress.Any"/> is specified it will return the sum of all server stat values.</param>
            <param name="item">The stat to be returned</param>
            <returns>The value of the specified stat item</returns>
        </member>
        <member name="M:Mtime.Community.Utility.Memcached.Protocol.StatsOperation.ServerStats.GetVersion(System.String)">
            <summary>
            Returns the server of memcached running on the specified server.
            </summary>
            <param name="server">The adress of the server</param>
            <returns>The version of memcached</returns>
        </member>
        <member name="M:Mtime.Community.Utility.Memcached.Protocol.StatsOperation.ServerStats.GetUptime(System.String)">
            <summary>
            Returns the uptime of the specific server.
            </summary>
            <param name="server">The adress of the server</param>
            <returns>A value indicating how long the server is running</returns>
        </member>
        <member name="M:Mtime.Community.Utility.Memcached.Protocol.StatsOperation.ServerStats.GetRaw(System.String,System.String)">
            <summary>
            Returns the stat value for a specific server. The value is not converted but returned as the server returned it.
            </summary>
            <param name="server">The adress of the server</param>
            <param name="key">The name of the stat value</param>
            <returns>The value of the stat item</returns>
        </member>
        <member name="M:Mtime.Community.Utility.Memcached.Protocol.StatsOperation.ServerStats.GetRaw(System.String,Mtime.Community.Utility.Memcached.Protocol.StatsOperation.StatItem)">
            <summary>
            Returns the stat value for a specific server. The value is not converted but returned as the server returned it.
            </summary>
            <param name="server">The adress of the server</param>
            <param name="item">The stat value to be returned</param>
            <returns>The value of the stat item</returns>
        </member>
        <member name="M:Mtime.MongoDB.Communication.ConnectionPool.GetConnection">
            <summary>
            从连接池中获取连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mtime.MongoDB.Communication.ConnectionPool.GetInternalConnection">
            <summary>
            从连接池中获取连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mtime.MongoDB.Communication.ConnectionPool.CloseConnection(Mtime.MongoDB.Communication.ConnectionSocket,System.Boolean)">
            <summary>
            把连接放回到连接池中
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:Mtime.MongoDB.Communication.ConnectionPool.Clear">
            <summary>
            清理过期连接
            </summary>
        </member>
        <member name="M:Mtime.MongoDB.Communication.ConnectionPool.SafeLog(System.String)">
            <summary>
            记录日志
            </summary>
            <param name="msg"></param>
        </member>
        <member name="T:Mtime.MongoDB.Bson.Oid">
            <summary>
            Oid is an immutable object that represents a Mongo ObjectId.
            </summary>
        </member>
        <member name="M:Mtime.MongoDB.Bson.Oid.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mtime.MongoDB.Bson.Oid"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Mtime.MongoDB.Bson.Oid.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Mtime.MongoDB.Bson.Oid"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Mtime.MongoDB.Bson.Oid.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Mtime.MongoDB.Bson.Oid.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Mtime.MongoDB.Bson.Oid.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Mtime.MongoDB.Bson.Oid.ToByteArray">
            <summary>
            Converts the Oid to a byte array. 
            </summary>
        </member>
        <member name="M:Mtime.MongoDB.Bson.Oid.NewOid">
            <summary>
            Generates an Oid using OidGenerator. 
            </summary>
            <returns>
            A <see cref="T:Mtime.MongoDB.Bson.Oid"/>
            </returns>
        </member>
        <member name="M:Mtime.MongoDB.Bson.Oid.ValidateHex(System.String)">
            <summary>
            Validates the hex.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Mtime.MongoDB.Bson.Oid.DecodeHex(System.String)">
            <summary>
            Decodes the hex.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="P:Mtime.MongoDB.Bson.Oid.Created">
            <summary>
            Gets the created.
            </summary>
            <value>The created.</value>
        </member>
        <member name="M:Mtime.MongoDB.Bson.OidGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mtime.MongoDB.Bson.OidGenerator"/> class.
            </summary>
        </member>
        <member name="M:Mtime.MongoDB.Bson.OidGenerator.Generate">
            <summary>
            Generates this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mtime.MongoDB.Bson.OidGenerator.GenerateTime">
            <summary>
            Generates the time.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mtime.MongoDB.Bson.OidGenerator.GenerateInc">
            <summary>
            Generates the inc.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mtime.MongoDB.Bson.OidGenerator.GenerateConstants">
            <summary>
            Generates the constants.
            </summary>
        </member>
        <member name="M:Mtime.MongoDB.Bson.OidGenerator.GenerateHostHash">
            <summary>
            Generates the host hash.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mtime.MongoDB.Bson.OidGenerator.GenerateProcId">
            <summary>
            Generates the proc id.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mtime.MongoDB.Bson.MongoMinKey">
            <summary>
            Class representing the MinKey Bson type.  It will always compare lower than any other type.
            </summary>
        </member>
        <member name="M:Mtime.MongoDB.Bson.MongoMinKey.#cctor">
            <summary>
            Initializes the <see cref="T:Mtime.MongoDB.Bson.MongoMinKey"/> class.
            </summary>
        </member>
        <member name="M:Mtime.MongoDB.Bson.MongoMinKey.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mtime.MongoDB.Bson.MongoMinKey"/> class.
            </summary>
        </member>
        <member name="M:Mtime.MongoDB.Bson.MongoMinKey.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Mtime.MongoDB.Bson.MongoMinKey.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:Mtime.Community.Utility.Caching.ListDataCache`2">
            <summary>
            列表数据缓存类
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.Caching.ListDataCache`2.#ctor(System.Boolean,System.String,System.Boolean,System.Int32,System.Boolean,System.Int32)">
            <summary>
            列表数据缓存
            </summary>
            <param name="isReturnNullItems">返回的列表中是否包含为Null项</param>
            <param name="keyPrefix">缓存前缀，一般为项的名称，如：TweetInfo</param>
            <param name="enableInnerCache">是否允许一级缓存（进程内）</param>
            <param name="innerCacheMinute">一级缓存时间</param>
            <param name="enableOuterCache">是否允许二级缓存（Redis）</param>
            <param name="outerCacheMinute">二级缓存时间</param>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ZipOutputStream">
             <summary>
             This is a DeflaterOutputStream that writes the files into a zip
             archive one after another.  It has a special method to start a new
             zip entry.  The zip entries contains information about the file name
             size, compressed size, CRC, etc.
             
             It includes support for Stored and Deflated entries.
             This class is not thread safe.
             <br/>
             <br/>Author of the original java version : Jochen Hoenicke
             </summary>
             <example> This sample shows how to create a zip file
             <code>
             using System;
             using System.IO;
             
             using ICSharpCode.SharpZipLib.Core;
             using ICSharpCode.SharpZipLib.Zip;
             
             class MainClass
             {
             	public static void Main(string[] args)
             	{
             		string[] filenames = Directory.GetFiles(args[0]);
             		byte[] buffer = new byte[4096];
             		
             		using ( ZipOutputStream s = new ZipOutputStream(File.Create(args[1])) ) {
             		
             			s.SetLevel(9); // 0 - store only to 9 - means best compression
             		
             			foreach (string file in filenames) {
             				ZipEntry entry = new ZipEntry(file);
             				s.PutNextEntry(entry);
            
             				using (FileStream fs = File.OpenRead(file)) {
            						StreamUtils.Copy(fs, s, buffer);
             				}
             			}
             		}
             	}
             }	
             </code>
             </example>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.size">
            <summary>
            Used to track the size of data for an entry during writing.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.offset">
            <summary>
            Offset to be recorded for each entry in the central header.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.#ctor(System.IO.Stream)">
            <summary>
            Creates a new Zip output stream, writing a zip archive.
            </summary>
            <param name="baseOutputStream">
            The output stream to which the archive contents are written.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.SetComment(System.String)">
            <summary>
            Set the zip file comment.
            </summary>
            <param name="comment">
            The comment string
            </param>
            <exception name ="ArgumentOutOfRangeException">
            Encoding of comment is longer than 0xffff bytes.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.SetLevel(System.Int32)">
            <summary>
            Sets default compression level.  The new level will be activated
            immediately.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Level specified is not supported.
            </exception>
            <see cref="T:ICSharpCode.SharpZipLib.Zip.Compression.Deflater"/>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.GetLevel">
            <summary>
            Get the current deflate compression level
            </summary>
            <returns>The current compression level</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.WriteLeShort(System.Int32)">
            <summary>
            Write an unsigned short in little endian byte order.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.WriteLeInt(System.Int32)">
            <summary>
            Write an int in little endian byte order.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.WriteLeLong(System.Int64)">
            <summary>
            Write an int in little endian byte order.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.PutNextEntry(ICSharpCode.SharpZipLib.Zip.ZipEntry)">
            <summary>
            Starts a new Zip entry. It automatically closes the previous
            entry if present.
            All entry elements bar name are optional, but must be correct if present.
            If the compression method is stored and the output is not patchable
            the compression for that entry is automatically changed to deflate level 0
            </summary>
            <param name="entry">
            the entry.
            </param>
            <exception cref="T:System.ArgumentNullException">
            if entry passed is null.
            </exception>
            <exception cref="T:System.IO.IOException">
            if an I/O error occured.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            if stream was finished
            </exception>
            <exception cref="T:ICSharpCode.SharpZipLib.Zip.ZipException">
            Too many entries in the Zip file<br/>
            Entry name is too long<br/>
            Finish has already been called<br/>
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.CloseEntry">
            <summary>
            Closes the current entry, updating header and footer information as required
            </summary>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            No entry is active.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes the given buffer to the current entry.
            </summary>
            <exception cref="T:ICSharpCode.SharpZipLib.Zip.ZipException">
            Archive size is invalid
            </exception>
            <exception cref="T:System.InvalidOperationException">
            No entry is active.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.Finish">
            <summary>
            Finishes the stream.  This will write the central directory at the
            end of the zip file and flush the stream.
            </summary>
            <remarks>
            This is automatically called when the stream is closed.
            </remarks>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
            <exception cref="T:ICSharpCode.SharpZipLib.Zip.ZipException">
            Comment exceeds the maximum length<br/>
            Entry name exceeds the maximum length
            </exception>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.IsFinished">
            <summary>
            Gets boolean indicating central header has been added for this archive...
            No further entries can be added once this has been done.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.UseZip64">
            <summary>
            Get / set a value indicating how Zip64 Extension usage is determined when adding entries.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Tar.ProgressMessageHandler">
            <summary>
            Used to advise clients of 'events' while processing archives
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Tar.TarArchive">
            <summary>
            The TarArchive class implements the concept of a
            'Tape Archive'. A tar archive is a series of entries, each of
            which represents a file system object. Each entry in
            the archive consists of a header block followed by 0 or more data blocks.
            Directory entries consist only of the header block, and are followed by entries
            for the directory's contents. File entries consist of a
            header followed by the number of blocks needed to
            contain the file's contents. All entries are written on
            block boundaries. Blocks are 512 bytes long.
            
            TarArchives are instantiated in either read or write mode,
            based upon whether they are instantiated with an InputStream
            or an OutputStream. Once instantiated TarArchives read/write
            mode can not be changed.
            
            There is currently no support for random access to tar archives.
            However, it seems that subclassing TarArchive, and using the
            TarBuffer.CurrentRecord and TarBuffer.CurrentBlock
            properties, this would be rather trivial.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.OnProgressMessageEvent(ICSharpCode.SharpZipLib.Tar.TarEntry,System.String)">
            <summary>
            Raises the ProgressMessage event
            </summary>
            <param name="entry">TarEntry for this event</param>
            <param name="message">message for this event.  Null is no message</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.#ctor">
            <summary>
            Constructor for a default <see cref="T:ICSharpCode.SharpZipLib.Tar.TarArchive"/>.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.#ctor(ICSharpCode.SharpZipLib.Tar.TarInputStream)">
            <summary>
            Initalise a TarArchive for input.
            </summary>
            <param name="stream">The <see cref="T:ICSharpCode.SharpZipLib.Tar.TarInputStream"/> to use for input.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.#ctor(ICSharpCode.SharpZipLib.Tar.TarOutputStream)">
            <summary>
            Initialise a TarArchive for output.
            </summary>
            <param name="stream">The <see cref="T:ICSharpCode.SharpZipLib.Tar.TarOutputStream"/> to use for output.</param> 
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.CreateInputTarArchive(System.IO.Stream)">
            <summary>
            The InputStream based constructors create a TarArchive for the
            purposes of extracting or listing a tar archive. Thus, use
            these constructors when you wish to extract files from or list
            the contents of an existing tar archive.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.CreateInputTarArchive(System.IO.Stream,System.Int32)">
            <summary>
            Create TarArchive for reading setting block factor
            </summary>
            <param name="inputStream">Stream for tar archive contents</param>
            <param name="blockFactor">The blocking factor to apply</param>
            <returns>
            TarArchive
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.CreateOutputTarArchive(System.IO.Stream)">
            <summary>
            Create a TarArchive for writing to, using the default blocking factor
            </summary>
            <param name="outputStream">Stream to write to</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.CreateOutputTarArchive(System.IO.Stream,System.Int32)">
            <summary>
            Create a TarArchive for writing to
            </summary>
            <param name="outputStream">The stream to write to</param>
            <param name="blockFactor">The blocking factor to use for buffering.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.SetKeepOldFiles(System.Boolean)">
            <summary>
            Set the flag that determines whether existing files are
            kept, or overwritten during extraction.
            </summary>
            <param name="keepOldFiles">
            If true, do not overwrite existing files.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.SetAsciiTranslation(System.Boolean)">
            <summary>
            Set the ascii file translation flag.
            </summary>
            <param name= "asciiTranslate">
            If true, translate ascii text files.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.SetUserInfo(System.Int32,System.String,System.Int32,System.String)">
            <summary>
            Set user and group information that will be used to fill in the
            tar archive's entry headers. This information based on that available 
            for the linux operating system, which is not always available on other
            operating systems.  TarArchive allows the programmer to specify values
            to be used in their place.
            <see cref="P:ICSharpCode.SharpZipLib.Tar.TarArchive.ApplyUserInfoOverrides"/> is set to true by this call.
            </summary>
            <param name="userId">
            The user id to use in the headers.
            </param>
            <param name="userName">
            The user name to use in the headers.
            </param>
            <param name="groupId">
            The group id to use in the headers.
            </param>
            <param name="groupName">
            The group name to use in the headers.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.CloseArchive">
            <summary>
            Close the archive.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.ListContents">
            <summary>
            Perform the "list" command for the archive contents.
            
            NOTE That this method uses the <see cref="E:ICSharpCode.SharpZipLib.Tar.TarArchive.ProgressMessageEvent"> progress event</see> to actually list
            the contents. If the progress display event is not set, nothing will be listed!
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.ExtractContents(System.String)">
            <summary>
            Perform the "extract" command and extract the contents of the archive.
            </summary>
            <param name="destinationDirectory">
            The destination directory into which to extract.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.ExtractEntry(System.String,ICSharpCode.SharpZipLib.Tar.TarEntry)">
            <summary>
            Extract an entry from the archive. This method assumes that the
            tarIn stream has been properly set with a call to GetNextEntry().
            </summary>
            <param name="destDir">
            The destination directory into which to extract.
            </param>
            <param name="entry">
            The TarEntry returned by tarIn.GetNextEntry().
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.WriteEntry(ICSharpCode.SharpZipLib.Tar.TarEntry,System.Boolean)">
            <summary>
            Write an entry to the archive. This method will call the putNextEntry
            and then write the contents of the entry, and finally call closeEntry()
            for entries that are files. For directories, it will call putNextEntry(),
            and then, if the recurse flag is true, process each entry that is a
            child of the directory.
            </summary>
            <param name="sourceEntry">
            The TarEntry representing the entry to write to the archive.
            </param>
            <param name="recurse">
            If true, process the children of directory entries.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.InternalWriteEntry(ICSharpCode.SharpZipLib.Tar.TarEntry,System.Boolean)">
            <summary>
            Write an entry to the archive. This method will call the putNextEntry
            and then write the contents of the entry, and finally call closeEntry()
            for entries that are files. For directories, it will call putNextEntry(),
            and then, if the recurse flag is true, process each entry that is a
            child of the directory.
            </summary>
            <param name="sourceEntry">
            The TarEntry representing the entry to write to the archive.
            </param>
            <param name="recurse">
            If true, process the children of directory entries.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the FileStream and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources;
            false to release only unmanaged resources.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.Close">
            <summary>
            Closes the archive and releases any associated resources.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.Finalize">
            <summary>
            Ensures that resources are freed and other cleanup operations are performed
            when the garbage collector reclaims the <see cref="T:ICSharpCode.SharpZipLib.Tar.TarArchive"/>.
            </summary>
        </member>
        <member name="E:ICSharpCode.SharpZipLib.Tar.TarArchive.ProgressMessageEvent">
            <summary>
            Client hook allowing detailed information to be reported during processing
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarArchive.AsciiTranslate">
            <summary>
            Get/set the ascii file translation flag. If ascii file translation
            is true, then the file is checked to see if it a binary file or not. 
            If the flag is true and the test indicates it is ascii text 
            file, it will be translated. The translation converts the local
            operating system's concept of line ends into the UNIX line end,
            '\n', which is the defacto standard for a TAR archive. This makes
            text files compatible with UNIX.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarArchive.PathPrefix">
            <summary>
            PathPrefix is added to entry names as they are written if the value is not null.
            A slash character is appended after PathPrefix 
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarArchive.RootPath">
            <summary>
            RootPath is removed from entry names if it is found at the
            beginning of the name.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarArchive.ApplyUserInfoOverrides">
            <summary>
            Get or set a value indicating if overrides defined by <see cref="M:ICSharpCode.SharpZipLib.Tar.TarArchive.SetUserInfo(System.Int32,System.String,System.Int32,System.String)">SetUserInfo</see> should be applied.
            </summary>
            <remarks>If overrides are not applied then the values as set in each header will be used.</remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarArchive.UserId">
            <summary>
            Get the archive user id.
            See <see cref="P:ICSharpCode.SharpZipLib.Tar.TarArchive.ApplyUserInfoOverrides">ApplyUserInfoOverrides</see> for detail
            on how to allow setting values on a per entry basis.
            </summary>
            <returns>
            The current user id.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarArchive.UserName">
            <summary>
            Get the archive user name.
            See <see cref="P:ICSharpCode.SharpZipLib.Tar.TarArchive.ApplyUserInfoOverrides">ApplyUserInfoOverrides</see> for detail
            on how to allow setting values on a per entry basis.
            </summary>
            <returns>
            The current user name.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarArchive.GroupId">
            <summary>
            Get the archive group id.
            See <see cref="P:ICSharpCode.SharpZipLib.Tar.TarArchive.ApplyUserInfoOverrides">ApplyUserInfoOverrides</see> for detail
            on how to allow setting values on a per entry basis.
            </summary>
            <returns>
            The current group id.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarArchive.GroupName">
            <summary>
            Get the archive group name.
            See <see cref="P:ICSharpCode.SharpZipLib.Tar.TarArchive.ApplyUserInfoOverrides">ApplyUserInfoOverrides</see> for detail
            on how to allow setting values on a per entry basis.
            </summary>
            <returns>
            The current group name.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarArchive.RecordSize">
            <summary>
            Get the archive's record size. Tar archives are composed of
            a series of RECORDS each containing a number of BLOCKS.
            This allowed tar archives to match the IO characteristics of
            the physical device being used. Archives are expected
            to be properly "blocked".
            </summary>
            <returns>
            The record size this archive is using.
            </returns>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.SharpZipBaseException">
            <summary>
            SharpZipBaseException is the base exception class for the SharpZipLibrary.
            All library exceptions are derived from this.
            </summary>
            <remarks>NOTE: Not all exceptions thrown will be derived from this class.
            A variety of other exceptions are possible for example <see cref="T:System.ArgumentNullException"></see></remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.SharpZipBaseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor 
            </summary>
            <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo"/> for this constructor</param>
            <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext"/> for this constructor</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.SharpZipBaseException.#ctor">
            <summary>
            Initializes a new instance of the SharpZipBaseException class.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.SharpZipBaseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the SharpZipBaseException class with a specified error message.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.SharpZipBaseException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the SharpZipBaseException class with a specified
            error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">Error message string</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.GZip.GZipOutputStream">
             <summary>
             This filter stream is used to compress a stream into a "GZIP" stream.
             The "GZIP" format is described in RFC 1952.
            
             author of the original java version : John Leuner
             </summary>
             <example> This sample shows how to gzip a file
             <code>
             using System;
             using System.IO;
             
             using ICSharpCode.SharpZipLib.GZip;
             using ICSharpCode.SharpZipLib.Core;
             
             class MainClass
             {
             	public static void Main(string[] args)
             	{
             			using (Stream s = new GZipOutputStream(File.Create(args[0] + ".gz")))
             			using (FileStream fs = File.OpenRead(args[0])) {
             				byte[] writeData = new byte[4096];
             				Streamutils.Copy(s, fs, writeData);
             			}
             		}
             	}
             }	
             </code>
             </example>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.GZipOutputStream.crc">
            <summary>
            CRC-32 value for uncompressed data
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.GZipOutputStream.#ctor(System.IO.Stream)">
            <summary>
            Creates a GzipOutputStream with the default buffer size
            </summary>
            <param name="baseOutputStream">
            The stream to read data (to be compressed) from
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.GZipOutputStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Creates a GZipOutputStream with the specified buffer size
            </summary>
            <param name="baseOutputStream">
            The stream to read data (to be compressed) from
            </param>
            <param name="size">
            Size of the buffer to use
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.GZipOutputStream.SetLevel(System.Int32)">
            <summary>
            Sets the active compression level (1-9).  The new level will be activated
            immediately.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Level specified is not supported.
            </exception>
            <see cref="T:ICSharpCode.SharpZipLib.Zip.Compression.Deflater"/>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.GZipOutputStream.GetLevel">
            <summary>
            Get the current compression level.
            </summary>
            <returns>The current compression level.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.GZipOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write given buffer to output updating crc
            </summary>
            <param name="buffer">Buffer to write</param>
            <param name="offset">Offset of first byte in buf to write</param>
            <param name="count">Number of bytes to write</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.GZipOutputStream.Close">
            <summary>
            Writes remaining compressed output data to the output stream
            and closes it.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.GZipOutputStream.Finish">
            <summary>
            Finish compression and write any footer information required to stream
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.Web.IPage.ParseOutputParameters(Mtime.Community.Utility.Web.PageContext)">
            <summary>
            解析Output参数
            </summary>
            <param name="ctx"></param>
            <param name="configInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Web.IPage.PreInit(Mtime.Community.Utility.Web.PageContext)">
            <summary>
            让子类提前执行一些方法
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="F:Mtime.Community.Utility.Web.Page.jsSrcScripts">
            <summary>
            外链Js src
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.Web.Page.dataScripts">
            <summary>
            Js脚本 数据
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.Web.Page.systemScripts">
            <summary>
            Js脚本 系统
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.Web.Page.callbackScripts">
            <summary>
            Js脚本 callback
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.Web.Page.runtimeScripts">
            <summary>
            Js脚本 运行
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.Web.Page.styles">
            <summary>
            Css
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.Web.Page.metas">
            <summary>
            Meta
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.Web.Page.RegisterClientScriptDataBlock(System.String)">
            <summary>
            注册客户端脚本
            </summary>
            <param name="scriptContent">数据型脚本内容</param>
        </member>
        <member name="M:Mtime.Community.Utility.Web.Page.RegisterClientScriptDataBlock(Mtime.Community.Utility.Web.ScriptVariables)">
            <summary>
            注册客户端脚本
            </summary>
            <param name="scriptVariables">数据型脚本内容</param>
        </member>
        <member name="M:Mtime.Community.Utility.Web.Page.RegisterClientScriptSystemBlock(System.String)">
            <summary>
            注册客户端脚本
            </summary>
            <param name="scriptContent">系统型脚本内容</param>
        </member>
        <member name="M:Mtime.Community.Utility.Web.Page.RegisterClientScriptJsSrcBlock(System.String)">
            <summary>
            外链Js src，慎用，除非该js中带有document.write
            </summary>
            <param name="scriptContent">Js src</param>
        </member>
        <member name="M:Mtime.Community.Utility.Web.Page.RegisterClientScriptCallbackBlock(System.String)">
            <summary>
            注册客户端脚本
            </summary>
            <param name="scriptContent">回调型脚本内容</param>
        </member>
        <member name="M:Mtime.Community.Utility.Web.Page.RegisterClientScriptRuntimeBlock(System.String)">
            <summary>
            注册客户端脚本
            </summary>
            <param name="scriptContent">运行型脚本内容</param>
        </member>
        <member name="M:Mtime.Community.Utility.Web.Page.RegisterClientStyleBlock(System.String)">
            <summary>
            注册客户端CSS
            </summary>
            <param name="styleContent"></param>
        </member>
        <member name="M:Mtime.Community.Utility.Web.Page.RegisterClientMetaBlock(System.String,System.String)">
            <summary>
            注册META脚本
            </summary>
            <param name="metaName"></param>
            <param name="metaContent"></param>
        </member>
        <member name="M:Mtime.Community.Utility.Web.Page.RenderScript">
            <summary>
            输出脚本块
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.Web.Page.RenderStyle">
            <summary>
            输出CSS块
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.Web.Page.RenderMeta">
            <summary>
            输出Meta块
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.Web.Page.Load">
            <summary>
            具体页面装载
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.Web.AjaxMethodInfo.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="methodName">方法名</param>
        </member>
        <member name="M:Mtime.Community.Utility.Web.AjaxMethodInfo.#ctor(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="methodName">方法名</param>
            <param name="parameterCount">方法参数个数</param>
        </member>
        <member name="M:Mtime.Community.Utility.Web.AjaxMethodInfo.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="methodName">方法名</param>
            <param name="parameterCount">方法参数个数</param>
            <param name="timeOut">方法超时时间，单位：微秒</param>
        </member>
        <member name="P:Mtime.Community.Utility.Web.AjaxMethodAttribute.IsDirectPlainText">
            <summary>
            是否直接输出文本
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.Web.AjaxManager.Register(Mtime.Community.Utility.Web.Page,System.String,Mtime.Community.Utility.Web.AjaxMethodInfo[],Mtime.Community.Utility.Web.AjaxMethodInfo[])">
            <summary>
            对于子类和父类之间同时注册AjaxMethod的临时处理
            </summary>
            <param name="control"></param>
            <param name="prefix"></param>
            <param name="appendAjaxMethods"></param>
            <param name="ajaxMethods"></param>
        </member>
        <member name="M:Mtime.Community.Utility.Web.AjaxManager.ToJson(System.String,System.Object)">
            <summary>
            返回JSON字符串
            </summary>
            <param name="jsObjectName">对象名，输出为var jsObjectName = {JSON}</param>
            <param name="val">需要转换为JSON的对象</param>
            <returns></returns>
        </member>
        <member name="T:Mtime.Community.Utility.URLRewriter.Config.Ku6RewriterConfig">
            <summary>
            定义了URL重写的配置类文件结构以及获取配置
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.URLRewriter.Config.Ku6RewriterConfig.GetConfig">
            <summary>
            从配置文件中返回一个RewriterConfiguration实例
            </summary>
        </member>
        <member name="T:Mtime.Community.Utility.URLRewriter.Config.EntCeRewriterConfig">
            <summary>
            定义了URL重写的配置类文件结构以及获取配置
            </summary>
        </member>
        <member name="T:Rss.RssModuleItemCollectionCollection">
            <summary>A strongly typed collection of <see cref="T:Rss.RssModuleItemCollection"/> objects</summary>
        </member>
        <member name="M:Rss.RssModuleItemCollectionCollection.Add(Rss.RssModuleItemCollection)">
            <summary>Adds a specified item to this collection.</summary>
            <param name="rssModuleItemCollection">The item to add.</param>
            <returns>The zero-based index of the added item.</returns>
        </member>
        <member name="M:Rss.RssModuleItemCollectionCollection.Contains(Rss.RssModuleItemCollection)">
            <summary>Determines whether the RssModuleItemCollectionCollection contains a specific element.</summary>
            <param name="rssModuleItemCollection">The RssModuleItemCollection to locate in the RssModuleItemCollectionCollection.</param>
            <returns>true if the RssModuleItemCollectionCollection contains the specified value; otherwise, false.</returns>
        </member>
        <member name="M:Rss.RssModuleItemCollectionCollection.CopyTo(Rss.RssModuleItemCollection[],System.Int32)">
            <summary>Copies the entire RssModuleItemCollectionCollection to a compatible one-dimensional <see cref="T:System.Array"/>, starting at the specified index of the target array.</summary>
            <param name="array">The one-dimensional RssModuleItemCollection Array that is the destination of the elements copied from RssModuleItemCollectionCollection. The Array must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">array is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero.</exception>
            <exception cref="T:System.ArgumentException">array is multidimensional. -or- index is equal to or greater than the length of array.-or-The number of elements in the source RssModuleItemCollectionCollection is greater than the available space from index to the end of the destination array.</exception>
        </member>
        <member name="M:Rss.RssModuleItemCollectionCollection.IndexOf(Rss.RssModuleItemCollection)">
            <summary>Searches for the specified RssModuleItemCollection and returns the zero-based index of the first occurrence within the entire RssModuleItemCollectionCollection.</summary>
            <param name="rssModuleItemCollection">The RssModuleItemCollection to locate in the RssModuleItemCollectionCollection.</param>
            <returns>The zero-based index of the first occurrence of RssModuleItemCollection within the entire RssModuleItemCollectionCollection, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Rss.RssModuleItemCollectionCollection.Insert(System.Int32,Rss.RssModuleItemCollection)">
            <summary>Inserts an item into this collection at a specified index.</summary>
            <param name="index">The zero-based index of the collection at which to insert the item.</param>
            <param name="rssModuleItemCollection">The item to insert into this collection.</param>
        </member>
        <member name="M:Rss.RssModuleItemCollectionCollection.Remove(Rss.RssModuleItemCollection)">
            <summary>Removes a specified item from this collection.</summary>
            <param name="rssModuleItemCollection">The item to remove.</param>
        </member>
        <member name="P:Rss.RssModuleItemCollectionCollection.Item(System.Int32)">
            <summary>Gets or sets the item at a specified index.<para>In C#, this property is the indexer for the class.</para></summary>
            <param name="index">The index of the collection to access.</param>
            <value>An item at each valid index.</value>
            <remarks>This method is an indexer that can be used to access the collection.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index.</exception>
        </member>
        <member name="T:Mtime.Community.Utility.ResourceManager.GlobalResourceManager">
            <summary>
            整站资源,包括首页,页眉,页脚
            </summary>
        </member>
        <member name="T:Mtime.Community.Utility.ParseMaster">
            <summary>
            a multi-pattern parser
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.ParseMaster.Add(System.String)">
            <summary>
            Add an expression to be deleted
            </summary>
            <param name="expression">Regular Expression String</param>
        </member>
        <member name="M:Mtime.Community.Utility.ParseMaster.Add(System.String,System.String)">
            <summary>
            Add an expression to be replaced with the replacement string
            </summary>
            <param name="expression">Regular Expression String</param>
            <param name="replacement">Replacement String. Use $1, $2, etc. for groups</param>
        </member>
        <member name="M:Mtime.Community.Utility.ParseMaster.Add(System.String,Mtime.Community.Utility.ParseMaster.MatchGroupEvaluator)">
            <summary>
            Add an expression to be replaced using a callback function
            </summary>
            <param name="expression">Regular expression string</param>
            <param name="replacement">Callback function</param>
        </member>
        <member name="M:Mtime.Community.Utility.ParseMaster.Exec(System.String)">
            <summary>
            Executes the parser
            </summary>
            <param name="input">input string</param>
            <returns>parsed string</returns>
        </member>
        <member name="M:Mtime.Community.Utility.ParseMaster.getPatterns">
            <summary>
            builds the patterns into a single regular expression
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.ParseMaster.replacement(System.Text.RegularExpressions.Match)">
            <summary>
            Global replacement function. Called once for each match found
            </summary>
            <param name="match">Match found</param>
        </member>
        <member name="M:Mtime.Community.Utility.ParseMaster.replacementString(System.Text.RegularExpressions.Match,System.Int32,System.String,System.Int32)">
            <summary>
            Replacement function for complicated lookups (e.g. Hello $3 $2)
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.ParseMaster.IgnoreCase">
            <summary>
            Ignore Case?
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.ParseMaster.EscapeChar">
            <summary>
            Escape Character to use
            </summary>
        </member>
        <member name="T:Mtime.Community.Utility.ParseMaster.MatchGroupEvaluator">
            <summary>
            Delegate to call when a regular expression is found.
            Use match.Groups[offset + &lt;group number&gt;].Value to get
            the correct subexpression
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.StreamHelper.SkipUntilEndOfLine(System.IO.Stream)">
            <summary>
            Reads from the socket until the sequence '\r\n' is encountered.
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.StreamHelper.ReadLine(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Reads from the socket until the sequence '\r\n' is encountered, 
            and returns everything up to but not including that sequence as a UTF8-encoded string
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.StreamHelper.DeCompressToByteArray(System.Byte[])">
            <summary>
            todo:稍后重构
            </summary>
            <param name="compressData"></param>
            <returns></returns>
        </member>
        <member name="T:ProtoBuf.ProtoIncludeAttribute">
            <summary>
            Indicates the known-types to support for an individual
            message. This serializes each level in the hierarchy as
            a nested message to retain wire-compatibility with
            other protocol-buffer implementations.
            </summary>
        </member>
        <member name="M:ProtoBuf.ProtoIncludeAttribute.#ctor(System.Int32,System.Type)">
            <summary>
            Creates a new instance of the ProtoIncludeAttribute.
            </summary>
            <param name="tag">The unique index (within the type) that will identify this data.</param>
            <param name="knownType">The additional type to serialize/deserialize.</param>
        </member>
        <member name="M:ProtoBuf.ProtoIncludeAttribute.#ctor(System.Int32,System.String)">
            <summary>
            Creates a new instance of the ProtoIncludeAttribute.
            </summary>
            <param name="tag">The unique index (within the type) that will identify this data.</param>
            <param name="knownTypeName">The additional type to serialize/deserialize.</param>
        </member>
        <member name="P:ProtoBuf.ProtoIncludeAttribute.Tag">
            <summary>
            Gets the unique index (within the type) that will identify this data.
            </summary>
        </member>
        <member name="P:ProtoBuf.ProtoIncludeAttribute.KnownTypeName">
            <summary>
            Gets the additional type to serialize/deserialize.
            </summary>
        </member>
        <member name="P:ProtoBuf.ProtoIncludeAttribute.KnownType">
            <summary>
            Gets the additional type to serialize/deserialize.
            </summary>
        </member>
        <member name="P:ProtoBuf.ProtoIncludeAttribute.DataFormat">
            <summary>
            Specifies whether the inherited sype's sub-message should be
            written with a length-prefix (default), or with group markers.
            </summary>
        </member>
        <member name="T:Mtime.Community.Utility.zxing.qrcode.decoder.FormatInformation">
            <summary> <p>Encapsulates a QR Code's format information, including the data mask used and
            error correction level.</p>
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
            <seealso cref="P:Mtime.Community.Utility.zxing.qrcode.decoder.FormatInformation.DataMask">
            </seealso>
            <seealso cref="P:Mtime.Community.Utility.zxing.qrcode.decoder.FormatInformation.ErrorCorrectionLevelInternal">
            </seealso>
        </member>
        <member name="F:Mtime.Community.Utility.zxing.qrcode.decoder.FormatInformation.FORMAT_INFO_DECODE_LOOKUP">
            <summary> See ISO 18004:2006, Annex C, Table C.1</summary>
        </member>
        <member name="F:Mtime.Community.Utility.zxing.qrcode.decoder.FormatInformation.BITS_SET_IN_HALF_BYTE">
            <summary> Offset i holds the number of 1 bits in the binary representation of i</summary>
        </member>
        <member name="M:Mtime.Community.Utility.zxing.qrcode.decoder.FormatInformation.decodeFormatInformation(System.Int32)">
            <param name="maskedFormatInfo">format info indicator, with mask still applied
            </param>
            <returns> information about the format it specifies, or <code>null</code>
            if doesn't seem to match any known pattern
            </returns>
        </member>
        <member name="M:Mtime.Community.Utility.Json.JsonNull.ToString">
            <returns>A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.</returns>
        </member>
        <member name="T:GifUtility.OcTree">
            <summary>
            八叉树
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.Helper.FlashHelper.IeTemplate">
            <summary>
            {0}:id
            {1}:src
            {2}:width
            {3}:height
            {4}:parms
            </summary>
        </member>
        <member name="T:Mtime.Community.Utility.Helper.EncryptHelper">
            <summary>
            EncryptHelper 的摘要说明。
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.EncryptHelper.AESEncrypt(System.String)">
            <summary>
            AES 加密
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.EncryptHelper.AESEncrypt(System.String,System.Byte[],System.Byte[])">
            <summary>
            DES 加密
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.EncryptHelper.AESDecrypt(System.String)">
            <summary>
            DES 解密
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.EncryptHelper.AESDecrypt(System.String,System.Byte[],System.Byte[])">
            <summary>
            DES 解密
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.EncryptHelper.AESEncryptForUrl(System.String)">
            <summary>
            AES 加密，输出成URL友好格式
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.EncryptHelper.AESDecryptForUrl(System.String)">
            <summary>
            AES 解密（注意，只能对用AESEncryptForUrl方法进行加密的字符串使用）
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.EncryptHelper.DESEncrypt(System.String)">
            <summary>
            DES 加密
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.EncryptHelper.DESEncrypt(System.String,System.Byte[],System.Byte[])">
            <summary>
            DES 加密
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.EncryptHelper.DESDecrypt(System.String)">
            <summary>
            DES 解密
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.EncryptHelper.DESDecrypt(System.String,System.Byte[],System.Byte[])">
            <summary>
            DES 解密
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.EncryptHelper.UrlBase64(System.String,System.Text.Encoding)">
            <summary>
            转换为 UrlBase64，使之适合在url中使用
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.EncryptHelper.FromUrlBase64(System.String,System.Text.Encoding)">
            <summary>
            转换为 UrlBase64，使之适合在url中使用
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.EncryptHelper.Base64ToUrlBase64(System.String)">
            <summary>
            Base64 转换 UrlBase64，使之适合在url中使用
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.EncryptHelper.UrlBase64ToBase64(System.String)">
            <summary>
            UrlBase64 转换 Base64
            </summary>
        </member>
        <member name="M:Mtime.Service.Files.FileServiceFactory.Create">
            <summary>
            用于创建Web应用程序的服务实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mtime.Service.Files.FileServiceFactory.CreateStatic">
            <summary>
            用于创建非Web应用程序的服务实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mtime.MongoDB.MongoDatabase.RenameTable(System.String,System.String)">
            <summary>
            重命名表
            </summary>
            <param name="tableName"></param>
            <param name="newName"></param>
        </member>
        <member name="M:Mtime.MongoDB.MongoDatabase.DropTable(System.String)">
            <summary>
            删除表
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.MongoDB.MongoDatabase.GetTableList(System.Boolean)">
            <summary>
            获取表名列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mtime.MongoDB.MongoDatabase.CreateIndex(System.String,Mtime.MongoDB.IndexBuilder,System.Boolean)">
            <summary>
            创建索引
            </summary>
            <param name="table"></param>
            <param name="builder"></param>
            <param name="unique"></param>
        </member>
        <member name="M:Mtime.MongoDB.MongoDatabase.DropIndex(System.String,Mtime.MongoDB.IndexBuilder,System.Boolean)">
            <summary>
            删除索引
            </summary>
        </member>
        <member name="M:Mtime.MongoDB.MongoDatabase.DropIndex(System.String,System.String)">
            <summary>
            删除索引
            </summary>
            <param name="table"></param>
            <param name="index"></param>
        </member>
        <member name="M:Mtime.MongoDB.MongoDatabase.GetReferenceDocument(Mtime.MongoDB.Bson.DBRef)">
            <summary>
            获取引用文档
            </summary>
            <param name="reference"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.MongoDB.MongoDatabase.GetLastError">
            <summary>
            获取最近一次操作错误信息
            </summary>
        </member>
        <member name="M:Mtime.MongoDB.MongoDatabase.GetLastErrorAndFSync">
            <summary>
            Retrieves the last error and forces the database to fsync all files before returning. 
            </summary>
            <remarks>Server version 1.3+</remarks>
        </member>
        <member name="M:Mtime.MongoDB.MongoDatabase.GetPreviousError">
            <summary>
            Call after sending a bulk operation to the database. 
            </summary>
        </member>
        <member name="M:Mtime.MongoDB.MongoDatabase.ResetError">
            <summary>
            Resets last error. This is good to call before a bulk operation.
            </summary>
        </member>
        <member name="M:Mtime.MongoDB.MongoDatabase.AddUser(System.String,System.String)">
            <summary>
            添加数据库用户
            </summary>
            <param name="username">用户名</param>
            <param name="password">密码</param>
        </member>
        <member name="M:Mtime.MongoDB.MongoDatabase.AuthenticateIfRequired">
            <summary>
            身份认证
            </summary>
        </member>
        <member name="T:Mtime.MongoDB.Communication.ConnectionState">
            <summary>
            连接状态
            </summary>
        </member>
        <member name="M:Mtime.MongoDB.Communication.Connection.SendSimpleMessage(System.String)">
            <summary>
            Just sends a simple message string to the database. 
            </summary>
            <param name="message">
            </param>
        </member>
        <member name="M:Mtime.MongoDB.Communication.Connection.Open">
            <summary>
            Opens this instance.
            </summary>
        </member>
        <member name="M:Mtime.MongoDB.Communication.Connection.Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="M:Mtime.MongoDB.Communication.Connection.ReplaceInvalidConnection">
            <summary>
            Replaces the invalid connection.
            </summary>
        </member>
        <member name="P:Mtime.MongoDB.Communication.Connection.IsAuthenticated">
            <summary>
            Gets or sets a value indicating whether this instance is authenticated.
            </summary>
        </member>
        <member name="P:Mtime.MongoDB.Communication.Connection.State">
            <summary>
            Gets the state.
            </summary>
            <value>The state.</value>
        </member>
        <member name="P:Mtime.MongoDB.Communication.Connection.AutoClose">
            <summary>
            是否在执行查询时自动释放连接
            </summary>
        </member>
        <member name="T:Mtime.MongoDB.Bson.DBRef">
            <summary>
            Native type that maps to a database reference.  Use Database.FollowReference(DBRef) to retrieve the document
            that it refers to.
            </summary>
            <remarks>DBRefs are just a specification for a specially formatted Document.  At this time the database
            does no special handling of them. Any referential integrity must be maintained by the application 
            not the database.
            </remarks>
        </member>
        <member name="M:Mtime.MongoDB.Bson.DBRef.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mtime.MongoDB.Bson.DBRef"/> class.
            </summary>
        </member>
        <member name="M:Mtime.MongoDB.Bson.DBRef.#ctor(Mtime.MongoDB.Document)">
            <summary>
            Constructs a DBRef from a document that matches the DBref specification.
            </summary>
        </member>
        <member name="M:Mtime.MongoDB.Bson.DBRef.FromDocument(Mtime.MongoDB.Document)">
            <summary>
            Deprecated.  Use the new DBRef(Document) constructor instead.
            </summary>
        </member>
        <member name="P:Mtime.MongoDB.Bson.DBRef.CollectionName">
            <summary>
            The name of the collection the referenced document is in. 
            </summary>
        </member>
        <member name="P:Mtime.MongoDB.Bson.DBRef.Id">
            <summary>
            Object value of the id.  It isn't an Oid because document ids are not required to be oids.
            </summary>
        </member>
        <member name="P:Mtime.MongoDB.Bson.DBRef.MetaData">
            <summary>
            An extension to the spec that allows storing of arbitrary data about a reference.  
            </summary>
            <remarks>This is a non-standard feature.
            </remarks>
        </member>
        <member name="T:Mtime.Community.Utility.RemoteService.Protocol.RemoteServiceProtocol">
            <summary>
            RemoteServer DataLength\r\nData
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.RemoteService.Protocol.RemoteServiceProtocol.Reset">
            <summary>
            重置分析器
            </summary>
        </member>
        <member name="T:Mtime.Community.Utility.RemoteService.Protocol.RemoteServiceProtocol.RemoteParseState">
            <summary>
            Remote协议分析状态
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.RemoteService.Protocol.RemoteServiceProtocol.RemoteParseState.Action">
            <summary>
            操作
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.RemoteService.Protocol.RemoteServiceProtocol.RemoteParseState.Length">
            <summary>
            消息长度
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.RemoteService.Protocol.RemoteServiceProtocol.RemoteParseState.LF">
            <summary>
            换行符
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.RemoteService.Protocol.RemoteServiceProtocol.RemoteParseState.Body">
            <summary>
            内容主体
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ZipNameTransform">
            <summary>
            ZipNameTransform transforms names as per the Zip file naming convention.
            </summary>
            <remarks>The use of absolute names is supported although its use is not valid 
            according to Zip naming conventions, and should not be used if maximum compatability is desired.</remarks>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.INameTransform">
            <summary>
            INameTransform defines how file system names are transformed for use with archives.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.INameTransform.TransformFile(System.String)">
            <summary>
            Given a file name determine the transformed value.
            </summary>
            <param name="name">The name to transform.</param>
            <returns>The transformed file name.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.INameTransform.TransformDirectory(System.String)">
            <summary>
            Given a directory name determine the transformed value.
            </summary>
            <param name="name">The name to transform.</param>
            <returns>The transformed directory name</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipNameTransform.#ctor">
            <summary>
            Initialize a new instance of <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipNameTransform"></see>
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipNameTransform.#ctor(System.String)">
            <summary>
            Initialize a new instance of <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipNameTransform"></see>
            </summary>
            <param name="trimPrefix">The string to trim from front of paths if found.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipNameTransform.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipNameTransform.TransformDirectory(System.String)">
            <summary>
            Transform a directory name according to the Zip file naming conventions.
            </summary>
            <param name="name">The directory name to transform.</param>
            <returns>The transformed name.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipNameTransform.TransformFile(System.String)">
            <summary>
            Transform a file name according to the Zip file naming conventions.
            </summary>
            <param name="name">The file name to transform.</param>
            <returns>The transformed name.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipNameTransform.IsValidName(System.String,System.Boolean)">
            <summary>
            Test a name to see if it is a valid name for a zip entry.
            </summary>
            <param name="name">The name to test.</param>
            <param name="relaxed">If true checking is relaxed about windows file names and absolute paths.</param>
            <returns>Returns true if the name is a valid zip name; false otherwise.</returns>
            <remarks>Zip path names are actually in Unix format,
            and should only contain relative paths.
            This means that any path stored should not contain a drive or
            device letter, or a leading slash.  All slashes should forward slashes '/'.
            An empty name is valid for a file where the input comes from standard input.
            A null name is not considered valid.
            </remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipNameTransform.IsValidName(System.String)">
            <summary>
            Test a name to see if it is a valid name for a zip entry.
            </summary>
            <param name="name">The name to test.</param>
            <returns>Returns true if the name is a valid zip name; false otherwise.</returns>
            <remarks>Zip path names are actually in unix format,
            and should only contain relative paths if a path is present.
            This means that the path stored should not contain a drive or
            device letter, or a leading slash.  All slashes should forward slashes '/'.
            An empty name is valid where the input comes from standard input.
            A null name is not considered valid.
            </remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipNameTransform.TrimPrefix">
            <summary>
            Get/set the path prefix to be trimmed from paths if present.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ZipExtraData">
            <summary>
            A class to handle the extra data field for Zip entries
            </summary>
            <remarks>
            Extra data contains 0 or more values each prefixed by a header tag and length.
            They contain zero or more bytes of actual data.
            The data is held internally using a copy on write strategy.  This is more efficient but
            means that for extra data created by passing in data can have the values modified by the caller
            in some circumstances.
            </remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.#ctor">
            <summary>
            Initialise a default instance.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.#ctor(System.Byte[])">
            <summary>
            Initialise with known extra data.
            </summary>
            <param name="data">The extra data.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.GetEntryData">
            <summary>
            Get the raw extra data value
            </summary>
            <returns>Returns the raw byte[] extra data this instance represents.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.Clear">
            <summary>
            Clear the stored data.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.GetStreamForTag(System.Int32)">
            <summary>
            Get a read-only <see cref="T:System.IO.Stream"/> for the associated tag.
            </summary>
            <param name="tag">The tag to locate data for.</param>
            <returns>Returns a <see cref="T:System.IO.Stream"/> containing tag data or null if no tag was found.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.Find(System.Int32)">
            <summary>
            Find an extra data value
            </summary>
            <param name="headerID">The identifier for the value to find.</param>
            <returns>Returns true if the value was found; false otherwise.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.AddEntry(System.Int32,System.Byte[])">
            <summary>
            Add a new entry to extra data
            </summary>
            <param name="headerID">The ID for this entry.</param>
            <param name="fieldData">The data to add.</param>
            <remarks>If the ID already exists its contents are replaced.</remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.StartNewEntry">
            <summary>
            Start adding a new entry.
            </summary>
            <remarks>Add data using <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.AddData(System.Byte[])"/>, <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.AddLeShort(System.Int32)"/>, <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.AddLeInt(System.Int32)"/>, or <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.AddLeLong(System.Int64)"/>.
            The new entry is completed and actually added by calling <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.AddNewEntry(System.Int32)"/></remarks>
            <seealso cref="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.AddEntry(System.Int32,System.Byte[])"/>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.AddNewEntry(System.Int32)">
            <summary>
            Add entry data added since <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.StartNewEntry"/> using the ID passed.
            </summary>
            <param name="headerID">The identifier to use for this entry.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.AddData(System.Byte)">
            <summary>
            Add a byte of data to the pending new entry.
            </summary>
            <param name="data">The byte to add.</param>
            <seealso cref="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.StartNewEntry"/>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.AddData(System.Byte[])">
            <summary>
            Add data to a pending new entry.
            </summary>
            <param name="data">The data to add.</param>
            <seealso cref="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.StartNewEntry"/>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.AddLeShort(System.Int32)">
            <summary>
            Add a short value in little endian order to the pending new entry.
            </summary>
            <param name="toAdd">The data to add.</param>
            <seealso cref="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.StartNewEntry"/>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.AddLeInt(System.Int32)">
            <summary>
            Add an integer value in little endian order to the pending new entry.
            </summary>
            <param name="toAdd">The data to add.</param>
            <seealso cref="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.StartNewEntry"/>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.AddLeLong(System.Int64)">
            <summary>
            Add a long value in little endian order to the pending new entry.
            </summary>
            <param name="toAdd">The data to add.</param>
            <seealso cref="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.StartNewEntry"/>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.Delete(System.Int32)">
            <summary>
            Delete an extra data field.
            </summary>
            <param name="headerID">The identifier of the field to delete.</param>
            <returns>Returns true if the field was found and deleted.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.ReadLong">
            <summary>
            Read a long in little endian form from the last <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.Find(System.Int32)">found</see> data value
            </summary>
            <returns>Returns the long value read.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.ReadInt">
            <summary>
            Read an integer in little endian form from the last <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.Find(System.Int32)">found</see> data value.
            </summary>
            <returns>Returns the integer read.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.ReadShort">
            <summary>
            Read a short value in little endian form from the last <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.Find(System.Int32)">found</see> data value.
            </summary>
            <returns>Returns the short value read.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.ReadByte">
            <summary>
            Read a byte from an extra data
            </summary>
            <returns>The byte value read or -1 if the end of data has been reached.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.Skip(System.Int32)">
            <summary>
            Skip data during reading.
            </summary>
            <param name="amount">The number of bytes to skip.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.ReadShortInternal">
            <summary>
            Internal form of <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.ReadShort"/> that reads data at any location.
            </summary>
            <returns>Returns the short value read.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.Dispose">
            <summary>
            Dispose of this instance.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipExtraData.Length">
            <summary>
            Gets the current extra data length.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipExtraData.ValueLength">
            <summary>
            Get the length of the last value found by <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.Find(System.Int32)"/>
            </summary>
            <remarks>This is only value if <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.Find(System.Int32)"/> has previsouly returned true.</remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipExtraData.CurrentReadIndex">
            <summary>
            Get the index for the current read value.
            </summary>
            <remarks>This is only valid if <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.Find(System.Int32)"/> has previously returned true.
            Initially it will be the index of the first byte of actual data.  Its is updated after calls to
            <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.ReadInt"/>, <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.ReadShort"/> and <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipExtraData.ReadLong"/>. </remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipExtraData.UnreadCount">
            <summary>
            Get the number of bytes remaining to be read for the current value;
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Checksums.StrangeCRC">
            <summary>
            Bzip2 checksum algorithm
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.StrangeCRC.#ctor">
            <summary>
            Initialise a default instance of <see cref="T:ICSharpCode.SharpZipLib.Checksums.StrangeCRC"></see>
            </summary>	
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.StrangeCRC.Reset">
            <summary>
            Reset the state of Crc.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.StrangeCRC.Update(System.Int32)">
            <summary>
            Update the Crc value.
            </summary>
            <param name="value">data update is based on</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.StrangeCRC.Update(System.Byte[])">
            <summary>
            Update Crc based on a block of data
            </summary>		
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.StrangeCRC.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Update Crc based on a portion of a block of data
            </summary>
            <param name="buffer">block of data</param>
            <param name="offset">index of first byte to use</param>
            <param name="count">number of bytes to use</param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Checksums.StrangeCRC.Value">
            <summary>
            Get the current Crc value.
            </summary>
        </member>
        <member name="M:CookComputing.XmlRpc.XmlRpcClientProtocol.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.PageSubArea.BasePageSubArea.useTestData">
            <summary>
            是否使用测试数据
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.PageSubArea.BasePageSubArea.name">
            <summary>
            推荐位的名称
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.PageSubArea.BasePageSubArea.Name">
            <summary>
            推荐位的名称
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.Web.OutputCache.Get">
            <summary>
            从缓存里面取数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Web.OutputCache.RemoveSingle">
            <summary>
            从缓存里移出数据
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.Server.SocketServerManager.Initialize(System.String)">
            <summary>
            Initializes with the specified config.
            </summary>
            <param name="config">The config.</param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Server.SocketServerManager.Start">
            <summary>
            Starts with specified config.
            </summary>
            <param name="config">The config.</param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Server.SocketServerManager.Stop">
            <summary>
            Stops this instance.
            </summary>
        </member>
        <member name="T:Rss.RssModuleItemCollection">
            <summary>A strongly typed collection of <see cref="T:Rss.RssModuleItem"/> objects</summary>
        </member>
        <member name="M:Rss.RssModuleItemCollection.Add(Rss.RssModuleItem)">
            <summary>Adds a specified item to this collection.</summary>
            <param name="rssModuleItem">The item to add.</param>
            <returns>The zero-based index of the added item.</returns>
        </member>
        <member name="M:Rss.RssModuleItemCollection.Contains(Rss.RssModuleItem)">
            <summary>Determines whether the RssModuleItemCollection contains a specific element.</summary>
            <param name="rssModuleItem">The RssModuleItem to locate in the RssModuleItemCollection.</param>
            <returns>true if the RssModuleItemCollection contains the specified value; otherwise, false.</returns>
        </member>
        <member name="M:Rss.RssModuleItemCollection.CopyTo(Rss.RssModuleItem[],System.Int32)">
            <summary>Copies the entire RssModuleItemCollection to a compatible one-dimensional <see cref="T:System.Array"/>, starting at the specified index of the target array.</summary>
            <param name="array">The one-dimensional RssModuleItem Array that is the destination of the elements copied from RssModuleItemCollection. The Array must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">array is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero.</exception>
            <exception cref="T:System.ArgumentException">array is multidimensional. -or- index is equal to or greater than the length of array.-or-The number of elements in the source RssModuleItemCollection is greater than the available space from index to the end of the destination array.</exception>
        </member>
        <member name="M:Rss.RssModuleItemCollection.IndexOf(Rss.RssModuleItem)">
            <summary>Searches for the specified RssModuleItem and returns the zero-based index of the first occurrence within the entire RssModuleItemCollection.</summary>
            <param name="rssModuleItem">The RssModuleItem to locate in the RssModuleItemCollection.</param>
            <returns>The zero-based index of the first occurrence of RssModuleItem within the entire RssModuleItemCollection, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Rss.RssModuleItemCollection.Insert(System.Int32,Rss.RssModuleItem)">
            <summary>Inserts an item into this collection at a specified index.</summary>
            <param name="index">The zero-based index of the collection at which to insert the item.</param>
            <param name="rssModuleItem">The item to insert into this collection.</param>
        </member>
        <member name="M:Rss.RssModuleItemCollection.Remove(Rss.RssModuleItem)">
            <summary>Removes a specified item from this collection.</summary>
            <param name="rssModuleItem">The item to remove.</param>
        </member>
        <member name="M:Rss.RssModuleItemCollection.BindTo(System.Int32)">
            <summary>Bind a particular item to this module</summary>
            <param name="itemHashCode">Hash code of the item</param>
        </member>
        <member name="M:Rss.RssModuleItemCollection.IsBoundTo(System.Int32)">
            <summary>Check if a particular item is bound to this module</summary>
            <param name="itemHashCode">Hash code of the item</param>
            <returns>true if this item is bound to this module, otherwise false</returns>
        </member>
        <member name="P:Rss.RssModuleItemCollection.Item(System.Int32)">
            <summary>Gets or sets the item at a specified index.<para>In C#, this property is the indexer for the class.</para></summary>
            <param name="index">The index of the collection to access.</param>
            <value>An item at each valid index.</value>
            <remarks>This method is an indexer that can be used to access the collection.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index.</exception>
        </member>
        <member name="T:Mtime.Community.Utility.Logger">
            <summary>
            Log4net兼容
            </summary>
        </member>
        <member name="T:ProtoBuf.Extensible">
            <summary>
            Simple base class for supporting unexpected fields allowing
            for loss-less round-tips/merge, even if the data is not understod.
            The additional fields are (by default) stored in-memory in a buffer.
            </summary>
            <remarks>As an example of an alternative implementation, you might
            choose to use the file system (temporary files) as the back-end, tracking
            only the paths [such an object would ideally be IDisposable and use
            a finalizer to ensure that the files are removed].</remarks>
            <seealso cref="T:ProtoBuf.IExtensible"/>
        </member>
        <member name="T:ProtoBuf.IExtensible">
            <summary>
            Indicates that the implementing type has support for protocol-buffer
            <see cref="T:ProtoBuf.IExtension">extensions</see>.
            </summary>
            <remarks>Can be implemented by deriving from <see cref="T:ProtoBuf.Extensible"/>.</remarks>
        </member>
        <member name="M:ProtoBuf.IExtensible.GetExtensionObject(System.Boolean)">
            <summary>
            Retrieves the <see cref="T:ProtoBuf.IExtension">extension</see> object for the current
            instance, optionally creating it if it does not already exist.
            </summary>
            <param name="createIfMissing">Should a new extension object be
            created if it does not already exist?</param>
            <returns>The extension object if it exists (or was created), or null
            if the extension object does not exist or is not available.</returns>
            <remarks>The <c>createIfMissing</c> argument is false during serialization,
            and true during deserialization upon encountering unexpected fields.</remarks>
        </member>
        <member name="M:ProtoBuf.Extensible.GetExtensionObject(System.Boolean)">
            <summary>
            Retrieves the <see cref="T:ProtoBuf.IExtension">extension</see> object for the current
            instance, optionally creating it if it does not already exist.
            </summary>
            <param name="createIfMissing">Should a new extension object be
            created if it does not already exist?</param>
            <returns>The extension object if it exists (or was created), or null
            if the extension object does not exist or is not available.</returns>
            <remarks>The <c>createIfMissing</c> argument is false during serialization,
            and true during deserialization upon encountering unexpected fields.</remarks>
        </member>
        <member name="M:ProtoBuf.Extensible.GetExtensionObject(ProtoBuf.IExtension@,System.Boolean)">
            <summary>
            Provides a simple, default implementation for <see cref="T:ProtoBuf.IExtension">extension</see> support,
            optionally creating it if it does not already exist. Designed to be called by
            classes implementing <see cref="T:ProtoBuf.IExtensible"/>.
            </summary>
            <param name="createIfMissing">Should a new extension object be
            created if it does not already exist?</param>
            <param name="extensionObject">The extension field to check (and possibly update).</param>
            <returns>The extension object if it exists (or was created), or null
            if the extension object does not exist or is not available.</returns>
            <remarks>The <c>createIfMissing</c> argument is false during serialization,
            and true during deserialization upon encountering unexpected fields.</remarks>
        </member>
        <member name="M:ProtoBuf.Extensible.AppendValue``1(ProtoBuf.IExtensible,System.Int32,``0)">
            <summary>
            Appends the value as an additional (unexpected) data-field for the instance.
            Note that for non-repeated sub-objects, this equates to a merge operation;
            for repeated sub-objects this adds a new instance to the set; for simple
            values the new value supercedes the old value.
            </summary>
            <remarks>Note that appending a value does not remove the old value from
            the stream; avoid repeatedly appending values for the same field.</remarks>
            <typeparam name="TValue">The type of the value to append.</typeparam>
            <param name="instance">The extensible object to append the value to.</param>
            <param name="tag">The field identifier; the tag should not be defined as a known data-field for the instance.</param>
            <param name="value">The value to append.</param>
        </member>
        <member name="M:ProtoBuf.Extensible.AppendValue``1(ProtoBuf.IExtensible,System.Int32,ProtoBuf.DataFormat,``0)">
            <summary>
            Appends the value as an additional (unexpected) data-field for the instance.
            Note that for non-repeated sub-objects, this equates to a merge operation;
            for repeated sub-objects this adds a new instance to the set; for simple
            values the new value supercedes the old value.
            </summary>
            <remarks>Note that appending a value does not remove the old value from
            the stream; avoid repeatedly appending values for the same field.</remarks>
            <typeparam name="TValue">The data-type of the field.</typeparam>
            <param name="format">The data-format to use when encoding the value.</param>
            <param name="instance">The extensible object to append the value to.</param>
            <param name="tag">The field identifier; the tag should not be defined as a known data-field for the instance.</param>
            <param name="value">The value to append.</param>
        </member>
        <member name="M:ProtoBuf.Extensible.AppendValue``1(ProtoBuf.Meta.TypeModel,ProtoBuf.IExtensible,System.Int32,ProtoBuf.DataFormat,``0)">
            <summary>
            Appends the value as an additional (unexpected) data-field for the instance.
            Note that for non-repeated sub-objects, this equates to a merge operation;
            for repeated sub-objects this adds a new instance to the set; for simple
            values the new value supercedes the old value.
            </summary>
            <remarks>Note that appending a value does not remove the old value from
            the stream; avoid repeatedly appending values for the same field.</remarks>
            <typeparam name="TValue">The data-type of the field.</typeparam>
            <param name="model">The model that represents the data.</param>
            <param name="format">The data-format to use when encoding the value.</param>
            <param name="instance">The extensible object to append the value to.</param>
            <param name="tag">The field identifier; the tag should not be defined as a known data-field for the instance.</param>
            <param name="value">The value to append.</param>
        </member>
        <member name="M:ProtoBuf.Extensible.GetValue``1(ProtoBuf.IExtensible,System.Int32)">
            <summary>
            Queries an extensible object for an additional (unexpected) data-field for the instance.
            The value returned is the composed value after merging any duplicated content; if the
            value is "repeated" (a list), then use GetValues instead.
            </summary>
            <typeparam name="TValue">The data-type of the field.</typeparam>
            <param name="instance">The extensible object to obtain the value from.</param>
            <param name="tag">The field identifier; the tag should not be defined as a known data-field for the instance.</param>
            <returns>The effective value of the field, or the default value if not found.</returns>
        </member>
        <member name="M:ProtoBuf.Extensible.GetValue``1(ProtoBuf.IExtensible,System.Int32,ProtoBuf.DataFormat)">
            <summary>
            Queries an extensible object for an additional (unexpected) data-field for the instance.
            The value returned is the composed value after merging any duplicated content; if the
            value is "repeated" (a list), then use GetValues instead.
            </summary>
            <typeparam name="TValue">The data-type of the field.</typeparam>
            <param name="instance">The extensible object to obtain the value from.</param>
            <param name="tag">The field identifier; the tag should not be defined as a known data-field for the instance.</param>
            <param name="format">The data-format to use when decoding the value.</param>
            <returns>The effective value of the field, or the default value if not found.</returns>
        </member>
        <member name="M:ProtoBuf.Extensible.TryGetValue``1(ProtoBuf.IExtensible,System.Int32,``0@)">
            <summary>
            Queries an extensible object for an additional (unexpected) data-field for the instance.
            The value returned (in "value") is the composed value after merging any duplicated content;
            if the value is "repeated" (a list), then use GetValues instead.
            </summary>
            <typeparam name="TValue">The data-type of the field.</typeparam>
            <param name="value">The effective value of the field, or the default value if not found.</param>
            <param name="instance">The extensible object to obtain the value from.</param>
            <param name="tag">The field identifier; the tag should not be defined as a known data-field for the instance.</param>
            <returns>True if data for the field was present, false otherwise.</returns>
        </member>
        <member name="M:ProtoBuf.Extensible.TryGetValue``1(ProtoBuf.IExtensible,System.Int32,ProtoBuf.DataFormat,``0@)">
            <summary>
            Queries an extensible object for an additional (unexpected) data-field for the instance.
            The value returned (in "value") is the composed value after merging any duplicated content;
            if the value is "repeated" (a list), then use GetValues instead.
            </summary>
            <typeparam name="TValue">The data-type of the field.</typeparam>
            <param name="value">The effective value of the field, or the default value if not found.</param>
            <param name="instance">The extensible object to obtain the value from.</param>
            <param name="tag">The field identifier; the tag should not be defined as a known data-field for the instance.</param>
            <param name="format">The data-format to use when decoding the value.</param>
            <returns>True if data for the field was present, false otherwise.</returns>
        </member>
        <member name="M:ProtoBuf.Extensible.TryGetValue``1(ProtoBuf.IExtensible,System.Int32,ProtoBuf.DataFormat,System.Boolean,``0@)">
            <summary>
            Queries an extensible object for an additional (unexpected) data-field for the instance.
            The value returned (in "value") is the composed value after merging any duplicated content;
            if the value is "repeated" (a list), then use GetValues instead.
            </summary>
            <typeparam name="TValue">The data-type of the field.</typeparam>
            <param name="value">The effective value of the field, or the default value if not found.</param>
            <param name="instance">The extensible object to obtain the value from.</param>
            <param name="tag">The field identifier; the tag should not be defined as a known data-field for the instance.</param>
            <param name="format">The data-format to use when decoding the value.</param>
            <param name="allowDefinedTag">Allow tags that are present as part of the definition; for example, to query unknown enum values.</param>
            <returns>True if data for the field was present, false otherwise.</returns>
        </member>
        <member name="M:ProtoBuf.Extensible.GetValues``1(ProtoBuf.IExtensible,System.Int32)">
            <summary>
            Queries an extensible object for an additional (unexpected) data-field for the instance.
            Each occurrence of the field is yielded separately, making this usage suitable for "repeated"
            (list) fields.
            </summary>
            <remarks>The extended data is processed lazily as the enumerator is iterated.</remarks>
            <typeparam name="TValue">The data-type of the field.</typeparam>
            <param name="instance">The extensible object to obtain the value from.</param>
            <param name="tag">The field identifier; the tag should not be defined as a known data-field for the instance.</param>
            <returns>An enumerator that yields each occurrence of the field.</returns>
        </member>
        <member name="M:ProtoBuf.Extensible.GetValues``1(ProtoBuf.IExtensible,System.Int32,ProtoBuf.DataFormat)">
            <summary>
            Queries an extensible object for an additional (unexpected) data-field for the instance.
            Each occurrence of the field is yielded separately, making this usage suitable for "repeated"
            (list) fields.
            </summary>
            <remarks>The extended data is processed lazily as the enumerator is iterated.</remarks>
            <typeparam name="TValue">The data-type of the field.</typeparam>
            <param name="instance">The extensible object to obtain the value from.</param>
            <param name="tag">The field identifier; the tag should not be defined as a known data-field for the instance.</param>
            <param name="format">The data-format to use when decoding the value.</param>
            <returns>An enumerator that yields each occurrence of the field.</returns>
        </member>
        <member name="M:ProtoBuf.Compiler.CompilerContext.LoadNullRef">
            <summary>
            Pushes a null reference onto the stack. Note that this should only
            be used to return a null (or set a variable to null); for null-tests
            use BranchIfTrue / BranchIfFalse.
            </summary>
        </member>
        <member name="M:ProtoBuf.Compiler.CompilerContext.UsingBlock.#ctor(ProtoBuf.Compiler.CompilerContext,ProtoBuf.Compiler.Local)">
            <summary>
            Creates a new "using" block (equivalent) around a variable;
            the variable must exist, and note that (unlike in C#) it is
            the variables *final* value that gets disposed. If you need
            *original* disposal, copy your variable first.
            
            It is the callers responsibility to ensure that the variable's
            scope fully-encapsulates the "using"; if not, the variable
            may be re-used (and thus re-assigned) unexpectedly.
            </summary>
        </member>
        <member name="T:Mtime.Community.Utility.OAuth.OAuthHttpBase">
            <summary>
            OAuth基础类
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.OAuth.OAuthBase.ComputeHash(System.Security.Cryptography.HashAlgorithm,System.String)">
            <summary>
            Helper function to compute a hash value
            </summary>
            <param name="hashAlgorithm">The hashing algoirhtm used. If that algorithm needs some initialization, like HMAC and its derivatives, they should be initialized prior to passing it to this function</param>
            <param name="data">The data to hash</param>
            <returns>a Base64 string of the hash value</returns>
        </member>
        <member name="M:Mtime.Community.Utility.OAuth.OAuthBase.GetQueryParameters(System.String)">
            <summary>
            Internal function to cut out all non oauth query string parameters (all parameters not begining with "oauth_")
            </summary>
            <param name="parameters">The query string part of the Url</param>
            <returns>A list of QueryParameter each containing the parameter name and value</returns>
        </member>
        <member name="M:Mtime.Community.Utility.OAuth.OAuthBase.UrlEncode(System.String)">
            <summary>
            This is a different Url Encode implementation since the default .NET one outputs the percent encoding in lower case.
            While this is not a problem with the percent encoding spec, it is used in upper case throughout OAuth
            </summary>
            <param name="value">The value to Url encode</param>
            <returns>Returns a Url encoded string</returns>
        </member>
        <member name="M:Mtime.Community.Utility.OAuth.OAuthBase.NormalizeRequestParameters(System.Collections.Generic.IList{Mtime.Community.Utility.OAuth.OAuthBase.QueryParameter})">
            <summary>
            Normalizes the request parameters according to the spec
            </summary>
            <param name="parameters">The list of parameters already sorted</param>
            <returns>a string representing the normalized parameters</returns>
        </member>
        <member name="M:Mtime.Community.Utility.OAuth.OAuthBase.GenerateSignatureBase(System.Uri,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String@,System.String@)">
            <summary>
            Generate the signature base that is used to produce the signature
            </summary>
            <param name="url">The full url that needs to be signed including its non OAuth url parameters</param>
            <param name="consumerKey">The consumer key</param>        
            <param name="token">The token, if available. If not available pass null or an empty string</param>
            <param name="tokenSecret">The token secret, if available. If not available pass null or an empty string</param>
            <param name="httpMethod">The http method used. Must be a valid HTTP method verb (POST,GET,PUT, etc)</param>
            <param name="signatureType">The signature type. To use the default values use <see cref="T:Mtime.Community.Utility.OAuth.OAuthBase.SignatureTypes">OAuthBase.SignatureTypes</see>.</param>
            <returns>The signature base</returns>
        </member>
        <member name="M:Mtime.Community.Utility.OAuth.OAuthBase.GenerateSignatureUsingHash(System.String,System.Security.Cryptography.HashAlgorithm)">
            <summary>
            Generate the signature value based on the given signature base and hash algorithm
            </summary>
            <param name="signatureBase">The signature based as produced by the GenerateSignatureBase method or by any other means</param>
            <param name="hash">The hash algorithm used to perform the hashing. If the hashing algorithm requires initialization or a key it should be set prior to calling this method</param>
            <returns>A base64 string of the hash value</returns>
        </member>
        <member name="M:Mtime.Community.Utility.OAuth.OAuthBase.GenerateSignature(System.Uri,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String@,System.String@)">
            <summary>
            Generates a signature using the HMAC-SHA1 algorithm
            </summary>		
            <param name="url">The full url that needs to be signed including its non OAuth url parameters</param>
            <param name="consumerKey">The consumer key</param>
            <param name="consumerSecret">The consumer seceret</param>
            <param name="token">The token, if available. If not available pass null or an empty string</param>
            <param name="tokenSecret">The token secret, if available. If not available pass null or an empty string</param>
            <param name="httpMethod">The http method used. Must be a valid HTTP method verb (POST,GET,PUT, etc)</param>
            <returns>A base64 string of the hash value</returns>
        </member>
        <member name="M:Mtime.Community.Utility.OAuth.OAuthBase.GenerateSignature(System.Uri,System.String,System.String,System.String,System.String,System.String,System.String,System.String,Mtime.Community.Utility.OAuth.OAuthBase.SignatureTypes,System.String@,System.String@)">
            <summary>
            Generates a signature using the specified signatureType 
            </summary>		
            <param name="url">The full url that needs to be signed including its non OAuth url parameters</param>
            <param name="consumerKey">The consumer key</param>
            <param name="consumerSecret">The consumer seceret</param>
            <param name="token">The token, if available. If not available pass null or an empty string</param>
            <param name="tokenSecret">The token secret, if available. If not available pass null or an empty string</param>
            <param name="httpMethod">The http method used. Must be a valid HTTP method verb (POST,GET,PUT, etc)</param>
            <param name="signatureType">The type of signature to use</param>
            <returns>A base64 string of the hash value</returns>
        </member>
        <member name="M:Mtime.Community.Utility.OAuth.OAuthBase.GenerateTimeStamp">
            <summary>
            Generate the timestamp for the signature        
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.OAuth.OAuthBase.GenerateNonce">
            <summary>
            Generate a nonce
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mtime.Community.Utility.OAuth.OAuthBase.SignatureTypes">
            <summary>
            Provides a predefined set of algorithms that are supported officially by the protocol
            </summary>
        </member>
        <member name="T:Mtime.Community.Utility.OAuth.OAuthBase.QueryParameter">
            <summary>
            Provides an internal structure to sort the query parameter
            </summary>
        </member>
        <member name="T:Mtime.Community.Utility.OAuth.OAuthBase.QueryParameterComparer">
            <summary>
            Comparer class used to perform the sorting of the query parameters
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.OAuth.OAuthHttpBase.GetResponse(System.String)">
            <summary>
            获取一个请求
            </summary>
            <param name="method">方法</param>
            <param name="url">地址</param>
        </member>
        <member name="M:Mtime.Community.Utility.OAuth.OAuthHttpBase.GetAuthorizationUrl">
            <summary>
            获取可用的认证URL地址
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.OAuth.OAuthHttpBase.GetRequestToken">
            <summary>
            获取RequestToken
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.OAuth.OAuthHttpBase.GetAccessToken">
            <summary>
            获取AccessToken
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.OAuth.OAuthHttpBase.AppKey">
            <summary>
            获取或设置应用(默认配置名: app_key)
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.OAuth.OAuthHttpBase.AppSecret">
            <summary>
            获取或设置应用安全码(默认配置名: app_secret)
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.OAuth.OAuthHttpBase.UrlAccessToken">
            <summary>
            获取或设置AccessToken地址(默认配置名: url_accesstoken)
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.OAuth.OAuthHttpBase.UrlAuthorize">
            <summary>
            获取或设置Authorize认证址址(默认配置名:url_authorize)
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.OAuth.OAuthHttpBase.UrlRequestToken">
            <summary>
            获取或设置RequestToken请求地址(默认配置名:url_requesttoken)
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.OAuth.OAuthHttpBase.UrlCallback">
            <summary>
            返回url
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.OAuth.OAuthHttpBase.Token">
            <summary>
            获取或设置当前Token
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.OAuth.OAuthHttpBase.TokenSecret">
            <summary>
            获取或设置当前Token安全码
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.OAuth.OAuthHttpBase.Verifier">
            <summary>
            获取或设置通信中需要的认证码
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.OAuth.Weibo.OAuthNetease.GetAuthorizationUrl">
            <summary>
            获取认证URL
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mtime.Community.Utility.zxing.common.reedsolomon.ReedSolomonException">
            <summary> <p>Thrown when an exception occurs during Reed-Solomon decoding, such as when
            there are too many errors to correct.</p>
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="M:Mtime.Community.Utility.RemoteService.Protocol.OperationBase.GetRequestString">
            <summary>
            调试
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.RemoteService.Protocol.Operation.SendCommandBody(System.Text.StringBuilder)">
            <summary>
            Debug
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:Mtime.Community.Utility.TransferDayIndexInYear.GetDayID(System.Int32,System.Int32)">
            <summary>
            根据月编号(1-12) 和日编号(1-31)得到唯一4位整数
            1月1日转位 1111  12月31日转为2241
            </summary>
            <param name="idMonth"></param>
            <param name="idDay"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.TransferDayIndexInYear.GetMonthByDayID(System.Int32)">
            <summary>
            根据id得到月份编号 1－12
            </summary>
            <param name="idInYear"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.TransferDayIndexInYear.GetDayByDayID(System.Int32)">
            <summary>
            根据id得到日期编号 1-31
            </summary>
            <param name="idInYear"></param>
            <returns></returns>
        </member>
        <member name="T:GifUtility.PaletteHelper">
            <summary>
            调色板辅助类
            </summary>
        </member>
        <member name="M:GifUtility.PaletteHelper.GetColor32s(System.Byte[])">
            <summary>
            从数据流中获取颜色列表
            </summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="F:Mtime.EPay.AliPayLogisticsPayment.SELLER_PAY">
            <summary>
            由卖家支付物流费用（费用不用计算到总价内）
            </summary>
        </member>
        <member name="F:Mtime.EPay.AliPayLogisticsPayment.BUYER_PAY">
            <summary>
            买家支付物流费用（费用需要计算到总价内） 
            </summary>
        </member>
        <member name="F:Mtime.EPay.AliPayLogisticsPayment.BUYER_PAY_AFTER_RECEIVE">
            <summary>
            买家收到货物后直接支付给物流公司（费用不用计算到总价内）
            </summary>
        </member>
        <member name="T:Mtime.Community.Utility.ReflectorHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.ReflectorHelper.CreateInstance(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.ReflectorHelper.CallMethod(System.Object,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="obj">null</param>
            <param name="methodName"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.ReflectorHelper.CreateSetMethod(System.Type,System.String)">
            
             Creates a dynamic setter for the property
            
        </member>
        <member name="M:Mtime.Community.Utility.ReflectorHelper.CreateGetMethod(System.Type,System.String)">
            
             Creates a dynamic getter for the property
            
        </member>
        <member name="M:Mtime.Community.Utility.ReflectorHelper.TryGetCollectionItemType(System.Type,System.Type@)">
            <summary>
            Gets the type of the typed collection's items.
            </summary>
            <param name="type">The type.</param>
            <returns>The type of the typed collection's items.</returns>
        </member>
        <member name="M:Mtime.Community.Utility.ReflectorHelper.EmitBoxIfNeeded(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>Boxes a type if needed.</summary>
            <param name="ilGenerator">The MSIL generator.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Mtime.Community.Utility.ReflectorHelper.EmitFastInt(System.Reflection.Emit.ILGenerator,System.Int32)">
            <summary>Emits code to save an integer to the evaluation stack.</summary>
            <param name="ilGeneartor">The MSIL generator.</param>
            <param name="value">The value to push.</param>
        </member>
        <member name="M:Mtime.Community.Utility.ReflectorHelper.EmitCastToReference(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>Emits the cast to a reference, unboxing if needed.</summary>
            <param name="il">The MSIL generator.</param>
            <param name="type">The type to cast.</param>
        </member>
        <member name="T:Mtime.MongoDB.Protocol.KillCursorsMessage">
            <summary>
            Description of KillCursorsMessage.
            </summary>
            <remarks>
                 struct {
                     MsgHeader header;                 // standard message header
                     int32     ZERO;                   // 0 - reserved for future use
                     int32     numberOfCursorIDs;      // number of cursorIDs in message
                     int64[]   cursorIDs;              // array of cursorIDs to close
                 }
            </remarks>
        </member>
        <member name="T:Mtime.MongoDB.MongoCommandException">
            <summary>
            Raised when a command returns a failure message. 
            </summary>
        </member>
        <member name="M:Mtime.MongoDB.MongoCommandException.#ctor(System.String,Mtime.MongoDB.Document,Mtime.MongoDB.Document)">
            <summary>
            Initializes a new instance of the <see cref="T:Mtime.MongoDB.MongoCommandException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="error">The error.</param>
            <param name="command">The command.</param>
        </member>
        <member name="M:Mtime.MongoDB.MongoCommandException.#ctor(System.String,Mtime.MongoDB.Document,Mtime.MongoDB.Document,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Mtime.MongoDB.MongoCommandException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="error">The error.</param>
            <param name="command">The command.</param>
            <param name="e">The e.</param>
        </member>
        <member name="P:Mtime.MongoDB.MongoCommandException.Error">
            <summary>
            Gets or sets the error.
            </summary>
            <value>The error.</value>
        </member>
        <member name="P:Mtime.MongoDB.MongoCommandException.Command">
            <summary>
            Gets or sets the command.
            </summary>
            <value>The command.</value>
        </member>
        <member name="T:Mtime.MongoDB.Communication.ConnectionSocket">
            <summary>
            用于连接池管理的Socket封装类
            </summary>
        </member>
        <member name="M:Mtime.MongoDB.Communication.ConnectionSocket.#ctor(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="host">主机</param>
            <param name="port">端口</param>
            <param name="lifetime">连接生存时间(单位秒)</param>
            <param name="timeout">连接超时时间(单位秒)</param>
        </member>
        <member name="M:Mtime.MongoDB.Communication.ConnectionSocket.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Mtime.MongoDB.Communication.ConnectionSocket"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:Mtime.MongoDB.Communication.ConnectionSocket.GetReadStream">
            <summary>
            获取读数据流
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mtime.MongoDB.Communication.ConnectionSocket.Send(System.IO.MemoryStream)">
            <summary>
            发送数据流
            </summary>
            <param name="ms"></param>
        </member>
        <member name="M:Mtime.MongoDB.Communication.ConnectionSocket.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Mtime.MongoDB.Communication.ConnectionSocket.ExpiredTime">
            <summary>
            获取或设置连接的过期时间
            </summary>
        </member>
        <member name="P:Mtime.MongoDB.Communication.ConnectionSocket.ID">
            <summary>
            获取或设置连接ID
            </summary>
        </member>
        <member name="P:Mtime.MongoDB.Communication.ConnectionSocket.IsValid">
            <summary>
            连接是否有效
            </summary>
            <returns></returns>
        </member>
        <member name="P:Mtime.MongoDB.Communication.ConnectionSocket.IsConnected">
            <summary>
            获取Socket是否已建立连接
            </summary>
        </member>
        <member name="P:Mtime.MongoDB.Communication.ConnectionSocket.IsAuthenticated">
            <summary>
            Gets or sets a value indicating whether this instance is authenticated.
            </summary>
            <value>
            	<c>true</c> if this instance is authenticated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Mtime.MongoDB.Communication.ConnectionSocket.StackTrace">
            <summary>
            被分配时的调用栈，调试用
            </summary>
        </member>
        <member name="P:Mtime.MongoDB.Communication.ConnectionSocket.ThreadId">
            <summary>
            被分配时的线程Id
            </summary>
        </member>
        <member name="T:Mtime.MongoDB.Communication.ReadOnlySocketStream">
            <summary>
            高性能只读Socket流
            </summary>
        </member>
        <member name="M:Mtime.MongoDB.Communication.ReadOnlySocketStream.Reset">
            <summary>
            重置流(会清除缓存中剩余数据)
            </summary>
        </member>
        <member name="T:Mtime.Community.Utility.Client.ByteSegmentComparer">
            <summary>
            A comparer (for dictionary use) that can compare segments of buffers; the
            intent being to avoid having to encode/decode strings
            </summary>
            <remarks>It is the responsibility of the consuming code not to mutate
            the byte[] in a dictionary</remarks>
        </member>
        <member name="P:Mtime.Community.Utility.BaofengXML.BaofengIndexXML.Items">
            <summary>
            记录的集合
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Tar.InvalidHeaderException">
            <summary>
            This exception is used to indicate that there is a problem
            with a TAR archive header.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Tar.TarException">
            <summary>
            TarExceptions are used for exceptions specific to tar classes and code.	
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor 
            </summary>
            <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo"/> for this constructor</param>
            <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext"/> for this constructor</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarException.#ctor">
            <summary>
            Initialises a new instance of the TarException class.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarException.#ctor(System.String)">
            <summary>
            Initialises a new instance of the TarException class with a specified message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message">A message describing the error.</param>
            <param name="exception">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.InvalidHeaderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor 
            </summary>
            <param name="information"><see cref="T:System.Runtime.Serialization.SerializationInfo"/> for this constructor</param>
            <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext"/> for this constructor</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.InvalidHeaderException.#ctor">
            <summary>
            Initialise a new instance of the InvalidHeaderException class.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.InvalidHeaderException.#ctor(System.String)">
            <summary>
            Initialises a new instance of the InvalidHeaderException class with a specified message.
            </summary>
            <param name="message">Message describing the exception cause.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.InvalidHeaderException.#ctor(System.String,System.Exception)">
            <summary>
            Initialise a new instance of InvalidHeaderException
            </summary>
            <param name="message">Message describing the problem.</param>
            <param name="exception">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:Mtime.Community.Utility.URLRewriter.RewriterUtils">
            <summary>
            Provides utility helper methods for the rewriting HttpModule and HttpHandler.
            </summary>
            <remarks>This class is marked as internal, meaning only classes in the same assembly will be
            able to access its methods.</remarks>
        </member>
        <member name="M:Mtime.Community.Utility.URLRewriter.RewriterUtils.RewriteUrl(System.Web.HttpContext,System.String)">
            <summary>
            Rewrite's a URL using <b>HttpContext.RewriteUrl()</b>.
            </summary>
            <param name="context">The HttpContext object to rewrite the URL to.</param>
            <param name="sendToUrl">The URL to rewrite to.</param>
        </member>
        <member name="M:Mtime.Community.Utility.URLRewriter.RewriterUtils.RewriteUrl(System.Web.HttpContext,System.String,System.String@)">
            <summary>
            Rewrite's a URL using <b>HttpContext.RewriteUrl()</b>.
            </summary>
            <param name="context">The HttpContext object to rewrite the URL to.</param>
            <param name="sendToUrl">The URL to rewrite to.</param>
            <param name="sendToUrlLessQString">Returns the value of sendToUrl stripped of the querystring.</param>
            <param name="filePath">Returns the physical file path to the requested page.</param>
        </member>
        <member name="M:Mtime.Community.Utility.URLRewriter.RewriterUtils.ResolveUrl(System.String,System.String)">
            <summary>
            Converts a URL into one that is usable on the requesting client.
            </summary>
            <remarks>Converts ~ to the requesting application path.  Mimics the behavior of the 
            <b>Control.ResolveUrl()</b> method, which is often used by control developers.</remarks>
            <param name="appPath">The application path.</param>
            <param name="url">The URL, which might contain ~.</param>
            <returns>A resolved URL.  If the input parameter <b>url</b> contains ~, it is replaced with the
            value of the <b>appPath</b> parameter.</returns>
        </member>
        <member name="T:Mtime.Community.Utility.Server.ClientConfigSection">
            <summary>
            Configures the <see cref="T:MemcachedClient"/>. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.Server.ClientConfigSection.PostDeserialize">
            <summary>
            Called after deserialization.
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.Server.ClientConfigSection.Server">
            <summary>
            Returns a collection of Memcached servers which can be used by the client.
            </summary>
        </member>
        <member name="T:Rss.RssPhotoAlbumCategoryPhotoPeople">
            <summary>People in a photo</summary>
        </member>
        <member name="M:Rss.RssPhotoAlbumCategoryPhotoPeople.#ctor">
            <summary>Initialize a new instance of the RssPhotoAlbumItemPhotoPeople class</summary>
        </member>
        <member name="M:Rss.RssPhotoAlbumCategoryPhotoPeople.#ctor(System.String)">
            <summary>Initialize a new instance of the RssPhotoAlbumItemPhotoPeople class</summary>
            <param name="value">Name of person</param>
        </member>
        <member name="M:Rss.RssPhotoAlbumCategoryPhotoPeople.Add(System.String)">
            <summary>Add a person to the photo</summary>
            <param name="value">Name of person</param>
            <returns>The zero-based index of the added item</returns>
        </member>
        <member name="T:Rss.RssPhotoAlbumCategoryPhotos">
            <summary>A collection of photos in a category</summary>
        </member>
        <member name="M:Rss.RssPhotoAlbumCategoryPhotos.#ctor">
            <summary>Initialize a new instance of the RssPhotoAlbumItemPhoto class</summary>
        </member>
        <member name="M:Rss.RssPhotoAlbumCategoryPhotos.Add(Rss.RssPhotoAlbumCategoryPhoto)">
            <summary>Adds a sepecified photo to this collection.</summary>
            <param name="photo">The photo to add.</param>
            <returns>The zero-based index of the added item.</returns>
        </member>
        <member name="T:Rss.RssPhotoAlbumCategoryPhoto">
            <summary>A photo in the category</summary>
        </member>
        <member name="M:Rss.RssPhotoAlbumCategoryPhoto.#ctor(System.DateTime,System.String,System.Uri)">
            <summary>Initialize a new instance of the RssPhotoAlbumItemPhoto class</summary>
            <param name="photoDate">Date of the Photo</param>
            <param name="photoDescription">Description of the photo.</param>
            <param name="photoLink">Direct link of the photo.</param>
        </member>
        <member name="M:Rss.RssPhotoAlbumCategoryPhoto.#ctor(System.DateTime,System.String,System.Uri,Rss.RssPhotoAlbumCategoryPhotoPeople)">
            <summary>Initialize a new instance of the RssPhotoAlbumItemPhoto class</summary>
            <param name="photoDate">Date of the Photo</param>
            <param name="photoDescription">Description of the photo.</param>
            <param name="photoPeople">People to add to the photo.</param>
            <param name="photoLink">Direct link of the photo.</param>
        </member>
        <member name="M:Rss.RssPhotoAlbumCategoryPhoto.Add(System.DateTime,System.String,System.Uri,Rss.RssPhotoAlbumCategoryPhotoPeople)">
            <summary>Adds a specified item to this collection.</summary>
            <param name="photoDate">Date of the Photo</param>
            <param name="photoDescription">Description of the photo.</param>
            <param name="photoPeople">People to add to the photo.</param>
            <param name="photoLink">Direct link of the photo.</param>
            <returns>The zero-based index of the added item.</returns>
        </member>
        <member name="M:Rss.RssPhotoAlbumCategoryPhoto.Add(System.DateTime,System.String,System.Uri)">
            <summary>Adds a specified item to this collection.</summary>
            <param name="photoDate">Date of the Photo</param>
            <param name="photoDescription">Description of the photo.</param>
            <param name="photoLink">Direct link of the photo.</param>
            <returns>The zero-based index of the added item.</returns>
        </member>
        <member name="M:Rss.RssPhotoAlbumCategoryPhoto.#ctor(System.String,System.String,System.Uri)">
            <summary>Initialize a new instance of the RssPhotoAlbumItemPhoto class</summary>
            <param name="photoDate">Date of the Photo</param>
            <param name="photoDescription">Description of the photo.</param>
            <param name="photoLink">Direct link of the photo.</param>
        </member>
        <member name="M:Rss.RssPhotoAlbumCategoryPhoto.#ctor(System.String,System.String,System.Uri,Rss.RssPhotoAlbumCategoryPhotoPeople)">
            <summary>Initialize a new instance of the RssPhotoAlbumItemPhoto class</summary>
            <param name="photoDate">Date of the Photo</param>
            <param name="photoDescription">Description of the photo.</param>
            <param name="photoPeople">People to add to the photo.</param>
            <param name="photoLink">Direct link of the photo.</param>
        </member>
        <member name="M:Rss.RssPhotoAlbumCategoryPhoto.Add(System.String,System.String,System.Uri,Rss.RssPhotoAlbumCategoryPhotoPeople)">
            <summary>Adds a specified item to this collection.</summary>
            <param name="photoDate">Date of the Photo</param>
            <param name="photoDescription">Description of the photo.</param>
            <param name="photoPeople">People to add to the photo.</param>
            <param name="photoLink">Direct link of the photo.</param>
            <returns>The zero-based index of the added item.</returns>
        </member>
        <member name="M:Rss.RssPhotoAlbumCategoryPhoto.Add(System.String,System.String,System.Uri)">
            <summary>Adds a specified item to this collection.</summary>
            <param name="photoDate">Date of the Photo</param>
            <param name="photoDescription">Description of the photo.</param>
            <param name="photoLink">Direct link of the photo.</param>
            <returns>The zero-based index of the added item.</returns>
        </member>
        <member name="T:Rss.RssPhotoAlbumCategories">
            <summary>A collection of categories in a photo album</summary>
        </member>
        <member name="M:Rss.RssPhotoAlbumCategories.#ctor">
            <summary>Initialize a new instance of the RssPhotoAlbumItemPhoto class</summary>
        </member>
        <member name="M:Rss.RssPhotoAlbumCategories.Add(Rss.RssPhotoAlbumCategory)">
            <summary>Adds a sepecified category to this collection.</summary>
            <param name="category">The category to add.</param>
            <returns>The zero-based index of the added item.</returns>
        </member>
        <member name="T:Rss.RssPhotoAlbumCategory">
            <summary>A Photo Album category</summary>
        </member>
        <member name="M:Rss.RssPhotoAlbumCategory.#ctor(System.String,System.String,System.DateTime,System.DateTime,Rss.RssPhotoAlbumCategoryPhoto)">
            <summary>Initialize a new instance of the RssPhotoAlbumItem class</summary>
            <param name="categoryName">Name of the category.</param>
            <param name="categoryDescription">Description of the category.</param>
            <param name="categoryDateFrom">From date of the category.</param>
            <param name="categoryDateTo">To date of the category.</param>
            <param name="categoryPhoto">Photos of the category.</param>
        </member>
        <member name="M:Rss.RssPhotoAlbumCategory.Add(System.String,System.String,System.DateTime,System.DateTime,Rss.RssPhotoAlbumCategoryPhoto)">
            <summary>Adds a specified category to this collection.</summary>
            <param name="categoryName">Name of the category.</param>
            <param name="categoryDescription">Description of the category.</param>
            <param name="categoryDateFrom">From date of the category.</param>
            <param name="categoryDateTo">To date of the category.</param>
            <param name="categoryPhoto">Photos of the category.</param>
            <returns>The zero-based index of the added item.</returns>
        </member>
        <member name="M:Rss.RssPhotoAlbumCategory.#ctor(System.String,System.String,System.String,System.String,Rss.RssPhotoAlbumCategoryPhoto)">
            <summary>Initialize a new instance of the RssPhotoAlbumItem class</summary>
            <param name="categoryName">Name of the category.</param>
            <param name="categoryDescription">Description of the category.</param>
            <param name="categoryDateFrom">From date of the category.</param>
            <param name="categoryDateTo">To date of the category.</param>
            <param name="categoryPhoto">Photos of the category.</param>
        </member>
        <member name="M:Rss.RssPhotoAlbumCategory.Add(System.String,System.String,System.String,System.String,Rss.RssPhotoAlbumCategoryPhoto)">
            <summary>Adds a specified category to this collection.</summary>
            <param name="categoryName">Name of the category.</param>
            <param name="categoryDescription">Description of the category.</param>
            <param name="categoryDateFrom">From date of the category.</param>
            <param name="categoryDateTo">To date of the category.</param>
            <param name="categoryPhoto">Photos of the category.</param>
            <returns>The zero-based index of the added item.</returns>
        </member>
        <member name="M:Rss.RssPhotoAlbumCategory.#ctor(System.String,System.String,System.DateTime,System.DateTime,Rss.RssPhotoAlbumCategoryPhotos)">
            <summary>Initialize a new instance of the RssPhotoAlbumItem class</summary>
            <param name="categoryName">Name of the category.</param>
            <param name="categoryDescription">Description of the category.</param>
            <param name="categoryDateFrom">From date of the category.</param>
            <param name="categoryDateTo">To date of the category.</param>
            <param name="categoryPhotos">Photos of the category.</param>
        </member>
        <member name="M:Rss.RssPhotoAlbumCategory.Add(System.String,System.String,System.DateTime,System.DateTime,Rss.RssPhotoAlbumCategoryPhotos)">
            <summary>Adds a specified category to this collection.</summary>
            <param name="categoryName">Name of the category.</param>
            <param name="categoryDescription">Description of the category.</param>
            <param name="categoryDateFrom">From date of the category.</param>
            <param name="categoryDateTo">To date of the category.</param>
            <param name="categoryPhotos">Photos of the category.</param>
            <returns>The zero-based index of the added item.</returns>
        </member>
        <member name="M:Rss.RssPhotoAlbumCategory.#ctor(System.String,System.String,System.String,System.String,Rss.RssPhotoAlbumCategoryPhotos)">
            <summary>Initialize a new instance of the RssPhotoAlbumItem class</summary>
            <param name="categoryName">Name of the category.</param>
            <param name="categoryDescription">Description of the category.</param>
            <param name="categoryDateFrom">From date of the category.</param>
            <param name="categoryDateTo">To date of the category.</param>
            <param name="categoryPhotos">Photos of the category.</param>
        </member>
        <member name="M:Rss.RssPhotoAlbumCategory.Add(System.String,System.String,System.String,System.String,Rss.RssPhotoAlbumCategoryPhotos)">
            <summary>Adds a specified category to this collection.</summary>
            <param name="categoryName">Name of the category.</param>
            <param name="categoryDescription">Description of the category.</param>
            <param name="categoryDateFrom">From date of the category.</param>
            <param name="categoryDateTo">To date of the category.</param>
            <param name="categoryPhotos">Photos of the category.</param>
            <returns>The zero-based index of the added item.</returns>
        </member>
        <member name="T:Rss.RssPhotoAlbum">
            <summary>RSS syndication for Robert A. Wlodarczyk's Photo Album application (to be sold by Inno Thinx LLC)</summary>
        </member>
        <member name="T:Rss.RssModule">
            <summary>Base class for all RSS modules</summary>
        </member>
        <member name="M:Rss.RssModule.#ctor">
            <summary>Initialize a new instance of the RssModule class</summary>
        </member>
        <member name="M:Rss.RssModule.BindTo(System.Int32)">
            <summary>Bind a particular channel to this module</summary>
            <param name="channelHashCode">Hash code of the channel</param>
        </member>
        <member name="M:Rss.RssModule.IsBoundTo(System.Int32)">
            <summary>Check if a particular channel is bound to this module</summary>
            <param name="channelHashCode">Hash code of the channel</param>
            <returns>true if this channel is bound to this module, otherwise false</returns>
        </member>
        <member name="P:Rss.RssModule.ChannelExtensions">
            <summary>Collection of RSSModuleItem that are to be placed in the channel</summary>
        </member>
        <member name="P:Rss.RssModule.ItemExtensions">
            <summary>Collection of RSSModuleItemCollection that are to be placed in the channel item</summary>
        </member>
        <member name="P:Rss.RssModule.NamespacePrefix">
            <summary>Prefix for the given module namespace</summary>
        </member>
        <member name="P:Rss.RssModule.NamespaceURL">
            <summary>URL for the given module namespace</summary>
        </member>
        <member name="M:Rss.RssPhotoAlbum.#ctor(System.Uri,Rss.RssPhotoAlbumCategory)">
            <summary>Initialize a new instance of the RssPhotoAlbum class</summary>
            <param name="link">Link to the Photo Album</param>
            <param name="photoAlbumCategory">The category of the Photo Album to add</param>
        </member>
        <member name="M:Rss.RssPhotoAlbum.#ctor(System.Uri,Rss.RssPhotoAlbumCategories)">
            <summary>Initialize a new instance of the RssPhotoAlbum class</summary>
            <param name="link">Link to the Photo Album</param>
            <param name="photoAlbumCategories">A collection of categories in the Photo Album to add</param>
        </member>
        <member name="P:Rss.RssPhotoAlbum.Link">
            <summary>Link element for channel</summary>
        </member>
        <member name="M:Mtime.Community.Utility.ExceptionService.Write(System.String,System.String)">
            <summary>
            写异常日志
            </summary>
            <param name="filePath">文件路径</param>
            <param name="Message">日志信息</param>
        </member>
        <member name="M:Mtime.Community.Utility.ExceptionService.CheckDir(System.String@)">
            <summary>
            检查一个目录是不是存在，如果不存在就创建
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="T:ProtoBuf.ProtoException">
            <summary>
            Indicates an error during serialization/deserialization of a proto stream.
            </summary>
        </member>
        <member name="M:ProtoBuf.ProtoException.#ctor">
            <summary>Creates a new ProtoException instance.</summary>
        </member>
        <member name="M:ProtoBuf.ProtoException.#ctor(System.String)">
            <summary>Creates a new ProtoException instance.</summary>
        </member>
        <member name="M:ProtoBuf.ProtoException.#ctor(System.String,System.Exception)">
            <summary>Creates a new ProtoException instance.</summary>
        </member>
        <member name="T:ProtoBuf.BufferExtension">
            <summary>
            Provides a simple buffer-based implementation of an <see cref="T:ProtoBuf.IExtension">extension</see> object.
            </summary>
        </member>
        <member name="T:Mtime.Community.Utility.OAuth.BinaryParameter">
            <summary>
            RAW数据型API参数
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.OAuth.BinaryParameter.IMAGE_MIME">
            <summary>
            图片MIME
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.OAuth.BinaryParameter.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.OAuth.BinaryParameter.#ctor(System.String,System.Byte[])">
            <summary>
            构造函数
            </summary>
            <param name="name">key</param>
            <param name="value">value</param>
        </member>
        <member name="P:Mtime.Community.Utility.OAuth.BinaryParameter.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.OAuth.BinaryParameter.MimeType">
            <summary>
            类型
            </summary>
        </member>
        <member name="T:Mtime.Community.Utility.Client.EndPointElementCollection">
            <summary>
            Represents a collection of <see cref="T:EndPointElement"/> instances. This class cannot be inherited.
            </summary>
        </member>
        <member name="T:Mtime.Community.Utility.XmlUtility">
            <summary>
            XML实用类
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.XmlUtility.GetNameValue(System.String,System.Object)">
            <summary>
            得到指定键名和值的XML字符串
            </summary>
            <param name="Name">键名</param>
            <param name="Value">值</param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.XmlUtility.LoadSerializedObject(System.Type,System.String)">
            <summary>
            XML反序列成对象
            </summary>
            <param name="type"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.XmlUtility.SerializeObject(System.Object,System.String)">
            <summary>
            将对象序列化成XML
            </summary>
            <param name="o">对象</param>
            <param name="filename">指定文件</param>
        </member>
        <member name="T:Newtonsoft.Json.WriteState">
            <summary>
            Specifies the state of the <see cref="T:Newtonsoft.Json.JsonWriter"/>.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.WriteState.Error">
            <summary>
            An exception has been thrown, which has left the <see cref="T:Newtonsoft.Json.JsonWriter"/> in an invalid state.
            You may call the <see cref="M:Newtonsoft.Json.JsonWriter.Close"/> method to put the <see cref="T:Newtonsoft.Json.JsonWriter"/> in the <c>Closed</c> state.
            Any other <see cref="T:Newtonsoft.Json.JsonWriter"/> method calls results in an <see cref="T:System.InvalidOperationException"/> being thrown. 
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.WriteState.Closed">
            <summary>
            The <see cref="M:Newtonsoft.Json.JsonWriter.Close"/> method has been called. 
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.WriteState.Object">
            <summary>
            An object is being written. 
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.WriteState.Array">
            <summary>
            A array is being written.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.WriteState.Property">
            <summary>
            A property is being written.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.WriteState.Start">
            <summary>
            A write method has not been called.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Formatting">
            <summary>
            Specifies formatting options for the <see cref="T:Newtonsoft.Json.JsonWriter"/>.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Formatting.None">
            <summary>
            No special formatting is applied. This is the default.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Formatting.Indented">
            <summary>
            Causes child objects to be indented according to the <see cref="P:Newtonsoft.Json.JsonWriter.Indentation"/> and <see cref="P:Newtonsoft.Json.JsonWriter.IndentChar"/> settings.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonWriter">
            <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating Json data.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.#ctor(System.IO.TextWriter)">
            <summary>
            Creates an instance of the <c>JsonWriter</c> class using the specified <see cref="T:System.IO.TextWriter"/>. 
            </summary>
            <param name="textWriter">The <c>TextWriter</c> to write to.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.Flush">
            <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.Close">
            <summary>
            Closes this stream and the underlying stream.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteStartObject">
            <summary>
            Writes the beginning of a Json object.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteEndObject">
            <summary>
            Writes the end of a Json object.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteStartArray">
            <summary>
            Writes the beginning of a Json array.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteEndArray">
            <summary>
            Writes the end of an array.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WritePropertyName(System.String)">
            <summary>
            Writes the property name of a name/value pair on a Json object.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteEnd">
            <summary>
            Writes the end of the current Json object or array.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteNull">
            <summary>
            Writes a null value.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteUndefined">
            <summary>
            Writes an undefined value.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteRaw(System.String)">
            <summary>
            Writes raw JavaScript manually.
            </summary>
            <param name="javaScript">The raw JavaScript to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.String)">
            <summary>
            Writes a <see cref="T:System.String"/> value.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int32"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt32"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int64"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.UInt64)">
            <summary>
            Writes a <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt64"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Single)">
            <summary>
            Writes a <see cref="T:System.Single"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Single"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Double)">
            <summary>
            Writes a <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Double"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int16"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt16"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Char)">
            <summary>
            Writes a <see cref="T:System.Char"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Char"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.SByte"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Decimal"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.DateTime)">
            <summary>
            Writes a <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteComment(System.String)">
            <summary>
            Writes out a comment <code>/*...*/</code> containing the specified text. 
            </summary>
            <param name="text">Text to place inside the comment.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteWhitespace(System.String)">
            <summary>
            Writes out the given white space.
            </summary>
            <param name="ws">The string of white space characters.</param>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.WriteState">
            <summary>
            Gets the state of the writer.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.Formatting">
            <summary>
            Indicates how the output is formatted.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.Indentation">
            <summary>
            Gets or sets how many IndentChars to write for each level in the hierarchy when <paramref name="Formatting"/> is set to <c>Formatting.Indented</c>.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.QuoteChar">
            <summary>
            Gets or sets which character to use to quote attribute values.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.IndentChar">
            <summary>
            Gets or sets which character to use for indenting when <paramref name="Formatting"/> is set to <c>Formatting.Indented</c>.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.QuoteName">
            <summary>
            Gets or sets a value indicating whether object names will be surrounded with quotes.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized Json data.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.#ctor(System.IO.TextReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReader"/> class with the specified <see cref="T:System.IO.TextReader"/>.
            </summary>
            <param name="reader">The <c>TextReader</c> containing the XML data to read.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.Read">
            <summary>
            Reads the next Json token from the stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.Close">
            <summary>
            Changes the <see cref="T:Newtonsoft.Json.JsonReader.State"/> to Closed. 
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.QuoteChar">
            <summary>
            Gets the quotation mark character used to enclose the value of a string.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.TokenType">
            <summary>
            Gets the type of the current Json token. 
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.Value">
            <summary>
            Gets the text value of the current Json token.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.ValueType">
            <summary>
            Gets The Common Language Runtime (CLR) type for the current Json token.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.JavaScriptConstructor">
            <summary>
            Represents a JavaScript constructor.
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.Json.JsonObject.ToString">
            <returns>A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.</returns>
        </member>
        <member name="M:Mtime.Community.Utility.Json.JsonObject.ToRecursionJsonString">
            <summary>
            递归解析JsonObject结构对象，生成Json字符串形式
            </summary>
            <returns></returns>
        </member>
        <member name="M:GifUtility.StreamHelper.Read">
            <summary>
            读取一个字节
            </summary>
            <returns></returns>
        </member>
        <member name="M:GifUtility.StreamHelper.GetApplicationEx(System.IO.Stream)">
            <summary>
            从文件流中读取应用程序扩展块
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:GifUtility.StreamHelper.GetPlainTextEx(System.IO.Stream)">
            <summary>
            从文件数据流中读取图形文本扩展(Plain Text Extension)
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:GifUtility.StreamHelper.GetImageDescriptor(System.IO.Stream)">
            <summary>
            从文件数据流中读取 图象标识符(Image Descriptor)
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:GifUtility.StreamHelper.GetGraphicControlExtension(System.IO.Stream)">
            <summary>
            从文件数据流中读取图形控制扩展(Graphic Control Extension)
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:GifUtility.StreamHelper.GetLCD(System.IO.Stream)">
            <summary>
            从文件数据流中读取图形控制扩展(Graphic Control Extension)
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:GifUtility.StreamHelper.WriteHeader(System.String)">
            <summary>
            写文件头
            </summary>
            <param name="header">文件头</param>
        </member>
        <member name="M:GifUtility.StreamHelper.WriteLSD(GifUtility.LogicalScreenDescriptor)">
            <summary>
            写逻辑屏幕标识符
            </summary>
            <param name="lsd"></param>
        </member>
        <member name="M:GifUtility.StreamHelper.SetGlobalColorTable(System.Byte[])">
            <summary>
            写全局颜色表
            </summary>
            <param name="buffer">全局颜色表</param>
        </member>
        <member name="M:GifUtility.StreamHelper.SetCommentExtensions(System.Collections.Generic.List{GifUtility.CommentEx})">
            <summary>
            写入注释扩展集合
            </summary>
            <param name="comments">注释扩展集合</param>
        </member>
        <member name="M:GifUtility.StreamHelper.SetApplicationExtensions(System.Collections.Generic.List{GifUtility.ApplicationEx})">
            <summary>
            写入应用程序展集合
            </summary>
            <param name="comments">写入应用程序展集合</param>
        </member>
        <member name="M:Mtime.EPay.AliPay.CreatePayUrl(Mtime.EPay.Order)">
            <summary>
            创建支付URL
            </summary>
            <param name="order">订单信息</param>
            <returns></returns>
        </member>
        <member name="M:Mtime.EPay.AliPay.ProcessNotify(System.Web.HttpContext,Mtime.EPay.AliPay.AliPayNotifyHandler)">
            <summary>
            处理通知接口
            </summary>
            <param name="context"></param>
            <param name="handler">通知接口处理器</param>
        </member>
        <member name="M:Mtime.EPay.AliPay.ProcessReturn(System.Web.HttpContext)">
            <summary>
            处理支付宝支付完成返回页面
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.EPay.AliPay.TestNotify">
            <summary>
            处理通知接口测试
            </summary>
        </member>
        <member name="M:Mtime.EPay.AliPay.BuildParamString(System.Collections.Generic.SortedList{System.String,System.String},System.Boolean)">
            <summary>
            构建参数字符串
            </summary>
            <param name="list"></param>
            <param name="encodeValue">参数值是否需要编码,被签名的参数不用编码,Url的参数要编码</param>
            <returns></returns>
        </member>
        <member name="P:Mtime.EPay.AliPay.SecurityCode">
            <summary>
            支付宝颁发的安全校检码
            </summary>
        </member>
        <member name="P:Mtime.EPay.AliPay.Partner">
            <summary>
            支付宝颁发的合作伙伴ID
            </summary>
        </member>
        <member name="P:Mtime.EPay.AliPay.Encoding">
            <summary>
            接口交互使用的字符编码, 默认为UTF-8
            </summary>
        </member>
        <member name="P:Mtime.EPay.AliPay.NotifyUrl">
            <summary>
            通知返回URL,仅适用于异步返回处理结果的接口。有些服务是无法立即返回处理结果的，那么需要通过这个URL将处理结果异步返回给合作伙伴。
            </summary>
        </member>
        <member name="P:Mtime.EPay.AliPay.ReturnUrl">
            <summary>
            结果返回URL，仅适用于立即返回处理结果的接口。支付宝处理完请求后，立即将处理结果返回给这个URL
            </summary>
        </member>
        <member name="P:Mtime.EPay.AliPay.SellerEmail">
            <summary>
            商家支付宝注册邮箱地址
            </summary>
        </member>
        <member name="T:Mtime.MongoDB.Protocol.MessageHeader">
            <summary>
            消息头，所有消息都包含
            </summary>
        </member>
        <member name="F:Mtime.MongoDB.Protocol.MessageHeader.MessageLength">
            <summary>
            消息总长短，包括消息头自身
            </summary>
        </member>
        <member name="F:Mtime.MongoDB.Protocol.MessageHeader.RequestID">
            <summary>
            客户端或数据库生成的消息ID
            </summary>
        </member>
        <member name="F:Mtime.MongoDB.Protocol.MessageHeader.ResponseTo">
            <summary>
            响应消息对应的原请求消息ID
            </summary>
        </member>
        <member name="F:Mtime.MongoDB.Protocol.MessageHeader.MsgType">
            <summary>
            消息类型
            </summary>
        </member>
        <member name="P:Mtime.MongoDB.IndexBuilder.Name">
            <summary>
            索引名，不指定的话使用默认名称
            </summary>
        </member>
        <member name="T:Rss.RssSource">
            <summary>Describes an items source</summary>
        </member>
        <member name="M:Rss.RssSource.#ctor">
            <summary>Initialize a new instance of the RssSource class</summary>
        </member>
        <member name="P:Rss.RssSource.Name">
            <summary>Name of the RSS channel that the item came from</summary>
        </member>
        <member name="P:Rss.RssSource.Url">
            <summary>URL of the original RSS feed from which the item was republished</summary>
        </member>
        <member name="T:Mtime.Community.Utility.Helper.StringHelper">
            <summary>
            字符串处理类
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.StringHelper.Trim(System.String)">
            <summary>
            移出该字符串中所有的空格
            </summary>
            <param name="inputText"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.StringHelper.GetChineseSubStringByCount(System.String,System.Int32)">
            <summary>
            count的值不包括后缀字符长度
            </summary>
            <param name="inputString"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.StringHelper.GetChineseSubStringByCount(System.String,System.Int32,System.String)">
            <summary>
            count的值不包括后缀字符长度
            </summary>
            <param name="inputString"></param>
            <param name="count"></param>
            <param name="addition"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.StringHelper.GetChineseSubString(System.String,System.Int32)">
            <summary>
            Count的长度是已经包含了后缀字符长度的
            </summary>
            <param name="inputString"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.StringHelper.GetChineseSubString(System.String,System.Int32,System.String)">
            <summary>
            Count的长度是已经包含了后缀字符长度的
            </summary>
            <param name="inputString"></param>
            <param name="count"></param>
            <param name="addition"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.StringHelper.IsChineseOrLetterOrNumber(System.Char)">
            <summary>
            判断字符是否为中文，或者英文，或者数字(只要符合一种情况，就返回true)
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.StringHelper.GetSubString(System.String,System.Int32)">
            <summary>
            取得前n位长度的字串
            </summary>
            <param name="inputString">需要处理的字符串</param>
            <param name="count">需要的字符串长度</param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.StringHelper.GetSubString(System.String,System.Int32,System.String)">
            <summary>
            取得前n位长度的字串加后缀字符串
            </summary>
            <param name="inputString">需要处理的字符串</param>
            <param name="count">需要的字符串长度</param>
            <param name="addition">后缀字符串</param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.StringHelper.GetEnglishNameFromUrl(System.String)">
            <summary>
            根据URL参数取得英文名
            </summary>
            <param name="queryString">URL参数</param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.StringHelper.GetUrlFromEnglishName(System.String)">
            <summary>
            根据英文名取得用于URL的字符串
            </summary>
            <param name="englishName">英文名</param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.StringHelper.ParagraphFormat(System.String,System.String,System.String)">
            <summary>
            段落格式化
            </summary>
            <param name="context">正文</param>
            <param name="paragraphClass">段落样式Class</param>
            <param name="paragraphStyle">段落样式</param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.StringHelper.GetBase64StringFromString(System.Object)">
            <summary>
            取得整型的Base64字符串
            </summary>
            <param name="o">整型对象</param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.StringHelper.GetStringFromBase64String(System.String)">
            <summary>
            取得Base64字符串的整型
            </summary>
            <param name="s">字符串</param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.StringHelper.ShowHighlightKeyword(System.String,System.String)">
            <summary>
            返回高亮(红色)显示关键字的内容文本
            </summary>
            <param name="keyword">关键字文本</param>
            <param name="content">内容文本</param>
            <returns>高亮后的文本</returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.StringHelper.SafeInt(System.String)">
            <summary>
            获取安全的整形数，默认值为0
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.StringHelper.SafeInt(System.String,System.Int32)">
            <summary>
            获取安全的整形数
            </summary>
            <param name="text"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.StringHelper.StringCompare(System.String,System.String)">
            <summary>
            字符串比较
            </summary>
            <param name="strA"></param>
            <param name="strB"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.StringHelper.GetSafeHtmlText(System.String)">
            <summary>
            获取安全的HTML内容文本
            此方法将过滤掉可能造成不安全因素的HTML标记
            By Marila
            </summary>
            <param name="content">HTML内容文本</param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.StringHelper.GetChineseNumber(System.Int32)">
            <summary>
            取得数字的中文名，目前只支持0到99，否则返回阿拉伯数字
            </summary>
            <param name="?"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Mtime.Community.Utility.Helper.StringHelper.GetDisplayText(System.String)" -->
        <member name="M:Mtime.Community.Utility.Helper.StringHelper.GetCleanHTMLStringFromHtml(System.String)">
            <summary>
            获取符合格式的HTML
            </summary>
            <param name="inputHtml"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.StringHelper.GetCleanHTMLStringFromHtml(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.String,Mtime.Community.Components.Constants.v3.IHtmlAttributeValueValidator}})">
            <summary>
            获取符合格式的HTML
            </summary>
            <param name="inputHtml"></param>
            <param name="allowedTags">允许的标记集合</param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.StringHelper.GetMakeupTagHTMLStringFromHtml(System.String)">
            <summary>
            对HTML进行补齐操作（目前只有日志文章分页需要用到），一般情况下请调用GetCleanHTMLStringFromHtml方法
            </summary>
            <param name="inputHtml"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.StringHelper.IsMakeupHTMLTagString(System.String)">
            <summary>
            判断HTML是否闭合
            </summary>
            <param name="inputHtml"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.StringHelper.GetWordCountFromHtml(System.String)">
            <summary>
            统计字数（忽略HTML标记）
            </summary>
            <param name="inputHtml"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.StringHelper.GetCleanText(System.String)">
            <summary>
            去掉标记字符串，请不要在前台显示数据的时候使用！
            </summary>
            <param name="inputString"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.StringHelper.ToLower(System.String)">
            <summary>
            大小写转换，全角字符转半角字符
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.StringHelper.ToDBC(System.String)">
            <summary>
            全角字符转半角字符
            </summary>
            
            全角空格为12288，半角空格为32
            其他字符半角(33-126)与全角(65281-65374)的对应关系是：均相差65248
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.StringHelper.ToSBC(System.String)">
             <summary>
             半角字符转全角字符
             </summary>
            
             全角空格为12288，半角空格为32
             其他字符半角(33-126)与全角(65281-65374)的对应关系是：均相差65248
            
             <param name="input"></param>
             <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.StringHelper.GetFormattedSubString(System.String,System.Int32)">
            <summary>
            忽略标记得到字符串（需整理）
            </summary>
            <param name="formattedBody"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.StringHelper.GetFormattedString(System.String,System.Int32)">
            <summary>
            得到包含标记的子字符串（需整理）
            </summary>
            <param name="formattedBody"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.StringHelper.GetReplaceCaptionText(System.String)">
            <summary>
            得到替换后的字符串
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.StringHelper.GetFixupImageWidthHtml(System.String,System.Int32)">
            <summary>
            返回已经固定图片宽度的HTML
            </summary>
            <param name="html">HTML</param>
            <param name="maxImageWidth">最大宽度</param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.StringHelper.OutlineFirstCharOfTextInHTML(System.String,System.String)">
            <summary>
            突出显示内容首字符
            </summary>
            <param name="html"></param>
            <param name="outlineRelaceFormat">首字符替换样式，例如：&lt;span class="first_letter" &gt;{0}&lt;/span&gt;</param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.StringHelper.GetHtmlSubstring(System.String,System.Int32,Mtime.Community.Components.Constants.v3.AllowedHtmlTagType)">
            <summary>
            截取一段HTML代码
            </summary>
            <param name="htmlString"></param>
            <param name="length">需要截取的长度</param>
            <param name="allowedHtmlTagType">允许的HTML标记类型</param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.StringHelper.CleanInputString(System.String)">
            <summary>
            针对用户输入的纯文本数据进行整理
            </summary>
            <param name="inputString"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.StringHelper.GetParagraph(System.String,System.Int32)">
            <summary>
            返回格式化后的字符串
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.StringHelper.CheckedString(System.String)">
            <summary>
            替换BR
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.StringHelper.Encode(System.String)">
            <summary>
            实体编码
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.StringHelper.Chtml(System.String)">
            <summary>
            HTML转换
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.StringHelper.ConvertEmotion(System.String)">
            <summary>
            表情转换
            </summary>
            <param name="inputString"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.StringHelper.ConvertUBB(System.String,System.Boolean)">
            <summary>
            UBB转换
            </summary>
            <param name="content"></param>
            <param name="convertEmotion">指定是否转换表情</param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.StringHelper.FormatDateTime(System.DateTime)">
            <summary>
            格式化时间
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.StringHelper.MD5String(System.String)">
            <summary>
            MD5 encodes the passed string
            </summary>
            <param name="input">The string to encode.</param>
            <returns>An encoded string.</returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.StringHelper.MD5String(System.String,System.Text.Encoding)">
            <summary>
            MD5 encodes the passed string
            </summary>
            <param name="input">The string to encode.</param>
            <param name="encoding">encoding</param>
            <returns>An encoded string.</returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.StringHelper.CombinationArrayList(System.String,System.String,System.Type)">
            <summary>
            字符串转换为数组，效率比较低，不要在前台直接使用
            </summary>
            <param name="delimitedString"></param>
            <param name="delimiter"></param>
            <param name="baseType"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.StringHelper.GetNoArchorBody(System.String)">
            <summary>
            把文章的href属性都替换为空
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.StringHelper.GetPageString(System.String,System.String)">
            <summary>
            文本分页
            </summary>
            <param name="text"></param>
            <param name="pageToken"></param>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.StringHelper.MakeupPageText(System.String,System.String)">
            <summary>
            文本分页补齐
            </summary>
            <param name="text"></param>
            <param name="pageToken"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.StringHelper.TitleCase(System.String)">
            <summary>
            Converts a string to title case.
            </summary>
            <param name="input">The string to convert.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.StringHelper.TitleCase(System.String,System.Boolean)">
            <summary>
            Converts a string to title case.
            </summary>
            <param name="input">The string to convert.</param>
            <param name="ignoreShortWords">If true, does not capitalize words like
            "a", "is", "the", etc.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.StringHelper.GetRating(System.Single,System.Int32@,System.Int32@)">
            <summary>
            获得分数的整数部分和小数部分
            </summary>
            <param name="rating"></param>
            <param name="bigInt"></param>
            <param name="smallInt"></param>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.StringHelper.GetTime(System.DateTime)">
            <summary>
            时间
            </summary>
            <param name="enterTime"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.StringHelper.GetTweetTime(System.DateTime)">
            <summary>
            时间
            </summary>
            <param name="enterTime"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.StringHelper.SkipInvalidXmlString(System.String)">
            <summary>
            跳过一些不合法的字符
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.StringHelper.SanitizeXmlString(System.String)">
            <summary>
            Remove illegal XML characters from a string.
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.StringHelper.IsLegalXmlChar(System.Int32)">
            <summary>
            Whether a given character is allowed by XML 1.0.
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.StringHelper.ExtractString(System.String,System.String,System.String)">
            <summary>
            从字符串里面抽取字符串
            </summary>
            <param name="content"></param>
            <param name="beginToken"></param>
            <param name="endToken"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.StringHelper.ExtractString(System.String,System.String,System.String,System.Boolean)">
            <summary>
            从字符串里面抽取字符串
            </summary>
            <param name="content"></param>
            <param name="beginToken"></param>
            <param name="endToken"></param>
            <param name="caseSensitive"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.StringHelper.GetStringHashCode(System.String)">
            <summary>
            获取字符串的HashCode，实现同32位.Net Framework 2.0中的string.GetHashCode
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.StringHelper.ContainUpperWord(System.String)">
            <summary>
            字符串中是否包含大写字母，全角空格也认为是大写
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.StringHelper.SplitCompart(System.String,System.Int32,System.Char)">
            <summary>
            以分隔符拆分字符串
            </summary>
            <param name="ids"></param>
            <param name="itemMaxLength">单字符串最大长度</param>
            <param name="splitChar">拆分符</param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.StringHelper.GenerateMobileVerifyCode">
            <summary>
            生成随机码（默认6位，种子为字母和数字组合）
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.StringHelper.GenerateMobileVerifyCode(System.Int32)">
            <summary>
            生成随机码（种子为字母和数字组合）
            </summary>
            <param name="length">随机码长度</param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.StringHelper.GenerateMobileVerifyCode(System.String)">
            <summary>
            生成随机码（长度为6位）
            </summary>
            <param name="dependString">随机码种子字符串</param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.StringHelper.GenerateMobileVerifyCode(System.Int32,System.String)">
            <summary>
            生成随机码
            </summary>
            <param name="length">随机码长度</param>
            <param name="dependString">随机码种子字符串</param>
            <returns></returns>
        </member>
        <member name="T:ProtoBuf.Meta.TypeFormatEventArgs">
            <summary>
            Event arguments needed to perform type-formatting functions; this could be resolving a Type to a string suitable for serialization, or could
            be requesting a Type from a string. If no changes are made, a default implementation will be used (from the assembly-qualified names).
            </summary>
        </member>
        <member name="P:ProtoBuf.Meta.TypeFormatEventArgs.Type">
            <summary>
            The type involved in this map; if this is initially null, a Type is expected to be provided for the string in FormattedName.
            </summary>
        </member>
        <member name="P:ProtoBuf.Meta.TypeFormatEventArgs.FormattedName">
            <summary>
            The formatted-name involved in this map; if this is initially null, a formatted-name is expected from the type in Type.
            </summary>
        </member>
        <member name="T:ProtoBuf.Meta.TypeFormatEventHandler">
            <summary>
            Delegate type used to perform type-formatting functions; the sender originates as the type-model.
            </summary>
        </member>
        <member name="T:ProtoBuf.ImplicitFields">
            <summary>
            Specifies the method used to infer field tags for members of the type
            under consideration. Tags are deduced using the invariant alphabetic
            sequence of the members' names; this makes implicit field tags very brittle,
            and susceptible to changes such as field names (normally an isolated
            change).
            </summary>
        </member>
        <member name="F:ProtoBuf.ImplicitFields.None">
            <summary>
            No members are serialized implicitly; all members require a suitable
            attribute such as [ProtoMember]. This is the recmomended mode for
            most scenarios.
            </summary>
        </member>
        <member name="F:ProtoBuf.ImplicitFields.AllPublic">
            <summary>
            Public properties and fields are eligible for implicit serialization;
            this treats the public API as a contract. Ordering beings from ImplicitFirstTag.
            </summary>
        </member>
        <member name="F:ProtoBuf.ImplicitFields.AllFields">
            <summary>
            Public and non-public fields are eligible for implicit serialization;
            this acts as a state/implementation serializer. Ordering beings from ImplicitFirstTag.
            </summary>
        </member>
        <member name="T:Mtime.Community.Utility.zxing.common.reedsolomon.GF256">
            <summary> <p>This class contains utility methods for performing mathematical operations over
            the Galois Field GF(256). Operations use a given primitive polynomial in calculations.</p>
            
            <p>Throughout this package, elements of GF(256) are represented as an <code>int</code>
            for convenience and speed (but at the cost of memory).
            Only the bottom 8 bits are really used.</p>
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="M:Mtime.Community.Utility.zxing.common.reedsolomon.GF256.#ctor(System.Int32)">
            <summary> Create a representation of GF(256) using the given primitive polynomial.
            
            </summary>
            <param name="primitive">irreducible polynomial whose coefficients are represented by
            the bits of an int, where the least-significant bit represents the constant
            coefficient
            </param>
        </member>
        <member name="M:Mtime.Community.Utility.zxing.common.reedsolomon.GF256.buildMonomial(System.Int32,System.Int32)">
            <returns> the monomial representing coefficient * x^degree
            </returns>
        </member>
        <member name="M:Mtime.Community.Utility.zxing.common.reedsolomon.GF256.addOrSubtract(System.Int32,System.Int32)">
            <summary> Implements both addition and subtraction -- they are the same in GF(256).
            
            </summary>
            <returns> sum/difference of a and b
            </returns>
        </member>
        <member name="M:Mtime.Community.Utility.zxing.common.reedsolomon.GF256.exp(System.Int32)">
            <returns> 2 to the power of a in GF(256)
            </returns>
        </member>
        <member name="M:Mtime.Community.Utility.zxing.common.reedsolomon.GF256.log(System.Int32)">
            <returns> base 2 log of a in GF(256)
            </returns>
        </member>
        <member name="M:Mtime.Community.Utility.zxing.common.reedsolomon.GF256.inverse(System.Int32)">
            <returns> multiplicative inverse of a
            </returns>
        </member>
        <member name="M:Mtime.Community.Utility.zxing.common.reedsolomon.GF256.multiply(System.Int32,System.Int32)">
            <param name="a">
            </param>
            <param name="b">
            </param>
            <returns> product of a and b in GF(256)
            </returns>
        </member>
        <member name="T:Mtime.Community.Utility.Net.Server.BufferManager">
            <summary>
            This class creates a single large buffer which can be divided up and assigned to SocketAsyncEventArgs objects for use
            with each socket I/O operation.  This enables bufffers to be easily reused and gaurds against fragmenting heap memory.
            
            The operations exposed on the BufferManager class are not thread safe.
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.Net.Server.BufferManager.Init">
            <summary>
            Allocates buffer space used by the buffer pool
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.Net.Server.BufferManager.Set(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Assigns a buffer from the buffer pool to the specified SocketAsyncEventArgs object
            </summary>
            <returns>true if the buffer was successfully set, else false</returns>
        </member>
        <member name="M:Mtime.Community.Utility.Net.Server.BufferManager.Free(System.Net.Sockets.SocketAsyncEventArgs,System.Int32)">
            <summary>
            Removes the buffer from a SocketAsyncEventArg object.  This frees the buffer back to the 
            buffer pool
            </summary>
        </member>
        <member name="T:Mtime.Community.Utility.Net.AsyncSocketWrapper">
            <summary>
            Implements the connection logic for the socket client.
            </summary>
        </member>
        <member name="E:Mtime.Community.Utility.Net.AsyncSocketWrapper.ConnectCompleted">
            <summary>
            
            </summary>
        </member>
        <member name="E:Mtime.Community.Utility.Net.AsyncSocketWrapper.SendCompleted">
            <summary>
            
            </summary>
        </member>
        <member name="T:Mtime.IO.DataBufferPool2">
            <summary>
            DataBuffer池
            </summary>
        </member>
        <member name="M:Mtime.Collections.IPool2`1.Acquire">
            <summary>
            从池中获取一个对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mtime.Collections.IPool2`1.Release(`0)">
            <summary>
            把一个对象放回到池中
            </summary>
            <param name="buffer2"></param>
        </member>
        <member name="P:Mtime.Collections.IPool2`1.Count">
            <summary>
            池中的对象数
            </summary>
        </member>
        <member name="F:Mtime.IO.DataBufferPool2.DEFAULT_MIN_SIZE">
            <summary>
            默认池集合中的池的最小数量
            </summary>
        </member>
        <member name="F:Mtime.IO.DataBufferPool2.DEFAULT_MAX_SIZE">
            <summary>
            默认池集合中的池的最大数量
            </summary>
        </member>
        <member name="F:Mtime.IO.DataBufferPool2._Pools">
            <summary>
            默认池集合
            </summary>
        </member>
        <member name="F:Mtime.IO.DataBufferPool2._Buffers">
            <summary>
            Buffer列表
            </summary>
        </member>
        <member name="F:Mtime.IO.DataBufferPool2._BufferSize">
            <summary>
            参数缓冲区长度
            </summary>
        </member>
        <member name="F:Mtime.IO.DataBufferPool2._MinSize">
            <summary>
            池的最小数量
            </summary>
        </member>
        <member name="F:Mtime.IO.DataBufferPool2._MaxSize">
            <summary>
            池的最大空余数量
            </summary>
        </member>
        <member name="F:Mtime.IO.DataBufferPool2._Disposed">
            <summary>
            对象是否已释放
            </summary>
        </member>
        <member name="M:Mtime.IO.DataBufferPool2.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            创建BufferPool实例
            </summary>
            <param name="minSize">池的最小数量</param>
            <param name="maxSize">池的最大空余数量，注意到达最大数量后并不会停止创建对象，只是在放回池中时会彻底释放掉</param>
            <param name="bufferSize">每个Buffer的长度（字节数）</param>
        </member>
        <member name="M:Mtime.IO.DataBufferPool2.Acquire">
            <summary>
            从池中获取对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mtime.IO.DataBufferPool2.Release(Mtime.IO.DataBuffer2)">
            <summary>
            把对象放回到池中
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:Mtime.IO.DataBufferPool2.Create">
            <summary>
            创建Buffer
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mtime.IO.DataBufferPool2.RegisterPool(Mtime.IO.DataBufferPool2)">
            <summary>
            向默认池集合中添加指定Buffer大小的池
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mtime.IO.DataBufferPool2.GetPool(System.Int32)">
            <summary>
            从默认池集合中获取指定Buffer大小的池
            </summary>
            <returns></returns>
        </member>
        <member name="P:Mtime.IO.DataBufferPool2.MinSize">
            <summary>
            池的最小数量
            </summary>
        </member>
        <member name="P:Mtime.IO.DataBufferPool2.MaxSize">
            <summary>
            池的最大空余数量
            </summary>
        </member>
        <member name="P:Mtime.IO.DataBufferPool2.AcquireCount">
            <summary>
            获取连接次数
            </summary>
        </member>
        <member name="P:Mtime.IO.DataBufferPool2.ReleaseCount">
            <summary>
            释放连接次数
            </summary>
        </member>
        <member name="P:Mtime.IO.DataBufferPool2.Count">
            <summary>
            池中当前空闲的对象数量
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonWriterException">
            <summary>
            The exception thrown when an error occurs while reading Json text.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriterException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonWriterException"/> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriterException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonWriterException"/> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriterException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonWriterException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:GifUtility.ImageDescriptor">
            <summary>
            图象标识符(Image Descriptor)一个GIF文件内可以包含多幅图象，
            一幅图象结束之后紧接着下是一幅图象的标识符，图象标识符以0x2C(',')
            字符开始，定义紧接着它的图象的性质，包括图象相对于逻辑屏幕边界的偏移量、
            图象大小以及有无局部颜色列表和颜色列表大小，由10个字节组成
            </summary>
        </member>
        <member name="F:GifUtility.ImageDescriptor.XOffSet">
            <summary>
            X方向偏移量
            </summary>
        </member>
        <member name="F:GifUtility.ImageDescriptor.YOffSet">
            <summary>
            X方向偏移量
            </summary>
        </member>
        <member name="F:GifUtility.ImageDescriptor.Width">
            <summary>
            图象宽度
            </summary>
        </member>
        <member name="F:GifUtility.ImageDescriptor.Height">
            <summary>
            图象高度
            </summary>
        </member>
        <member name="F:GifUtility.ImageDescriptor.Packed">
            <summary>
            packed
            </summary>
        </member>
        <member name="F:GifUtility.ImageDescriptor.LctFlag">
            <summary>
            局部颜色列表标志(Local Color Table Flag)
            置位时标识紧接在图象标识符之后有一个局部颜色列表，供紧跟在它之后的一幅图象使用；
            值否时使用全局颜色列表，忽略pixel值。
            </summary>
        </member>
        <member name="F:GifUtility.ImageDescriptor.InterlaceFlag">
            <summary>
            交织标志(Interlace Flag)，置位时图象数据使用连续方式排列，否则使用顺序排列。
            </summary>
        </member>
        <member name="F:GifUtility.ImageDescriptor.SortFlag">
            <summary>
             分类标志(Sort Flag)，如果置位表示紧跟着的局部颜色列表分类排列.
            </summary>
        </member>
        <member name="F:GifUtility.ImageDescriptor.LctSize">
            <summary>
             pixel - 局部颜色列表大小(Size of Local Color Table)，pixel+1就为颜色列表的位数
            </summary>
        </member>
        <member name="T:GifUtility.GifFrame">
            <summary>
            Gif文件中可以包含多个图像，每个图像加上图像的一些特征，就组成了帧:GifFrame
            </summary>
        </member>
        <member name="P:GifUtility.GifFrame.BgColor">
            <summary>
            该桢的背景色
            </summary>
        </member>
        <member name="P:GifUtility.GifFrame.ImageDescriptor">
            <summary>
            图象标识符(Image Descriptor)
            一个GIF文件内可以包含多幅图象
            一幅图象结束之后紧接着下是一幅图象的标识符，
            图象标识符以0x2C(',')字符开始，
            定义紧接着它的图象的性质，包括图象相对于逻辑屏幕边界的偏移量、
            图象大小以及有无局部颜色列表和颜色列表大小
            </summary>
        </member>
        <member name="P:GifUtility.GifFrame.Palette">
            <summary>
            Gif的调色板
            </summary>
        </member>
        <member name="P:GifUtility.GifFrame.Image">
            <summary>
            图像
            </summary>
        </member>
        <member name="P:GifUtility.GifFrame.ColorDepth">
            <summary>
            数据位大小
            </summary>
        </member>
        <member name="P:GifUtility.GifFrame.LocalColorTable">
            <summary>
            局部颜色列表(Local Color Table)
            如果上面的局部颜色列表标志置位的话，则需要在这里（紧跟在图象标识符之后）
            定义一个局部颜色列表以供紧接着它的图象使用，注意使用前应线保存原来的颜色列表，
            使用结束之后回复原来保存的全局颜色列表。如果一个GIF文件即没有提供全局颜色列表
            也没有提供局部颜色列表，可以自己创建一个颜色列表，或使用系统的颜色列表。
            RGBRGB......
            </summary>
        </member>
        <member name="P:GifUtility.GifFrame.GraphicExtension">
            <summary>
            图形控制扩展(Graphic Control Extension)这一部分是可选的（需要89a版本），
            可以放在一个图象块(包括图象标识符、局部颜色列表和图象数据)或文本扩展块的前面，
            用来控制跟在它后面的第一个图象（或文本）的渲染(Render)形式
            </summary>
        </member>
        <member name="P:GifUtility.GifFrame.Delay">
            <summary>
            延迟-与下一帧之间的时间间隔
            </summary>
        </member>
        <member name="P:GifUtility.GifFrame.IndexedPixel">
            <summary>
            这个是经过LZW压缩算法后的数据流
            </summary>
        </member>
        <member name="T:Mtime.Community.Utility.Helper.ValidationHelper">
            <summary>
            验证方法
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.ValidationHelper.IsEmail(System.String)">
            <summary>
            验证邮箱
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.ValidationHelper.IsUrl(System.String)">
            <summary>
            验证网址
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.ValidationHelper.IsDateTime(System.String)">
            <summary>
            验证日期
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.ValidationHelper.IsMobile(System.String)">
            <summary>
            验证手机号
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.ValidationHelper.HasMobile(System.String)">
            <summary>
            是否有手机号
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.ValidationHelper.IsIP(System.String)">
            <summary>
            验证IP
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.ValidationHelper.IsIDCard(System.String)">
            <summary>
            验证身份证是否有效
            </summary>
            <param name="Id"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.ValidationHelper.IsInt(System.String)">
            <summary>
            是不是Int型的
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.ValidationHelper.IsLengthStr(System.String,System.Int32,System.Int32)">
            <summary>
            看字符串的长度是不是在限定数之间 一个中文为两个字符
            </summary>
            <param name="source">字符串</param>
            <param name="begin">大于等于</param>
            <param name="end">小于等于</param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.ValidationHelper.IsTel(System.String)">
            <summary>
            是不是中国电话，格式010-85849685
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.ValidationHelper.IsPostCode(System.String)">
            <summary>
            邮政编码 6个数字
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.ValidationHelper.IsChinese(System.String)">
            <summary>
            中文
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.ValidationHelper.IsNormalChar(System.String)">
            <summary>
            验证是不是正常字符 字母，数字，下划线的组合
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:Mtime.MongoDB.Bson.BsonReader">
            <summary>
            Reads binary streams containing BSON data and converts them to native types.
            </summary>
        </member>
        <member name="M:Mtime.MongoDB.Bson.BsonInfo.#cctor">
            <summary>
            Initializes the <see cref="T:Mtime.MongoDB.Bson.BsonInfo"/> class.
            </summary>
        </member>
        <member name="P:Mtime.MongoDB.Bson.BsonInfo.Epoch">
            <summary>
            Gets or sets the epoch.
            </summary>
            <value>The epoch.</value>
        </member>
        <member name="P:Mtime.MongoDB.Bson.BsonInfo.MaxDocumentSize">
            <summary>
            The maximum size a document can be.
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.HttpProxy.HttpClientHelper.Request(Mtime.Community.Utility.HttpProxy.HttpProxyReqest.MethodType,System.String)">
            <summary>
            此方法每次会关闭连接，性能较差
            如果是对确定的IP，请使用HttpProxyClient或者ProxyRequest方法
            </summary>
            <param name="methodType"></param>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.HttpProxy.HttpClientHelper.Request(Mtime.Community.Utility.HttpProxy.HttpProxyReqest.MethodType,System.String,System.Int32,System.String)">
            <summary>
            此方法每次会关闭连接，性能较差
            如果是对确定的IP，请使用HttpProxyClient或者ProxyRequest方法
            </summary>
            <param name="methodType"></param>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ZipException">
            <summary>
            Represents exception conditions specific to Zip archive handling
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor 
            </summary>
            <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo"/> for this constructor</param>
            <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext"/> for this constructor</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipException.#ctor">
            <summary>
            Initializes a new instance of the ZipException class.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ZipException class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipException.#ctor(System.String,System.Exception)">
            <summary>
            Initialise a new instance of ZipException.
            </summary>
            <param name="message">A message describing the error.</param>
            <param name="exception">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:Mtime.Community.Utility.HttpCompress.HttpOutputFilter">
            <summary>
            The base of anything you want to latch onto the Filter property of a <see cref="T:System.Web.HttpResponse"/>
            object.
            </summary>
            <remarks>
            <p></p>These are generally used with <see cref="N:Mtime.Community.Utility.HttpModule"/> but you could really use them in
            other HttpModules.  This is a general, write-only stream that writes to some underlying stream.  When implementing
            a real class, you have to override void Write(byte[], int offset, int count).  Your work will be performed there.
            </remarks>
        </member>
        <member name="M:Mtime.Community.Utility.HttpCompress.HttpOutputFilter.#ctor(System.IO.Stream)">
            <summary>
            Subclasses need to call this on contruction to setup the underlying stream
            </summary>
            <param name="baseStream">The stream we're wrapping up in a filter</param>
        </member>
        <member name="M:Mtime.Community.Utility.HttpCompress.HttpOutputFilter.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Not supported.  Throws an exception saying so.
            </summary>
            <exception cref="T:System.NotSupportedException">Thrown.  Always.</exception>
        </member>
        <member name="M:Mtime.Community.Utility.HttpCompress.HttpOutputFilter.SetLength(System.Int64)">
            <summary>
            Not supported.  Throws an exception saying so.
            </summary>
            <exception cref="T:System.NotSupportedException">Thrown.  Always.</exception>
        </member>
        <member name="M:Mtime.Community.Utility.HttpCompress.HttpOutputFilter.Close">
            <summary>
            Closes this Filter and the underlying stream.
            </summary>
            <remarks>
            If you override, call up to this method in your implementation.
            </remarks>
        </member>
        <member name="M:Mtime.Community.Utility.HttpCompress.HttpOutputFilter.Flush">
            <summary>
            Fluses this Filter and the underlying stream.
            </summary>
            <remarks>
            If you override, call up to this method in your implementation.
            </remarks>
        </member>
        <member name="M:Mtime.Community.Utility.HttpCompress.HttpOutputFilter.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Not supported.
            </summary>
            <param name="buffer">The buffer to write into.</param>
            <param name="offset">The offset on the buffer to write into</param>
            <param name="count">The number of bytes to write.  Must be less than buffer.Length</param>
            <returns>An int telling you how many bytes were written</returns>
        </member>
        <member name="P:Mtime.Community.Utility.HttpCompress.HttpOutputFilter.BaseStream">
            <summary>
            Allow subclasses access to the underlying stream
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.HttpCompress.HttpOutputFilter.CanRead">
            <summary>
            False.  These are write-only streams
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.HttpCompress.HttpOutputFilter.CanSeek">
            <summary>
            False.  These are write-only streams
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.HttpCompress.HttpOutputFilter.CanWrite">
            <summary>
            True.  You can write to the stream.  May change if you call Close or Dispose
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.HttpCompress.HttpOutputFilter.Length">
            <summary>
            Not supported.  Throws an exception saying so.
            </summary>
            <exception cref="T:System.NotSupportedException">Thrown.  Always.</exception>
        </member>
        <member name="P:Mtime.Community.Utility.HttpCompress.HttpOutputFilter.Position">
            <summary>
            Not supported.  Throws an exception saying so.
            </summary>
            <exception cref="T:System.NotSupportedException">Thrown.  Always.</exception>
        </member>
        <member name="T:Mtime.Community.Utility.XThread.XThread">
            <summary>
            自定义线程
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.XThread.XThread.#ctor">
            <summary>
            初始线程
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.XThread.XThread.Start(System.Object,System.Threading.WaitCallback)">
            <summary>
            执行一个数据
            </summary>
            <param name="userdate"></param>
            <param name="callback"></param>
        </member>
        <member name="P:Mtime.Community.Utility.XThread.XThread.Thread">
            <summary>
            当前正执行的线程
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.XThread.XThread.Callback">
            <summary>
            线程执行委托
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.XThread.XThread.UserDate">
            <summary>
            当前线程操作数据
            </summary>
        </member>
        <member name="E:Mtime.Community.Utility.XThread.XThread.Exception">
            <summary>
            异常事件
            </summary>
        </member>
        <member name="E:Mtime.Community.Utility.XThread.XThread.Completed">
            <summary>
            完成后事件
            </summary>
        </member>
        <member name="T:Mtime.Community.Utility.URLRewriter.Config.XinhuanetRewriterConfig">
            <summary>
            定义了URL重写的配置类文件结构以及获取配置
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.URLRewriter.Config.XinhuanetRewriterConfig.GetConfig">
            <summary>
            从配置文件中返回一个RewriterConfiguration实例
            </summary>
        </member>
        <member name="T:Rss.RssCloudProtocol">
            <summary>All valid Rss Cloud protocols, including Null</summary>
        </member>
        <member name="F:Rss.RssCloudProtocol.Empty">
            <summary>Not defined</summary>
        </member>
        <member name="F:Rss.RssCloudProtocol.NotSupported">
            <summary>Protocol is not supported</summary>
        </member>
        <member name="F:Rss.RssCloudProtocol.XmlRpc">
            <summary>xml-rpc</summary>
        </member>
        <member name="F:Rss.RssCloudProtocol.Soap">
            <summary>soap</summary>
        </member>
        <member name="F:Rss.RssCloudProtocol.HttpPost">
            <summary>http-post</summary>
        </member>
        <member name="T:Rss.RssVersion">
            <summary>All RSS versions</summary>
        </member>
        <member name="F:Rss.RssVersion.Empty">
            <summary>Not defined</summary>
        </member>
        <member name="F:Rss.RssVersion.NotSupported">
            <summary>Version is not directly supported</summary>
        </member>
        <member name="F:Rss.RssVersion.RSS090">
            <summary>RDF Site Summary (RSS) 0.9</summary>
        </member>
        <member name="F:Rss.RssVersion.RSS091">
            <summary>Rich Site Summary (RSS) 0.91</summary>
        </member>
        <member name="F:Rss.RssVersion.RSS092">
            <summary>Rich Site Summary (RSS) 0.92</summary>
        </member>
        <member name="F:Rss.RssVersion.RSS10">
            <summary>RDF Site Summary (RSS) 1.0</summary>
        </member>
        <member name="F:Rss.RssVersion.RSS20">
            <summary>Really Simple Syndication (RSS) 2.0</summary>
        </member>
        <member name="T:Rss.RssWriter">
            <summary>Writes an RSS XML file.</summary>
            <remarks>Represents a writer that provides a fast, non-cached, forward-only way of generating streams or files containing RSS XML data that conforms to the W3C Extensible Markup Language (XML) 1.0 and the Namespaces in XML recommendations.</remarks>
        </member>
        <member name="M:Rss.RssWriter.#ctor(System.IO.TextWriter)">
            <summary>Creates an instance of the RssWriter class using the specified TextWriter.</summary>
            <param name="textWriter">specified TextWriter</param>
        </member>
        <member name="M:Rss.RssWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>Creates an instance of the RssWriter class using the specified Stream and Encoding.</summary>
            <exception cref="T:System.ArgumentException">The encoding is not supported or the stream cannot be written to.</exception>
            <param name="stream">Stream to output to</param>
            <param name="encoding">The encoding to use. If encoding is (null c#, Nothing vb) it writes out the stream as UTF-8.</param>
        </member>
        <member name="M:Rss.RssWriter.#ctor(System.IO.Stream)">
            <summary>Creates an instance of the RssWriter class using the specified Stream.</summary>
            <remarks>The encoding is ISO-8859-1.</remarks>
            <exception cref="T:System.ArgumentException">The Stream cannot be written to.</exception>
            <param name="stream">specified Stream</param>
        </member>
        <member name="M:Rss.RssWriter.#ctor(System.String,System.Text.Encoding)">
            <summary>Creates an instance of the RssWriter class using the specified file and Encoding.</summary>
            <exception cref="T:System.ArgumentException">The encoding is not supported; the filename is empty, contains only white space, or contains one or more invalid characters.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Access is denied.</exception>
            <exception cref="T:System.ArgumentNullException">The filename is a (null c#, Nothing vb) reference.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The directory to write to is not found.</exception>
            <exception cref="T:System.IO.IOException">The filename includes an incorrect or invalid syntax for file name, directory name, or volume label syntax.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <param name="fileName">specified file (including path) If the file exists, it will be truncated with the new content.</param>
            <param name="encoding">specified Encoding</param>
        </member>
        <member name="M:Rss.RssWriter.#ctor(System.String)">
            <summary>Creates an instance of the RssWriter class using the specified file.</summary>
            <remarks>The encoding is ISO-8859-1.</remarks>
            <exception cref="T:System.ArgumentException">The filename is empty, contains only white space, or contains one or more invalid characters.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Access is denied.</exception>
            <exception cref="T:System.ArgumentNullException">The filename is a (null c#, Nothing vb) reference.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The directory to write to is not found.</exception>
            <exception cref="T:System.IO.IOException">The filename includes an incorrect or invalid syntax for file name, directory name, or volume label syntax.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <param name="fileName">specified file (including path) If the file exists, it will be truncated with the new content.</param>
        </member>
        <member name="M:Rss.RssWriter.BeginDocument">
            <summary>Writes the begining data to the RSS file</summary>
            <remarks>This routine is called from the WriteChannel and WriteItem subs</remarks>
            <exception cref="T:System.NotSupportedException">RDF Site Summary (RSS) 1.0 is not currently supported.</exception>
        </member>
        <member name="M:Rss.RssWriter.Close">
            <summary>Closes instance of RssWriter.</summary>
            <remarks>Writes end elements, and releases connections</remarks>
            <exception cref="T:System.InvalidOperationException">Occurs if the RssWriter is already closed or the caller is attempting to close before writing a channel.</exception>
        </member>
        <member name="M:Rss.RssWriter.Write(Rss.RssChannel)">
            <summary>Writes an RSS channel</summary>
            <exception cref="T:System.InvalidOperationException">RssWriter has been closed, and can not be written to.</exception>
            <exception cref="T:System.ArgumentNullException">Channel must be instanciated with data, before calling Write.</exception>
            <param name="channel">RSS channel to write</param>
        </member>
        <member name="M:Rss.RssWriter.Write(Rss.RssItem)">
            <summary>Writes an RSS item</summary>
            <exception cref="T:System.InvalidOperationException">Either the RssWriter has already been closed, or the caller is attempting to write an RSS item before an RSS channel.</exception>
            <exception cref="T:System.ArgumentNullException">Item must be instanciated with data, before calling Write.</exception>
            <param name="item">RSS item to write</param>
        </member>
        <member name="M:Rss.RssWriter.WriteElement(System.String,System.DateTime,System.Boolean)">
            <summary>Writes an element with the specified local name and value</summary>
            <param name="localName">the localname of the element</param>
            <param name="input">the value of the element</param>
            <param name="required">boolean that determines if input cannot be null</param>
        </member>
        <member name="M:Rss.RssWriter.WriteElement(System.String,System.Int32,System.Boolean)">
            <summary>Writes an element with the specified local name and value</summary>
            <param name="localName">the localname of the element</param>
            <param name="input">the value of the element</param>
            <param name="required">boolean that determines if input cannot be null</param>
        </member>
        <member name="M:Rss.RssWriter.WriteElement(System.String,System.String,System.Boolean)">
            <summary>Writes an element with the specified local name and value</summary>
            <param name="localName">the localname of the element</param>
            <param name="input">the value of the element</param>
            <param name="required">boolean that determines if input cannot be null</param>
        </member>
        <member name="M:Rss.RssWriter.WriteElement(System.String,System.Uri,System.Boolean)">
            <summary>Writes an element with the specified local name and value</summary>
            <param name="localName">the localname of the element</param>
            <param name="input">the value of the element</param>
            <param name="required">boolean that determines if input cannot be null</param>
        </member>
        <member name="M:Rss.RssWriter.WriteElement(System.String,System.Object,System.Boolean)">
            <summary>Writes an element with the specified local name and value</summary>
            <param name="localName">the localname of the element</param>
            <param name="input">the value of the element</param>
            <param name="required">boolean that determines if input cannot be null</param>
        </member>
        <member name="M:Rss.RssWriter.WriteAttribute(System.String,System.DateTime,System.Boolean)">
            <summary>Writes an attribute with the specified local name and value</summary>
            <param name="localName">the localname of the element</param>
            <param name="input">the value of the element</param>
            <param name="required">boolean that determines if input cannot be null</param>
        </member>
        <member name="M:Rss.RssWriter.WriteAttribute(System.String,System.Int32,System.Boolean)">
            <summary>Writes an attribute with the specified local name and value</summary>
            <param name="localName">the localname of the element</param>
            <param name="input">the value of the element</param>
            <param name="required">boolean that determines if input cannot be null</param>
        </member>
        <member name="M:Rss.RssWriter.WriteAttribute(System.String,System.String,System.Boolean)">
            <summary>Writes an attribute with the specified local name and value</summary>
            <param name="localName">the localname of the element</param>
            <param name="input">the value of the element</param>
            <param name="required">boolean that determines if input cannot be null</param>
        </member>
        <member name="M:Rss.RssWriter.WriteAttribute(System.String,System.Uri,System.Boolean)">
            <summary>Writes an attribute with the specified local name and value</summary>
            <param name="localName">the localname of the element</param>
            <param name="input">the value of the element</param>
            <param name="required">boolean that determines if input cannot be null</param>
        </member>
        <member name="M:Rss.RssWriter.WriteAttribute(System.String,System.Object,System.Boolean)">
            <summary>Writes an attribute with the specified local name and value</summary>
            <param name="localName">the localname of the element</param>
            <param name="input">the value of the element</param>
            <param name="required">boolean that determines if input cannot be null</param>
        </member>
        <member name="P:Rss.RssWriter.Version">
            <summary>Gets or sets the RSS version to write.</summary>
            <exception cref="T:System.InvalidOperationException">Can't change version number after data has been written.</exception>
        </member>
        <member name="P:Rss.RssWriter.XmlFormat">
            <summary>Gets or sets the <see cref="T:System.Xml.Formatting"/> of the XML output.</summary>
            <exception cref="T:System.InvalidOperationException">Can't change XML formatting after data has been written.</exception>
        </member>
        <member name="P:Rss.RssWriter.XmlIndentation">
            <summary>Gets or sets how indentation to write for each level in the hierarchy when XmlFormat is set to <see cref="F:System.Xml.Formatting.Indented"/></summary>
            <exception cref="T:System.InvalidOperationException">Can't change XML formatting after data has been written.</exception>
            <exception cref="T:System.ArgumentException">Setting this property to a negative value.</exception>
        </member>
        <member name="P:Rss.RssWriter.Modules">
            <summary>RSS modules</summary>
        </member>
        <member name="T:Rss.RssReader">
            <summary>Reads an RSS file.</summary>
            <remarks>Provides fast, non-cached, forward-only access to RSS data.</remarks>
        </member>
        <member name="M:Rss.RssReader.#ctor(System.String)">
            <summary>Initializes a new instance of the RssReader class with the specified URL or filename.</summary>
            <param name="url">The URL or filename for the file containing the RSS data.</param>
            <exception cref="T:System.ArgumentException">Occures when unable to retrieve file containing the RSS data.</exception>
        </member>
        <member name="M:Rss.RssReader.#ctor(System.IO.TextReader)">
            <summary>Creates an instance of the RssReader class using the specified TextReader.</summary>
            <param name="textReader">specified TextReader</param>
            <exception cref="T:System.ArgumentException">Occures when unable to retrieve file containing the RSS data.</exception>
        </member>
        <member name="M:Rss.RssReader.#ctor(System.IO.Stream)">
            <summary>Creates an instance of the RssReader class using the specified Stream.</summary>
            <exception cref="T:System.ArgumentException">Occures when unable to retrieve file containing the RSS data.</exception>
            <param name="stream">Stream to read from</param>
        </member>
        <member name="M:Rss.RssReader.Read">
            <summary>Reads the next RssElement from the stream.</summary>
            <returns>An RSS Element</returns>
            <exception cref="T:System.InvalidOperationException">RssReader has been closed, and can not be read.</exception>
            <exception cref="T:System.IO.FileNotFoundException">RSS file not found.</exception>
            <exception cref="T:System.Xml.XmlException">Invalid XML syntax in RSS file.</exception>
            <exception cref="T:System.IO.EndOfStreamException">Unable to read an RssElement. Reached the end of the stream.</exception>
        </member>
        <member name="M:Rss.RssReader.Close">
            <summary>Closes connection to file.</summary>
            <remarks>This method also releases any resources held while reading.</remarks>
        </member>
        <member name="P:Rss.RssReader.Exceptions">
            <summary>A collection of all exceptions the RssReader class has encountered.</summary>
        </member>
        <member name="P:Rss.RssReader.Version">
            <summary>Gets the RSS version of the stream.</summary>
            <value>One of the <see cref="T:Rss.RssVersion"/> values.</value>
        </member>
        <member name="T:Rss.RssBlogChannel">
            <summary>A RSS module that adds elements at the channel level that are common to weblogs.</summary>
        </member>
        <member name="M:Rss.RssBlogChannel.#ctor(System.Uri,System.Uri,System.Uri,System.Uri)">
            <summary>Initialize a new instance of the </summary>
            <param name="blogRoll">The URL of an OPML file containing the blogroll for the site.</param>
            <param name="mySubscriptions">The URL of an OPML file containing the author's RSS subscriptions.</param>
            <param name="blink">
            	The URL of a weblog that the author of the weblog is promoting per Mark Pilgrim's description.
            	<remarks>"http://diveintomark.org/archives/2002/09/17.html#blink_and_youll_miss_it"</remarks>
            </param>
            <param name="changes">
            	The URL of a changes.xml file. When the feed that contains this element updates, it pings a server that updates this file. The presence of this element says to aggregators that they only have to read the changes file to see if this feed has updated. If several feeds point to the same changes file, the aggregator has to do less polling, resulting in better use of server bandwidth, and the Internet as a whole; and resulting in faster scans. Everyone wins. For more technical information, see the howto on the XML-RPC site.
            	<remarks>"http://www.xmlrpc.com/weblogsComForRss"</remarks>
            </param>
        </member>
        <member name="T:Rss.RssItem">
            <summary>A channel may contain any number of items, each of which links to more information about the item, with an optional description</summary>
        </member>
        <member name="M:Rss.RssItem.#ctor">
            <summary>Initialize a new instance of the RssItem class</summary>
        </member>
        <member name="M:Rss.RssItem.ToString">
            <summary>Returns a string representation of the current Object.</summary>
            <returns>The item's title, description, or "RssItem" if the title and description are blank.</returns>
        </member>
        <member name="P:Rss.RssItem.Title">
            <summary>Title of the item</summary>
            <remarks>Maximum length is 100 (For RSS 0.91)</remarks>
        </member>
        <member name="P:Rss.RssItem.Link">
            <summary>URL of the item</summary>
            <remarks>Maximum length is 500 (For RSS 0.91)</remarks>
        </member>
        <member name="P:Rss.RssItem.Description">
            <summary>Item synopsis</summary>
            <remarks>Maximum length is 500 (For RSS 0.91)</remarks>
        </member>
        <member name="P:Rss.RssItem.Author">
            <summary>Email address of the author of the item</summary>
        </member>
        <member name="P:Rss.RssItem.Categories">
            <summary>Provide information regarding the location of the subject matter of the channel in a taxonomy</summary>
        </member>
        <member name="P:Rss.RssItem.Comments">
            <summary>URL of a page for comments relating to the item</summary>
        </member>
        <member name="P:Rss.RssItem.Source">
            <summary>Describes an items source</summary>
        </member>
        <member name="P:Rss.RssItem.Enclosure">
            <summary>A reference to an attachment to the item</summary>
        </member>
        <member name="P:Rss.RssItem.Guid">
            <summary>A string that uniquely identifies the item</summary>
        </member>
        <member name="P:Rss.RssItem.PubDate">
            <summary>Indicates when the item was published</summary>
        </member>
        <member name="T:Mtime.Community.Utility.ResourceManager.DisneyResourceManager">
            <summary>
            Disney资源
            </summary>
        </member>
        <member name="T:Mtime.Community.Utility.Helper.XmlHelper">
            <summary>
            XML实用类
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.XmlHelper.GetNameValue(System.String,System.Object)">
            <summary>
            得到指定键名和值的XML字符串
            </summary>
            <param name="Name">键名</param>
            <param name="Value">值</param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.XmlHelper.LoadSerializedObject(System.Type,System.String)">
            <summary>
            XML反序列成对象
            </summary>
            <param name="type"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.XmlHelper.SerializeObject(System.Object,System.String)">
            <summary>
            将对象序列化成XML
            </summary>
            <param name="o">对象</param>
            <param name="filename">指定文件</param>
        </member>
        <member name="T:Mtime.Community.Utility.Helper.FieldLoader">
            <summary>
            A helper class to load value from datarecord(datareader).
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.FieldLoader.#ctor(System.Data.IDataRecord)">
            <summary>
            Get values from datarecord.
            </summary>
            <param name="record">The input datarecord.</param>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.FieldLoader.FreeRecordSet">
            <summary>
            Free Reference to recordset
            
            </summary>
            <param name="record">NONE</param>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.FieldLoader.GetOrdinal(System.String)">
            <summary>
            Get ordinal in the datarecord of specific field name.
            </summary>
            <param name="name">Name of the column.</param>
            <returns>Ordinal of specific field name.</returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.FieldLoader.GetBoolean(System.String)">
            <summary>
            Gets a boolean value from the datarecord.
            </summary>
            <remarks>
            Returns <see langword="false" /> for null.
            </remarks>
            <param name="name">Name of the column containing the value.</param>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.FieldLoader.GetByte(System.String)">
            <summary>
            Gets a byte value from the datarecord.
            </summary>
            <remarks>
            Returns 0 for null.
            </remarks>
            <param name="name">Name of the column containing the value.</param>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.FieldLoader.GetBytes(System.String,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Invokes the GetBytes method of the underlying datareader.
            </summary>
            <remarks>
            Returns 0 for null.
            </remarks>
            <param name="name">Name of the column containing the value.</param>
            <param name="buffer">Array containing the data.</param>
            <param name="bufferOffset">Offset position within the buffer.</param>
            <param name="fieldOffset">Offset position within the field.</param>
            <param name="length">Length of data to read.</param>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.FieldLoader.GetChar(System.String)">
            <summary>
            Gets a char value from the datarecord.
            </summary>
            <remarks>
            Returns Char.MinValue for null.
            </remarks>
            <param name="name">Name of the column containing the value.</param>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.FieldLoader.GetChars(System.String,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            Invokes the GetChars method of the underlying datareader.
            </summary>
            <remarks>
            Returns 0 for null.
            </remarks>
            <param name="name">Name of the column containing the value.</param>
            <param name="buffer">Array containing the data.</param>
            <param name="bufferOffset">Offset position within the buffer.</param>
            <param name="fieldOffset">Offset position within the field.</param>
            <param name="length">Length of data to read.</param>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.FieldLoader.GetDateTime(System.String)">
            <summary>
            Gets a date value from the datarecord.
            </summary>
            <remarks>
            Returns DateTime.MinValue for null.
            </remarks>
            <param name="name">Name of the column containing the value.</param>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.FieldLoader.GetDecimal(System.String)">
            <summary>
            Gets a decimal value from the datarecord.
            </summary>
            <remarks>
            Returns 0 for null.
            </remarks>
            <param name="name">Name of the column containing the value.</param>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.FieldLoader.GetDouble(System.String)">
            <summary>
            Gets a double from the datarecord.
            </summary>
            <remarks>
            Returns 0 for null.
            </remarks>
            <param name="name">Name of the column containing the value.</param>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.FieldLoader.GetFloat(System.String)">
            <summary>
            Gets a Single value from the datarecord.
            </summary>
            <remarks>
            Returns 0 for null.
            </remarks>
            <param name="name">Name of the column containing the value.</param>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.FieldLoader.GetGuid(System.String)">
            <summary>
            Gets a Guid value from the datarecord.
            </summary>
            <remarks>
            Returns Guid.Empty for null.
            </remarks>
            <param name="name">Name of the column containing the value.</param>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.FieldLoader.GetInt16(System.String)">
            <summary>
            Gets a short value from the datarecord.
            </summary>
            <remarks>
            Returns 0 for null.
            </remarks>
            <param name="name">Name of the column containing the value.</param>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.FieldLoader.GetInt32(System.String)">
            <summary>
            Gets an integer from the datarecord.
            </summary>
            <remarks>
            Returns 0 for null.
            </remarks>
            <param name="name">Name of the column containing the value.</param>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.FieldLoader.GetInt64(System.String)">
            <summary>
            Gets a long value from the datarecord.
            </summary>
            <remarks>
            Returns 0 for null.
            </remarks>
            <param name="name">Name of the column containing the value.</param>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.FieldLoader.GetString(System.String)">
            <summary>
            Gets a string value from the datarecord.
            </summary>
            <remarks>
            Returns empty string for null.
            </remarks>
            <param name="name">Name of the column containing the value.</param>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.FieldLoader.LoadBoolean(System.String,System.Boolean@)">
            <summary>
            Loads a boolean value from the datarecord.
            </summary>
            <param name="name">Name of the column containing the value.</param>
            <param name="field">Field to load.</param>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.FieldLoader.LoadByte(System.String,System.Byte@)">
            <summary>
            Loads a byte value from the datarecord.
            </summary>
            <param name="name">Name of the column containing the value.</param>
            <param name="field">Field to load.</param>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.FieldLoader.LoadBytes(System.String,System.Int64@,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Invokes the GetBytes method of the underlying datarecord.
            </summary>
            <param name="name">Name of the column containing the value.</param>
            <param name="field">Field to load.</param>
            <param name="buffer">Array containing the data.</param>
            <param name="bufferOffset">Offset position within the buffer.</param>
            <param name="fieldOffset">Offset position within the field.</param>
            <param name="length">Length of data to read.</param>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.FieldLoader.LoadChar(System.String,System.Char@)">
            <summary>
            Loads a char value from the datarecord.
            </summary>
            <param name="name">Name of the column containing the value.</param>
            <param name="field">Field to load.</param>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.FieldLoader.LoadChars(System.String,System.Int64@,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            Invokes the GetChars method of the underlying datareader.
            </summary>
            <param name="name">Name of the column containing the value.</param>
            <param name="field">Field to load.</param>
            <param name="buffer">Array containing the data.</param>
            <param name="bufferOffset">Offset position within the buffer.</param>
            <param name="fieldOffset">Offset position within the field.</param>
            <param name="length">Length of data to read.</param>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.FieldLoader.LoadDateTime(System.String,System.DateTime@)">
            <summary>
            Loads a date value from the datarecord.
            </summary>
            <param name="name">Name of the column containing the value.</param>
            <param name="field">Field to load.</param>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.FieldLoader.LoadDecimal(System.String,System.Decimal@)">
            <summary>
            Loads a decimal value from the datarecord.
            </summary>
            <param name="name">Name of the column containing the value.</param>
            <param name="field">Field to load.</param>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.FieldLoader.LoadDouble(System.String,System.Double@)">
            <summary>
            Loads a double value from the datarecord.
            </summary>
            <param name="name">Name of the column containing the value.</param>
            <param name="field">Field to load.</param>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.FieldLoader.LoadFloat(System.String,System.Single@)">
            <summary>
            Loads a float value from the datarecord.
            </summary>
            <param name="name">Name of the column containing the value.</param>
            <param name="field">Field to load.</param>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.FieldLoader.LoadGuid(System.String,System.Guid@)">
            <summary>
            Loads a Guid value from the datarecord.
            </summary>
            <param name="name">Name of the column containing the value.</param>
            <param name="field">Field to load.</param>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.FieldLoader.LoadInt16(System.String,System.Int16@)">
            <summary>
            Loads a short value from the datarecord.
            </summary>
            <param name="name">Name of the column containing the value.</param>
            <param name="field">Field to load.</param>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.FieldLoader.LoadInt32(System.String,System.Int32@)">
            <summary>
            Loads a integer value from the datarecord.
            </summary>
            <param name="name">Name of the column containing the value.</param>
            <param name="field">Field to load.</param>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.FieldLoader.LoadInt32(System.String,System.Int32@,System.Int32)">
            <summary>
            added by jinxiang. for person's sex.
            </summary>
            <param name="name"></param>
            <param name="field"></param>
            <param name="defaultValue"></param>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.FieldLoader.LoadInt64(System.String,System.Int64@)">
            <summary>
            Loads a long value from the datarecord.
            </summary>
            <param name="name">Name of the column containing the value.</param>
            <param name="field">Field to load.</param>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.FieldLoader.LoadString(System.String,System.String@)">
            <summary>
            Loads a string value from the datarecord.
            </summary>
            <param name="name">Name of the column containing the value.</param>
            <param name="field">Field to load.</param>
        </member>
        <member name="T:ProtoBuf.Meta.SubType">
            <summary>
            Represents an inherited type in a type hierarchy.
            </summary>
        </member>
        <member name="M:ProtoBuf.Meta.SubType.#ctor(System.Int32,ProtoBuf.Meta.MetaType)">
            <summary>
            Creates a new SubType instance.
            </summary>
            <param name="fieldNumber">The field-number that is used to encapsulate the data (as a nested
            message) for the derived dype.</param>
            <param name="derivedType">The sub-type to be considered.</param>
        </member>
        <member name="P:ProtoBuf.Meta.SubType.FieldNumber">
            <summary>
            The field-number that is used to encapsulate the data (as a nested
            message) for the derived dype.
            </summary>
        </member>
        <member name="P:ProtoBuf.Meta.SubType.DerivedType">
            <summary>
            The sub-type to be considered.
            </summary>
        </member>
        <member name="T:ProtoBuf.Meta.MetaType">
            <summary>
            Represents a type at runtime for use with protobuf, allowing the field mappings (etc) to be defined
            </summary>
        </member>
        <member name="M:ProtoBuf.Meta.MetaType.ToString">
            <summary>
            Get the name of the type being represented
            </summary>
        </member>
        <member name="M:ProtoBuf.Meta.MetaType.AddSubType(System.Int32,System.Type)">
            <summary>
            Adds a known sub-type to the inheritance model
            </summary>
        </member>
        <member name="M:ProtoBuf.Meta.MetaType.GetSubtypes">
            <summary>
            Obtains the subtypes that are defined for the current type
            </summary>
        </member>
        <member name="M:ProtoBuf.Meta.MetaType.SetCallbacks(System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
            <summary>
            Assigns the callbacks to use during serialiation/deserialization.
            </summary>
            <param name="beforeSerialize">The method (or null) called before serialization begins.</param>
            <param name="afterSerialize">The method (or null) called when serialization is complete.</param>
            <param name="beforeDeserialize">The method (or null) called before deserialization begins (or when a new instance is created during deserialization).</param>
            <param name="afterDeserialize">The method (or null) called when deserialization is complete.</param>
            <returns>The set of callbacks.</returns>
        </member>
        <member name="M:ProtoBuf.Meta.MetaType.SetCallbacks(System.String,System.String,System.String,System.String)">
            <summary>
            Assigns the callbacks to use during serialiation/deserialization.
            </summary>
            <param name="beforeSerialize">The name of the method (or null) called before serialization begins.</param>
            <param name="afterSerialize">The name of the method (or null) called when serialization is complete.</param>
            <param name="beforeDeserialize">The name of the method (or null) called before deserialization begins (or when a new instance is created during deserialization).</param>
            <param name="afterDeserialize">The name of the method (or null) called when deserialization is complete.</param>
            <returns>The set of callbacks.</returns>
        </member>
        <member name="M:ProtoBuf.Meta.MetaType.ThrowIfFrozen">
            <summary>
            Throws an exception if the type has been made immutable
            </summary>
        </member>
        <member name="M:ProtoBuf.Meta.MetaType.Add(System.Int32,System.String)">
            <summary>
            Adds a member (by name) to the MetaType
            </summary>        
        </member>
        <member name="M:ProtoBuf.Meta.MetaType.Add(System.String)">
            <summary>
            Adds a member (by name) to the MetaType
            </summary>     
        </member>
        <member name="M:ProtoBuf.Meta.MetaType.SetSurrogate(System.Type)">
            <summary>
            Performs serialization of this type via a surrogate; all
            other serialization options are ignored and handled
            by the surrogate's configuration.
            </summary>
        </member>
        <member name="M:ProtoBuf.Meta.MetaType.Add(System.String[])">
            <summary>
            Adds a set of members (by name) to the MetaType
            </summary>     
        </member>
        <member name="M:ProtoBuf.Meta.MetaType.Add(System.Int32,System.String,System.Object)">
            <summary>
            Adds a member (by name) to the MetaType
            </summary>        
        </member>
        <member name="M:ProtoBuf.Meta.MetaType.Add(System.Int32,System.String,System.Type,System.Type)">
            <summary>
            Adds a member (by name) to the MetaType, including an itemType and defaultType for representing lists
            </summary>
        </member>
        <member name="M:ProtoBuf.Meta.MetaType.CompileInPlace">
            <summary>
            Compiles the serializer for this type; this is *not* a full
            standalone compile, but can significantly boost performance
            while allowing additional types to be added.
            </summary>
            <remarks>An in-place compile can access non-public types / members</remarks>
        </member>
        <member name="P:ProtoBuf.Meta.MetaType.BaseType">
            <summary>
            Gets the base-type for this type
            </summary>
        </member>
        <member name="P:ProtoBuf.Meta.MetaType.IncludeSerializerMethod">
            <summary>
            When used to compile a model, should public serialization/deserialzation methods
            be included for this type?
            </summary>
        </member>
        <member name="P:ProtoBuf.Meta.MetaType.HasCallbacks">
            <summary>
            Indicates whether the current type has defined callbacks 
            </summary>
        </member>
        <member name="P:ProtoBuf.Meta.MetaType.HasSubtypes">
            <summary>
            Indicates whether the current type has defined subtypes
            </summary>
        </member>
        <member name="P:ProtoBuf.Meta.MetaType.Callbacks">
            <summary>
            Returns the set of callbacks defined for this type
            </summary>
        </member>
        <member name="P:ProtoBuf.Meta.MetaType.Type">
            <summary>
            The runtime type that the meta-type represents
            </summary>
        </member>
        <member name="P:ProtoBuf.Meta.MetaType.UseConstructor">
            <summary>
            Gets or sets whether the type should use a parameterless constructor (the default),
            or whether the type should skip the constructor completely. This option is not supported
            on compact-framework.
            </summary>
        </member>
        <member name="P:ProtoBuf.Meta.MetaType.ConstructType">
            <summary>
            The concrete type to create when a new instance of this type is needed; this may be useful when dealing
            with dynamic proxies, or with interface-based APIs
            </summary>
        </member>
        <member name="P:ProtoBuf.Meta.MetaType.Item(System.Int32)">
            <summary>
            Returns the ValueMember that matchs a given field number, or null if not found
            </summary>
        </member>
        <member name="P:ProtoBuf.Meta.MetaType.EnumPassthru">
            <summary>
            Gets or sets a value indicating that an enum should be treated directly as an int/short/etc, rather
            than enforcing .proto enum rules. This is useful *in particul* for [Flags] enums.
            </summary>
        </member>
        <member name="T:Mtime.Community.Utility.OAuth.OAuthConfigInfo">
            <summary>
            配置对象实体
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.OAuth.OAuthConfigInfo.AppKey">
            <summary>
            获取或设置应用
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.OAuth.OAuthConfigInfo.AppSecret">
            <summary>
            获取或设置应用安全码
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.OAuth.OAuthConfigInfo.UrlAccessToken">
            <summary>
            获取或设置AccessToken地址
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.OAuth.OAuthConfigInfo.UrlAuthorize">
            <summary>
            获取或设置Authorize认证址址
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.OAuth.OAuthConfigInfo.UrlRequestToken">
            <summary>
            获取或设置RequestToken请求地址
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.OAuth.OAuthConfigInfo.UrlCallback">
            <summary>
            返回url
            </summary>
        </member>
        <member name="T:Mtime.Community.Utility.zxing.qrcode.decoder.Mode">
            <summary> <p>See ISO 18004:2006, 6.4.1, Tables 2 and 3. This enum encapsulates the various modes in which
            data can be encoded to bits in the QR code standard.</p>
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="M:Mtime.Community.Utility.zxing.qrcode.decoder.Mode.forBits(System.Int32)">
            <param name="bits">four bits encoding a QR Code data mode
            </param>
            <returns> {@link Mode} encoded by these bits
            </returns>
            <throws>  IllegalArgumentException if bits do not correspond to a known mode </throws>
        </member>
        <member name="M:Mtime.Community.Utility.zxing.qrcode.decoder.Mode.getCharacterCountBits(Mtime.Community.Utility.zxing.qrcode.decoder.Version)">
            <param name="version">version in question
            </param>
            <returns> number of bits used, in this QR Code symbol {@link Version}, to encode the
            count of characters that will follow encoded in this {@link Mode}
            </returns>
        </member>
        <member name="T:Mtime.Community.Utility.OAuth.StringParameter">
            <summary>
            值类型API参数
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.OAuth.StringParameter.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.OAuth.StringParameter.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="name">key</param>
            <param name="value">value</param>
        </member>
        <member name="M:Mtime.Community.Utility.OAuth.StringParameter.#ctor(System.String,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="name">key</param>
            <param name="value">value</param>
        </member>
        <member name="M:Mtime.Community.Utility.OAuth.StringParameter.#ctor(System.String,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="name">key</param>
            <param name="value">value</param>
        </member>
        <member name="M:Mtime.Community.Utility.OAuth.StringParameter.#ctor(System.String,System.Int64)">
            <summary>
            构造函数
            </summary>
            <param name="name">key</param>
            <param name="value">value</param>
        </member>
        <member name="M:Mtime.Community.Utility.OAuth.StringParameter.#ctor(System.String,System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="name">key</param>
            <param name="value">value</param>
        </member>
        <member name="P:Mtime.Community.Utility.OAuth.StringParameter.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="T:Mtime.Community.Utility.OAuth.ResponseType">
            <summary>
            授权认证返回类型
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.OAuth.ResponseType.Code">
            <summary>
            Code
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.OAuth.ResponseType.Token">
            <summary>
            Access Token
            </summary>
        </member>
        <member name="T:Mtime.Community.Utility.OAuth.OAuth2Exception">
            <summary>
            Exception
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.OAuth.OAuth2Exception.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.OAuth.OAuth2Exception.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Mtime.Community.Utility.OAuth.OAuth2Exception.#ctor(System.String,System.Net.WebException)">
            <summary>
            构造函数
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="M:Mtime.Community.Utility.OAuth.OAuth2Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            构造函数
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:Mtime.Community.Utility.OAuth.OAuth2Exception.WebExceptionResult">
            <summary>
            获取 Web Exception Result
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.RemoteService.Protocol.RemoteServerProtocol.ProcessHeader(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            处理初始化的接收，此时还没接收到长度
            </summary>
            <param name="receiveBytes"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.RemoteService.Protocol.RemoteServerProtocol.ProcessBody(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            处理处理中的接收，此时已经接收到长度
            </summary>
            <param name="receiveBytes"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.RemoteService.Protocol.RemoteServerProtocol.Parse(System.Byte[])">
            <summary>
            解析Socket数据
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="T:Mtime.Community.Utility.Client.Base64KeyTransformer">
            <summary>
            A key transformer which converts the item keys into Base64.
            </summary>
        </member>
        <member name="T:Mtime.Community.Utility.Client.ClientConfigSection">
            <summary>
            Configures the <see cref="T:MemcachedClient"/>. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.Client.ClientConfigSection.PostDeserialize">
            <summary>
            Called after deserialization.
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.Client.ClientConfigSection.Servers">
            <summary>
            Returns a collection of Memcached servers which can be used by the client.
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.Client.ClientConfigSection.SocketPool">
            <summary>
            Gets or sets the configuration of the socket pool.
            </summary>
        </member>
        <member name="T:Mtime.Community.Utility.FileLogExcel">
            <summary>
            记录Excel格式的log，第一行为表头。字段之间"\t"分隔
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.GetListItemType(System.Type)">
            <summary>
            Gets the type of the typed list's items.
            </summary>
            <param name="type">The type.</param>
            <returns>The type of the typed list's items.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.ItemsUnitializedValue``1(System.Collections.Generic.IList{``0})">
            <summary>
            Tests whether the list's items are their unitialized value.
            </summary>
            <param name="list">The list.</param>
            <returns>Whether the list's items are their unitialized value</returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberUnderlyingType(System.Reflection.MemberInfo)">
            <summary>
            Gets the member's underlying type.
            </summary>
            <param name="member">The member.</param>
            <returns>The underlying type of the member.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.IsIndexedProperty(System.Reflection.MemberInfo)">
            <summary>
            Determines whether the member is an indexed property.
            </summary>
            <param name="member">The member.</param>
            <returns>
            	<c>true</c> if the member is an indexed property; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.IsIndexedProperty(System.Reflection.PropertyInfo)">
            <summary>
            Determines whether the property is an indexed property.
            </summary>
            <param name="property">The property.</param>
            <returns>
            	<c>true</c> if the property is an indexed property; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberValue(System.Reflection.MemberInfo,System.Object)">
            <summary>
            Gets the member's value on the object.
            </summary>
            <param name="member">The member.</param>
            <param name="target">The target object.</param>
            <returns>The member's value on the object.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.SetMemberValue(System.Reflection.MemberInfo,System.Object,System.Object)">
            <summary>
            Sets the member's value on the target object.
            </summary>
            <param name="member">The member.</param>
            <param name="target">The target.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.CanReadMemberValue(System.Reflection.MemberInfo)">
            <summary>
            Determines whether the specified MemberInfo can be read.
            </summary>
            <param name="member">The MemberInfo to determine whether can be read.</param>
            <returns>
            	<c>true</c> if the specified MemberInfo can be read; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.CanSetMemberValue(System.Reflection.MemberInfo)">
            <summary>
            Determines whether the specified MemberInfo can be set.
            </summary>
            <param name="member">The MemberInfo to determine whether can be set.</param>
            <returns>
            	<c>true</c> if the specified MemberInfo can be set; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Mtime.Community.Utility.Json.JsonString.ToString">
            <returns>A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.</returns>
        </member>
        <member name="M:Mtime.Community.Utility.Json.JsonFalse.ToString">
            <returns>A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.</returns>
        </member>
        <member name="M:Mtime.Community.Utility.HttpModule.Helper.DDOSVerifyCode.Validate(System.String,System.String,System.String@)">
            <summary>
            验证输入的注册码是否正确
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.HttpModule.Helper.DDOSVerifyCode.GetImageUrl(System.String)">
            <summary>
            获取验证码图片URL
            </summary>
            <param name="code">验证码codeID</param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Controls.Pager.ValidateValue">
            <summary>
            赋值是否有效
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.Controls.Pager.BuiltPageNavigatorHtml">
            <summary>
            生成导航html
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Controls.Pager.BuiltPageNumberHtml(System.Int32,System.Int32,System.Int32,Mtime.Community.Utility.Controls.Pager.PagerType)">
            <summary>
            生成页码区
            </summary>
            <param name="startFor">开始的页码</param>
            <param name="endFor">结束的页码</param>
            <param name="maxPageIndex">最大的页码</param>
            <param name="pagerType">控件显示的样式</param>
            <returns></returns>
        </member>
        <member name="P:Mtime.Community.Utility.Controls.Pager.ClientJSFunc">
            <summary>
            设定客户端要执行的脚本
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.Controls.Pager.PageSign">
            <summary>
            设定分页标记
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.Controls.Pager.PrevPageName">
            <summary>
            设定上一页显示的文字
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.Controls.Pager.NextPageName">
            <summary>
            设定下一页显示的文字
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.Controls.Pager.FirstPageName">
            <summary>
            设定首页显示的文字
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.Controls.Pager.EndPageName">
            <summary>
            设定尾页显示的文字
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.Controls.Pager.TotalRecord">
            <summary>
            总记录数
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.Controls.Pager.CurrentPageIndex">
            <summary>
            当前页面
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.Controls.Pager.PageSize">
            <summary>
            页尺寸
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.Controls.Pager.HyperLinkCssClass">
            <summary>
            超链接样式
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.Controls.Pager.ButtonCssClass">
            <summary>
            提交按钮样式
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.Controls.Pager.TextBoxCssClass">
            <summary>
            页码输入框样式
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.Controls.Pager.FontCssClass">
            <summary>
            文字样式
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.Controls.Pager.NumberCssClass">
            <summary>
            数字样式
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.Controls.Pager.UnitName">
            <summary>
            设定量词
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.Controls.Pager.RelatedName">
            <summary>
            关联类型名字(如:电影\影人等)
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.Controls.Pager.IsHideCurrentRecordSegment">
            <summary>
            是否隐藏当前显示记录段(默认值:flase)
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.Controls.Pager.IsHideSum">
            <summary>
            是否隐藏总记录数(默认值:flase)
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.Controls.Pager.IsHideCurrentPageIndex">
            <summary>
            是否隐藏当前页／总页数(默认值:true)
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.Controls.Pager.IsHideFirstPage">
            <summary>
            是否隐藏首页导航(默认值:flase)
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.Controls.Pager.IsHidePrevPage">
            <summary>
            是否隐藏上一页导航(默认值:flase)
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.Controls.Pager.IsHideNextPage">
            <summary>
            是否隐藏下一页导航(默认值:flase)
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.Controls.Pager.IsHidePageNumber">
            <summary>
            是否隐藏页码导航(默认值:flase)
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.Controls.Pager.IsHideEndPage">
            <summary>
            是否隐藏尾页导航(默认值:flase)
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.Controls.Pager.IsHideGo">
            <summary>
            是否隐藏跳转导航(默认值:flase)
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.Controls.Pager.AppendParamString">
            <summary>
            附加的Url参数
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.ObfuscatorImages.GenerateImageList(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            产生随机的图片列表
            </summary>
            <param name="originValue"></param>
            <param name="charWidth"></param>
            <param name="charHeight"></param>
            <returns></returns>
        </member>
        <member name="T:Mtime.Community.Utility.Threading.InterlockedEx">
            <summary>Provides atomic operations for variables that are shared by multiple threads.</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Mtime.Community.Utility.Threading.InterlockedEx.IfThen(System.Int32@,System.Int32,System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:Mtime.Community.Utility.Threading.InterlockedEx.IfThen(System.Int32@,System.Int32,System.Int32,System.Int32@)" -->
        <member name="M:Mtime.Community.Utility.Threading.InterlockedEx.And(System.Int32@,System.Int32)">
            <summary>Bitwise ANDs two 32-bit integers and replaces the first integer with the ANDed value, as an atomic operation.</summary>
            <return>Returns the previous value of <paramref name="target"/>.</return>
            <param name="target">A variable containing the first value to be ANDed. The bitwise AND of the two values is stored in <paramref name="target"/>.</param>
            <param name="with">The value to AND with <paramref name="target"/>.</param>
        </member>
        <member name="M:Mtime.Community.Utility.Threading.InterlockedEx.Or(System.Int32@,System.Int32)">
            <summary>Bitwise ORs two 32-bit integers and replaces the first integer with the ORed value, as an atomic operation.</summary>
            <return>Returns the previous value of <paramref name="target"/>.</return>
            <param name="target">A variable containing the first value to be ORed. The bitwise OR of the two values is stored in <paramref name="target"/>.</param>
            <param name="with">The value to OR with <paramref name="target"/>.</param>
        </member>
        <member name="M:Mtime.Community.Utility.Threading.InterlockedEx.Xor(System.Int32@,System.Int32)">
            <summary>Bitwise XORs two 32-bit integers and replaces the first integer with the XORed value, as an atomic operation.</summary>
            <return>Returns the previous value of <paramref name="target"/>.</return>
            <param name="target">A variable containing the first value to be XORed. The bitwise XOR of the two values is stored in <paramref name="target"/>.</param>
            <param name="with">The value to XOR with <paramref name="target"/>.</param>
        </member>
        <member name="M:Mtime.Community.Utility.Threading.InterlockedEx.MaskedAnd(System.Int32@,System.Int32,System.Int32)">
            <summary>Bitwise ANDs two 32-bit integers with a mask replacing the first integer with the ANDed value, as an atomic operation.</summary>
            <return>Returns the previous value of <paramref name="target"/>.</return>
            <param name="target">A variable containing the first value to be ANDed. The bitwise AND of the two values is stored in <paramref name="target"/>.</param>
            <param name="with">The value to AND with <paramref name="target"/>.</param>
            <param name="mask">The value to AND with <paramref name="target"/> prior to ANDing with <paramref name="with"/>.</param>
        </member>
        <member name="M:Mtime.Community.Utility.Threading.InterlockedEx.MaskedOr(System.Int32@,System.Int32,System.Int32)">
            <summary>Bitwise ORs two 32-bit integers with a mask replacing the first integer with the ORed value, as an atomic operation.</summary>
            <return>Returns the previous value of <paramref name="target"/>.</return>
            <param name="target">A variable containing the first value to be ORed. The bitwise OR of the two values is stored in <paramref name="target"/>.</param>
            <param name="with">The value to OR with <paramref name="target"/>.</param>
            <param name="mask">The value to AND with <paramref name="target"/> prior to ORing with <paramref name="with"/>.</param>
        </member>
        <member name="M:Mtime.Community.Utility.Threading.InterlockedEx.MaskedXor(System.Int32@,System.Int32,System.Int32)">
            <summary>Bitwise XORs two 32-bit integers with a mask replacing the first integer with the XORed value, as an atomic operation.</summary>
            <return>Returns the previous value of <paramref name="target"/>.</return>
            <param name="target">A variable containing the first value to be XORed. The bitwise XOR of the two values is stored in <paramref name="target"/>.</param>
            <param name="with">The value to XOR with <paramref name="target"/>.</param>
            <param name="mask">The value to AND with <paramref name="target"/> prior to XORing with <paramref name="with"/>.</param>
        </member>
        <member name="M:Mtime.Community.Utility.Threading.InterlockedEx.MaskedExchange(System.Int32@,System.Int32,System.Int32)">
            <summary>Sets a variable to a specified value as an atomic operation.</summary>
            <return>Returns the previous value of <paramref name="target"/>.</return>
            <param name="target">A variable containing the value to be replaced.</param>
            <param name="mask">The bits to leave unaffected in <paramref name="target"/> prior to ORing with <paramref name="value"/>.</param>
            <param name="value">The value to reaplce <paramref name="target"/> with.</param>
        </member>
        <member name="M:Mtime.Community.Utility.Threading.InterlockedEx.BitTestAndSet(System.Int32@,System.Int32)">
            <summary>Turns a bit on and returns whether or not it was on.</summary>
            <return>Returns whether the bit was on prior to calling this method.</return>
            <param name="target">A variable containing the value that is to have a bit turned on.</param>
            <param name="bitNum">The bit (0-31) in <paramref name="target"/> that should be turned on.</param>
        </member>
        <member name="M:Mtime.Community.Utility.Threading.InterlockedEx.BitTestAndReset(System.Int32@,System.Int32)">
            <summary>Turns a bit off and returns whether or not it was on.</summary>
            <return>Returns whether the bit was on prior to calling this method.</return>
            <param name="target">A variable containing the value that is to have a bit turned off.</param>
            <param name="bitNum">The bit (0-31) in <paramref name="target"/> that should be turned off.</param>
        </member>
        <member name="M:Mtime.Community.Utility.Threading.InterlockedEx.BitTestAndCompliment(System.Int32@,System.Int32)">
            <summary>Flips an on bit off or and off bit on.</summary>
            <return>Returns whether the bit was on prior to calling this method.</return>
            <param name="target">A variable containing the value that is to have a bit flipped.</param>
            <param name="bitNum">The bit (0-31) in <paramref name="target"/> that should be flipped.</param>
        </member>
        <member name="M:Mtime.Community.Utility.Threading.InterlockedEx.MaskedAdd(System.Int32@,System.Int32,System.Int32)">
            <summary>Adds two integers and replaces the first integer with the sum, as an atomic operation.</summary>
            <return>Returns the previous value of <paramref name="target"/>.</return>
            <param name="target">A variable containing the value to be replaced.</param>
            <param name="value">The value to add to <paramref name="target"/>.</param>
            <param name="mask">The bits in <paramref name="target"/> that should not be affected by adding.</param>
        </member>
        <member name="M:Mtime.Community.Utility.Threading.InterlockedEx.Max(System.Int32@,System.Int32)">
            <summary>Increases a value to a new value if the new value is larger.</summary>
            <return>Returns the previous value of <paramref name="target"/>.</return>
            <param name="target">A variable containing the value that might be increased to a new maximum.</param>
            <param name="val">The value that if larger than <paramref name="target"/> will be placed in <paramref name="target"/>.</param>
        </member>
        <member name="M:Mtime.Community.Utility.Threading.InterlockedEx.Min(System.Int32@,System.Int32)">
            <summary>Decreases a value to a new value if the new value is smaller.</summary>
            <return>Returns the previous value of <paramref name="target"/>.</return>
            <param name="target">A variable containing the value that might be decreased to a new minimum.</param>
            <param name="val">The value that if smaller than <paramref name="target"/> will be placed in <paramref name="target"/>.</param>
        </member>
        <member name="T:Mtime.MongoDB.Mongo">
            <summary>
            Description of Mongo.
            </summary>
        </member>
        <member name="M:Mtime.MongoDB.Mongo.#ctor(System.String)">
            <summary>
            Database.config文件中配置的dbMap数据库连接映射名
            </summary>
        </member>
        <member name="M:Mtime.MongoDB.Mongo.GetDatabase(System.String)">
            <summary>
            获取数据库对象
            </summary>
        </member>
        <member name="M:Mtime.MongoDB.Mongo.GetDatabaseList">
            <summary>
            获取数据库名称列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mtime.MongoDB.Mongo.DropDatabase(System.String)">
            <summary>
            删除数据库
            </summary>
            <param name="databaseName"></param>
        </member>
        <member name="T:Mtime.Community.Utility.Helper.MongoDBFieldLoader">
            <summary>
            A helper class to load value from datarecord(datareader).
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.MongoDBFieldLoader.GetBoolean(Mtime.MongoDB.Document,System.String)">
            <summary>
            Gets a boolean value from the datarecord.
            </summary>
            <remarks>
            Returns <see langword="false" /> for null.
            </remarks>
            <param name="name">Name of the column containing the value.</param>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.MongoDBFieldLoader.GetByte(Mtime.MongoDB.Document,System.String)">
            <summary>
            Gets a byte value from the datarecord.
            </summary>
            <remarks>
            Returns 0 for null.
            </remarks>
            <param name="name">Name of the column containing the value.</param>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.MongoDBFieldLoader.GetChar(Mtime.MongoDB.Document,System.String)">
            <summary>
            Gets a char value from the datarecord.
            </summary>
            <remarks>
            Returns Char.MinValue for null.
            </remarks>
            <param name="name">Name of the column containing the value.</param>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.MongoDBFieldLoader.GetDateTime(Mtime.MongoDB.Document,System.String)">
            <summary>
            Gets a date value from the datarecord.
            </summary>
            <remarks>
            Returns DateTime.MinValue for null.
            </remarks>
            <param name="name">Name of the column containing the value.</param>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.MongoDBFieldLoader.GetDouble(Mtime.MongoDB.Document,System.String)">
            <summary>
            Gets a double from the datarecord.
            </summary>
            <remarks>
            Returns 0 for null.
            </remarks>
            <param name="name">Name of the column containing the value.</param>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.MongoDBFieldLoader.GetFloat(Mtime.MongoDB.Document,System.String)">
            <summary>
            Gets a Single value from the datarecord.
            </summary>
            <remarks>
            Returns 0 for null.
            </remarks>
            <param name="name">Name of the column containing the value.</param>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.MongoDBFieldLoader.GetGuid(Mtime.MongoDB.Document,System.String)">
            <summary>
            Gets a Guid value from the datarecord.
            </summary>
            <remarks>
            Returns Guid.Empty for null.
            </remarks>
            <param name="name">Name of the column containing the value.</param>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.MongoDBFieldLoader.GetInt32(Mtime.MongoDB.Document,System.String)">
            <summary>
            Gets an integer from the datarecord.
            </summary>
            <remarks>
            Returns 0 for null.
            </remarks>
            <param name="name">Name of the column containing the value.</param>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.MongoDBFieldLoader.GetInt64(Mtime.MongoDB.Document,System.String)">
            <summary>
            Gets a long value from the datarecord.
            </summary>
            <remarks>
            Returns 0 for null.
            </remarks>
            <param name="name">Name of the column containing the value.</param>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.MongoDBFieldLoader.GetString(Mtime.MongoDB.Document,System.String)">
            <summary>
            Gets a string value from the datarecord.
            </summary>
            <remarks>
            Returns empty string for null.
            </remarks>
            <param name="name">Name of the column containing the value.</param>
        </member>
        <member name="T:Mtime.MongoDB.Bson.BsonWriter">
            <summary>
            Class that knows how to format a native object into bson bits.
            </summary>
        </member>
        <member name="T:Mtime.Community.Utility.Client.SerializedItem">
            <summary>
            Represents an object either being retrieved from the cache
            or being sent to the cache.
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.Client.SerializedItem.#ctor(System.UInt16,System.ArraySegment{System.Byte})">
            <summary>
            Initializes a new instance of <see cref="T:SerializedItem"/>.
            </summary>
            <param name="flags">Custom item data.</param>
            <param name="data">The serialized item.</param>
        </member>
        <member name="P:Mtime.Community.Utility.Client.SerializedItem.Data">
            <summary>
            The data representing the item being stored/retireved.
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.Client.SerializedItem.Flag">
            <summary>
            Flags set for this instance.
            </summary>
        </member>
        <member name="T:Mtime.Community.Utility.Redis.RedisServerPool">
            <summary>
            TODO:这里的设计有问题，ServerPool应该是个逻辑的节点->对应多个相同的物理节点
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory">
            <summary>
            Basic implementation of <see cref="T:ICSharpCode.SharpZipLib.Zip.IEntryFactory"></see>
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.IEntryFactory">
            <summary>
            Defines factory methods for creating new <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry"></see> values.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.IEntryFactory.MakeFileEntry(System.String)">
            <summary>
            Create a <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry"/> for a file given its name
            </summary>
            <param name="fileName">The name of the file to create an entry for.</param>
            <returns></returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.IEntryFactory.MakeDirectoryEntry(System.String)">
            <summary>
            Create a <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry"/> for a directory given its name
            </summary>
            <param name="directoryName">The name of the directory to create an entry for.</param>
            <returns></returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.IEntryFactory.NameTransform">
            <summary>
            Get/set the <see cref="T:ICSharpCode.SharpZipLib.Core.INameTransform"></see> applicable.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.#ctor">
            <summary>
            Initialise a new instance of the <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory"/> class.
            </summary>
            <remarks>A default <see cref="T:ICSharpCode.SharpZipLib.Core.INameTransform"/>, and the LastWriteTime for files is used.</remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.#ctor(ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.TimeSetting)">
            <summary>
            Initiailise a new instance of <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory"/> using the specified <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.TimeSetting"/>
            </summary>
            <param name="timeSetting"></param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.#ctor(System.DateTime)">
            <summary>
            Initialise a new instance of <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory"/> using the specified <see cref="T:System.DateTime"/>
            </summary>
            <param name="time">The time to set all <see cref="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.DateTime"/> values to.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.MakeFileEntry(System.String)">
            <summary>
            Make a new ZipEntry for a file.
            </summary>
            <param name="fileName">The name of the file to create a new entry for.</param>
            <returns>Returns a new <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry"/> based on the <paramref name="fileName"/>.</returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.NameTransform">
            <summary>
            Get / set the <see cref="T:ICSharpCode.SharpZipLib.Core.INameTransform"/> to be used when creating new <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry"/> values.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.Setting">
            <summary>
            Get /set the <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.TimeSetting"/> in use.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.FixedDateTime">
            <summary>
            Get / set the <see cref="T:System.DateTime"/> value to use when <see cref="P:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.Setting"/> is set to <see cref="F:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.TimeSetting.Fixed"/>
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.GetAttributes">
            <summary>
            A bitmask defining the attributes to be retrieved from the actual file.
            </summary>
            <remarks>The default is to get all possible attributes from the actual file.</remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.SetAttributes">
            <summary>
            A bitmask defining which attributes to be set on.
            </summary>
            <remarks>By default no attributes are set on.</remarks>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.TimeSetting">
            <summary>
            Defines the possible values to be used for the <see cref="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.DateTime"/>.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.TimeSetting.LastWriteTime">
            <summary>
            Use the recorded LastWriteTime value for the file.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.TimeSetting.LastWriteTimeUtc">
            <summary>
            Use the recorded LastWriteTimeUtc value for the file
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.TimeSetting.CreateTime">
            <summary>
            Use the recorded CreateTime value for the file.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.TimeSetting.CreateTimeUtc">
            <summary>
            Use the recorded CreateTimeUtc value for the file.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.TimeSetting.LastAccessTime">
            <summary>
            Use the recorded LastAccessTime value for the file.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.TimeSetting.LastAccessTimeUtc">
            <summary>
            Use the recorded LastAccessTimeUtc value for the file.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.TimeSetting.Fixed">
            <summary>
            Use a fixed value.
            </summary>
            <remarks>The actual <see cref="T:System.DateTime"/> value used can be
            specified via the <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.#ctor(System.DateTime)"/> constructor or 
            using the <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.#ctor(ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.TimeSetting)"/> with the setting set
            to <see cref="F:ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.TimeSetting.Fixed"/> which will use the <see cref="T:System.DateTime"/> when this class was constructed.</remarks>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.UseZip64">
            <summary>
            Determines how entries are tested to see if they should use Zip64 extensions or not.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.UseZip64.Off">
            <summary>
            Zip64 will not be forced on entries during processing.
            </summary>
            <remarks>An entry can have this overridden if required <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipEntry.ForceZip64"></see></remarks>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.UseZip64.On">
            <summary>
            Zip64 should always be used.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.UseZip64.Dynamic">
            <summary>
            #ZipLib will determine use based on entry values when added to archive.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.CompressionMethod">
            <summary>
            The kind of compression used for an entry in an archive
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.CompressionMethod.Stored">
            <summary>
            A direct copy of the file contents is held in the archive
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.CompressionMethod.Deflated">
            <summary>
            Common Zip compression method using a sliding dictionary 
            of up to 32KB and secondary compression from Huffman/Shannon-Fano trees
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.CompressionMethod.Deflate64">
            <summary>
            An extension to deflate with a 64KB window. Not supported by #Zip currently
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.CompressionMethod.BZip2">
            <summary>
            Not supported by #Zip currently
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.CompressionMethod.WinZipAES">
            <summary>
            WinZip special for AES encryption, Not supported by #Zip
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm">
            <summary>
            Identifies the encryption algorithm used for an entry
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm.None">
            <summary>
            No encryption has been used.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm.PkzipClassic">
            <summary>
            Encrypted using PKZIP 2.0 or 'classic' encryption.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm.Des">
            <summary>
            DES encryption has been used.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm.RC2">
            <summary>
            RCS encryption has been used for encryption.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm.TripleDes168">
            <summary>
            Triple DES encryption with 168 bit keys has been used for this entry.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm.TripleDes112">
            <summary>
            Triple DES with 112 bit keys has been used for this entry.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm.Aes128">
            <summary>
            AES 128 has been used for encryption.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm.Aes192">
            <summary>
            AES 192 has been used for encryption.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm.Aes256">
            <summary>
            AES 256 has been used for encryption.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm.RC2Corrected">
            <summary>
            RC2 corrected has been used for encryption.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm.Blowfish">
            <summary>
            Blowfish has been used for encryption.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm.Twofish">
            <summary>
            Twofish has been used for encryption.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm.RC4">
            <summary>
            RCS has been used for encryption.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm.Unknown">
            <summary>
            An unknown algorithm has been used for encryption.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.GeneralBitFlags">
            <summary>
            Defines the contents of the general bit flags field for an archive entry.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.GeneralBitFlags.Encrypted">
            <summary>
            Bit 0 if set indicates that the file is encrypted
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.GeneralBitFlags.Method">
            <summary>
            Bits 1 and 2 - Two bits defining the compression method (only for Method 6 Imploding and 8,9 Deflating)
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.GeneralBitFlags.Descriptor">
            <summary>
            Bit 3 if set indicates a trailing data desciptor is appended to the entry data
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.GeneralBitFlags.ReservedPKware4">
            <summary>
            Bit 4 is reserved for use with method 8 for enhanced deflation
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.GeneralBitFlags.Patched">
            <summary>
            Bit 5 if set indicates the file contains Pkzip compressed patched data.
            Requires version 2.7 or greater.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.GeneralBitFlags.StrongEncryption">
            <summary>
            Bit 6 if set strong encryption has been used for this entry.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.GeneralBitFlags.Unused7">
            <summary>
            Bit 7 is currently unused
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.GeneralBitFlags.Unused8">
            <summary>
            Bit 8 is currently unused
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.GeneralBitFlags.Unused9">
            <summary>
            Bit 9 is currently unused
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.GeneralBitFlags.Unused10">
            <summary>
            Bit 10 is currently unused
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.GeneralBitFlags.UnicodeText">
            <summary>
            Bit 11 if set indicates the filename and 
            comment fields for this file must be encoded using UTF-8.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.GeneralBitFlags.EnhancedCompress">
            <summary>
            Bit 12 is documented as being reserved by PKware for enhanced compression.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.GeneralBitFlags.HeaderMasked">
            <summary>
            Bit 13 if set indicates that values in the local header are masked to hide
            their actual values, and the central directory is encrypted.
            </summary>
            <remarks>
            Used when encrypting the central directory contents.
            </remarks>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.GeneralBitFlags.ReservedPkware14">
            <summary>
            Bit 14 is documented as being reserved for use by PKware
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.GeneralBitFlags.ReservedPkware15">
            <summary>
            Bit 15 is documented as being reserved for use by PKware
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ZipConstants">
            <summary>
            This class contains constants used for Zip format files
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.VersionMadeBy">
            <summary>
            The version made by field for entries in the central header when created by this library
            </summary>
            <remarks>
            This is also the Zip version for the library when comparing against the version required to extract
            for an entry.  See <see cref="P:ICSharpCode.SharpZipLib.Zip.ZipInputStream.CanDecompressEntry"/>.
            </remarks>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.VERSION_MADE_BY">
            <summary>
            The version made by field for entries in the central header when created by this library
            </summary>
            <remarks>
            This is also the Zip version for the library when comparing against the version required to extract
            for an entry.  See <see cref="P:ICSharpCode.SharpZipLib.Zip.ZipInputStream.CanDecompressEntry">ZipInputStream.CanDecompressEntry</see>.
            </remarks>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.VersionStrongEncryption">
            <summary>
            The minimum version required to support strong encryption
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.VERSION_STRONG_ENCRYPTION">
            <summary>
            The minimum version required to support strong encryption
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.VersionZip64">
            <summary>
            The version required for Zip64 extensions
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.LocalHeaderBaseSize">
            <summary>
            Size of local entry header (excluding variable length fields at end)
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.LOCHDR">
            <summary>
            Size of local entry header (excluding variable length fields at end)
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.Zip64DataDescriptorSize">
            <summary>
            Size of Zip64 data descriptor
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.DataDescriptorSize">
            <summary>
            Size of data descriptor
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.EXTHDR">
            <summary>
            Size of data descriptor
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CentralHeaderBaseSize">
            <summary>
            Size of central header entry (excluding variable fields)
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CENHDR">
            <summary>
            Size of central header entry
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.EndOfCentralRecordBaseSize">
            <summary>
            Size of end of central record (excluding variable fields)
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.ENDHDR">
            <summary>
            Size of end of central record (excluding variable fields)
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CryptoHeaderSize">
            <summary>
            Size of 'classic' cryptographic header stored before any entry data
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CRYPTO_HEADER_SIZE">
            <summary>
            Size of cryptographic header stored before entry data
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.LocalHeaderSignature">
            <summary>
            Signature for local entry header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.LOCSIG">
            <summary>
            Signature for local entry header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.SpanningSignature">
            <summary>
            Signature for spanning entry
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.SPANNINGSIG">
            <summary>
            Signature for spanning entry
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.SpanningTempSignature">
            <summary>
            Signature for temporary spanning entry
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.SPANTEMPSIG">
            <summary>
            Signature for temporary spanning entry
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.DataDescriptorSignature">
            <summary>
            Signature for data descriptor
            </summary>
            <remarks>
            This is only used where the length, Crc, or compressed size isnt known when the
            entry is created and the output stream doesnt support seeking.
            The local entry cannot be 'patched' with the correct values in this case
            so the values are recorded after the data prefixed by this header, as well as in the central directory.
            </remarks>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.EXTSIG">
            <summary>
            Signature for data descriptor
            </summary>
            <remarks>
            This is only used where the length, Crc, or compressed size isnt known when the
            entry is created and the output stream doesnt support seeking.
            The local entry cannot be 'patched' with the correct values in this case
            so the values are recorded after the data prefixed by this header, as well as in the central directory.
            </remarks>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CENSIG">
            <summary>
            Signature for central header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CentralHeaderSignature">
            <summary>
            Signature for central header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.Zip64CentralFileHeaderSignature">
            <summary>
            Signature for Zip64 central file header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CENSIG64">
            <summary>
            Signature for Zip64 central file header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.Zip64CentralDirLocatorSignature">
            <summary>
            Signature for Zip64 central directory locator
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.ArchiveExtraDataSignature">
            <summary>
            Signature for archive extra data signature (were headers are encrypted).
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CentralHeaderDigitalSignature">
            <summary>
            Central header digitial signature
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CENDIGITALSIG">
            <summary>
            Central header digitial signature
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.EndOfCentralDirectorySignature">
            <summary>
            End of central directory record signature
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.ENDSIG">
            <summary>
            End of central directory record signature
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipConstants.ConvertToString(System.Byte[],System.Int32)">
            <summary>
            Convert a portion of a byte array to a string.
            </summary>		
            <param name="data">
            Data to convert to string
            </param>
            <param name="count">
            Number of bytes to convert starting from index 0
            </param>
            <returns>
            data[0]..data[length - 1] converted to a string
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipConstants.ConvertToString(System.Byte[])">
            <summary>
            Convert a byte array to string
            </summary>
            <param name="data">
            Byte array to convert
            </param>
            <returns>
            <paramref name="data">data</paramref>converted to a string
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipConstants.ConvertToStringExt(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Convert a byte array to string
            </summary>
            <param name="flags">The applicable general purpose bits flags</param>
            <param name="data">
            Byte array to convert
            </param>
            <param name="count">The number of bytes to convert.</param>
            <returns>
            <paramref name="data">data</paramref>converted to a string
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipConstants.ConvertToStringExt(System.Int32,System.Byte[])">
            <summary>
            Convert a byte array to string
            </summary>
            <param name="data">
            Byte array to convert
            </param>
            <param name="flags">The applicable general purpose bits flags</param>
            <returns>
            <paramref name="data">data</paramref>converted to a string
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipConstants.ConvertToArray(System.String)">
            <summary>
            Convert a string to a byte array
            </summary>
            <param name="str">
            String to convert to an array
            </param>
            <returns>Converted array</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipConstants.ConvertToArray(System.Int32,System.String)">
            <summary>
            Convert a string to a byte array
            </summary>
            <param name="flags">The applicable general purpose bits flags</param>
            <param name="str">
            String to convert to an array
            </param>
            <returns>Converted array</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipConstants.#ctor">
            <summary>
            Initialise default instance of <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipConstants">ZipConstants</see>
            </summary>
            <remarks>
            Private to prevent instances being created.
            </remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipConstants.DefaultCodePage">
            <summary>
            Default encoding used for string conversion.  0 gives the default system Ansi code page.
            Dont use unicode encodings if you want to be Zip compatible!
            Using the default code page isnt the full solution neccessarily
            there are many variable factors, codepage 850 is often a good choice for
            European users, however be careful about compatability.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator">
             <summary>
             This class allows us to retrieve a specified number of bits from
             the input buffer, as well as copy big byte blocks.
            
             It uses an int buffer to store up to 31 bits for direct
             manipulation.  This guarantees that we can get at least 16 bits,
             but we only need at most 15, so this is all safe.
            
             There are some optimizations in this class, for example, you must
             never peek more than 8 bits more than needed, and you must first
             peek bits before you may drop them.  This is not a general purpose
             class but optimized for the behaviour of the Inflater.
            
             authors of the original java version : John Leuner, Jochen Hoenicke
             </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.#ctor">
            <summary>
            Constructs a default StreamManipulator with all buffers empty
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.PeekBits(System.Int32)">
            <summary>
            Get the next sequence of bits but don't increase input pointer.  bitCount must be
            less or equal 16 and if this call succeeds, you must drop
            at least n - 8 bits in the next call.
            </summary>
            <param name="bitCount">The number of bits to peek.</param>
            <returns>
            the value of the bits, or -1 if not enough bits available.  */
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.DropBits(System.Int32)">
            <summary>
            Drops the next n bits from the input.  You should have called PeekBits
            with a bigger or equal n before, to make sure that enough bits are in
            the bit buffer.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.GetBits(System.Int32)">
            <summary>
            Gets the next n bits and increases input pointer.  This is equivalent
            to <see cref="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.PeekBits(System.Int32)"/> followed by <see cref="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.DropBits(System.Int32)"/>, except for correct error handling.
            </summary>
            <param name="bitCount">The number of bits to retrieve.</param>
            <returns>
            the value of the bits, or -1 if not enough bits available.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.SkipToByteBoundary">
            <summary>
            Skips to the next byte boundary.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.CopyBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copies bytes from input buffer to output buffer starting
            at output[offset].  You have to make sure, that the buffer is
            byte aligned.  If not enough bytes are available, copies fewer
            bytes.
            </summary>
            <param name="output">
            The buffer to copy bytes to.
            </param>
            <param name="offset">
            The offset in the buffer at which copying starts
            </param>
            <param name="length">
            The length to copy, 0 is allowed.
            </param>
            <returns>
            The number of bytes copied, 0 if no bytes were available.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Length is less than zero
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Bit buffer isnt byte aligned
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.Reset">
            <summary>
            Resets state and empties internal buffers
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.SetInput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Add more input for consumption.
            Only call when IsNeedingInput returns true
            </summary>
            <param name="buffer">data to be input</param>
            <param name="offset">offset of first byte of input</param>
            <param name="count">number of bytes of input to add.</param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.AvailableBits">
            <summary>
            Gets the number of bits available in the bit buffer.  This must be
            only called when a previous PeekBits() returned -1.
            </summary>
            <returns>
            the number of bits available.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.AvailableBytes">
            <summary>
            Gets the number of bytes available.
            </summary>
            <returns>
            The number of bytes available.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.IsNeedingInput">
            <summary>
            Returns true when SetInput can be called
            </summary>
        </member>
        <member name="T:Mtime.Community.Utility.HttpCompress.DeflateFilter">
            <summary>
            Summary description for DeflateFilter.
            </summary>
        </member>
        <member name="T:Mtime.Community.Utility.HttpCompress.CompressingFilter">
            <summary>
            Base for any HttpFilter that performing compression
            </summary>
            <remarks>
            When implementing this class, you need to implement a <see cref="T:Mtime.Community.Utility.HttpCompress.HttpOutputFilter"/>
            along with a <see cref="P:Mtime.Community.Utility.HttpCompress.CompressingFilter.ContentEncoding"/>.  The latter corresponds to a 
            content coding (see http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.5)
            that your implementation will support.
            </remarks>
        </member>
        <member name="M:Mtime.Community.Utility.HttpCompress.CompressingFilter.#ctor(System.IO.Stream,Mtime.Community.Utility.HttpCompress.CompressionLevels)">
            <summary>
            Protected constructor that sets up the underlying stream we're compressing into
            </summary>
            <param name="baseStream">The stream we're wrapping up</param>
            <param name="compressionLevel">The level of compression to use when compressing the content</param>
        </member>
        <member name="M:Mtime.Community.Utility.HttpCompress.CompressingFilter.WriteHeaders">
            <summary>
            Writes out the compression-related headers.  Subclasses should call this once before writing to the output stream.
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.HttpCompress.CompressingFilter.ContentEncoding">
            <summary>
            The name of the content-encoding that's being implemented
            </summary>
            <remarks>
            See http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.5 for more
            details on content codings.
            </remarks>
        </member>
        <member name="P:Mtime.Community.Utility.HttpCompress.CompressingFilter.CompressionLevel">
            <summary>
            Allow inheriting classes to get access the the level of compression that should be used
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.HttpCompress.CompressingFilter.HasWrittenHeaders">
            <summary>
            Keeps track of whether or not we're written the compression headers
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.HttpCompress.DeflateFilter.m_stream">
            <summary>
            compression stream member
            has to be a member as we can only have one instance of the
            actual filter class
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.HttpCompress.DeflateFilter.#ctor(System.IO.Stream)">
            <summary>
            Basic constructor that uses the Normal compression level
            </summary>
            <param name="baseStream">The stream to wrap up with the deflate algorithm</param>
        </member>
        <member name="M:Mtime.Community.Utility.HttpCompress.DeflateFilter.#ctor(System.IO.Stream,Mtime.Community.Utility.HttpCompress.CompressionLevels)">
            <summary>
            Full constructor that allows you to set the wrapped stream and the level of compression
            </summary>
            <param name="baseStream">The stream to wrap up with the deflate algorithm</param>
            <param name="compressionLevel">The level of compression to use</param>
        </member>
        <member name="M:Mtime.Community.Utility.HttpCompress.DeflateFilter.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write out bytes to the underlying stream after compressing them using deflate
            </summary>
            <param name="buffer">The array of bytes to write</param>
            <param name="offset">The offset into the supplied buffer to start</param>
            <param name="count">The number of bytes to write</param>
        </member>
        <member name="M:Mtime.Community.Utility.HttpCompress.DeflateFilter.Close">
            <summary>
            Closes this Filter and calls the base class implementation.
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.HttpCompress.DeflateFilter.Flush">
            <summary>
            Flushes that the filter out to underlying storage
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.HttpCompress.DeflateFilter.ContentEncoding">
            <summary>
            Return the Http name for this encoding.  Here, deflate.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.GZip.GZipException">
            <summary>
            GZipException represents a Gzip specific exception	
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.GZipException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor 
            </summary>
            <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo"/> for this constructor</param>
            <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext"/> for this constructor</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.GZipException.#ctor">
            <summary>
            Initialise a new instance of GZipException
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.GZipException.#ctor(System.String)">
            <summary>
            Initialise a new instance of GZipException with its message string.
            </summary>
            <param name="message">A <see cref="T:System.String"/> that describes the error.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.GZipException.#ctor(System.String,System.Exception)">
            <summary>
            Initialise a new instance of <see cref="T:ICSharpCode.SharpZipLib.GZip.GZipException"></see>.
            </summary>
            <param name="message">A <see cref="T:System.String"/> that describes the error.</param>
            <param name="innerException">The <see cref="T:System.Exception"/> that caused this exception.</param>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.NameFilter">
            <summary>
            NameFilter is a string matching class which allows for both positive and negative
            matching.
            A filter is a sequence of independant <see cref="T:System.Text.RegularExpressions.Regex">regular expressions</see> separated by semi-colons ';'
            Each expression can be prefixed by a plus '+' sign or a minus '-' sign to denote the expression
            is intended to include or exclude names.  If neither a plus or minus sign is found include is the default
            A given name is tested for inclusion before checking exclusions.  Only names matching an include spec 
            and not matching an exclude spec are deemed to match the filter.
            An empty filter matches any name.
            </summary>
            <example>The following expression includes all name ending in '.dat' with the exception of 'dummy.dat'
            "+\.dat$;-^dummy\.dat$"
            </example>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.IScanFilter">
            <summary>
            Scanning filters support filtering of names.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.IScanFilter.IsMatch(System.String)">
            <summary>
            Test a name to see if it 'matches' the filter.
            </summary>
            <param name="name">The name to test.</param>
            <returns>Returns true if the name matches the filter, false if it does not match.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.NameFilter.#ctor(System.String)">
            <summary>
            Construct an instance based on the filter expression passed
            </summary>
            <param name="filter">The filter expression.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.NameFilter.IsValidExpression(System.String)">
            <summary>
            Test a string to see if it is a valid regular expression.
            </summary>
            <param name="expression">The expression to test.</param>
            <returns>True if expression is a valid <see cref="T:System.Text.RegularExpressions.Regex"/> false otherwise.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.NameFilter.IsValidFilterExpression(System.String)">
            <summary>
            Test an expression to see if it is valid as a filter.
            </summary>
            <param name="toTest">The filter expression to test.</param>
            <returns>True if the expression is valid, false otherwise.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.NameFilter.ToString">
            <summary>
            Convert this filter to its string equivalent.
            </summary>
            <returns>The string equivalent for this filter.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.NameFilter.IsIncluded(System.String)">
            <summary>
            Test a value to see if it is included by the filter.
            </summary>
            <param name="name">The value to test.</param>
            <returns>True if the value is included, false otherwise.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.NameFilter.IsExcluded(System.String)">
            <summary>
            Test a value to see if it is excluded by the filter.
            </summary>
            <param name="name">The value to test.</param>
            <returns>True if the value is excluded, false otherwise.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.NameFilter.IsMatch(System.String)">
            <summary>
            Test a value to see if it matches the filter.
            </summary>
            <param name="name">The value to test.</param>
            <returns>True if the value matches, false otherwise.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.NameFilter.Compile">
            <summary>
            Compile this filter.
            </summary>
        </member>
        <member name="T:Mtime.Community.Utility.Web.PageService">
            <summary>
            “服务”页模版
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.Web.PageService.Load">
            <summary>
            具体页面装载
            </summary>
        </member>
        <member name="T:Rss.RssFeed">
            <summary>The contents of a RssFeed</summary>
        </member>
        <member name="M:Rss.RssFeed.#ctor">
            <summary>Initialize a new instance of the RssFeed class.</summary>
        </member>
        <member name="M:Rss.RssFeed.#ctor(System.Text.Encoding)">
            <summary>Initialize a new instance of the RssFeed class with a specified encoding.</summary>
        </member>
        <member name="M:Rss.RssFeed.ToString">
            <summary>Returns a string representation of the current Object.</summary>
            <returns>The Url of the feed</returns>
        </member>
        <member name="M:Rss.RssFeed.Read(System.String)">
            <summary>Reads the specified RSS feed</summary>
            <param name="url">The url or filename of the RSS feed</param>
            <returns>The contents of the feed</returns>
        </member>
        <member name="M:Rss.RssFeed.Read(System.Net.HttpWebRequest)">
            <summary>Reads the specified RSS feed</summary>
            <param name="Request">The specified way to connect to the web server</param>
            <returns>The contents of the feed</returns>
        </member>
        <member name="M:Rss.RssFeed.Read(Rss.RssFeed)">
            <summary>Reads the specified RSS feed</summary>
            <param name="oldFeed">The cached version of the feed</param>
            <returns>The current contents of the feed</returns>
            <remarks>Will not download the feed if it has not been modified</remarks>
        </member>
        <member name="M:Rss.RssFeed.Read(System.Net.HttpWebRequest,Rss.RssFeed)">
            <summary>Reads the specified RSS feed</summary>
            <param name="Request">The specified way to connect to the web server</param>
            <param name="oldFeed">The cached version of the feed</param>
            <returns>The current contents of the feed</returns>
            <remarks>Will not download the feed if it has not been modified</remarks>
        </member>
        <member name="M:Rss.RssFeed.Write(System.IO.Stream)">
            <summary>Writes the RSS feed to the specified stream.</summary>
            <param name="stream">specified Stream</param>
            <exception cref="T:System.ArgumentException">The Stream cannot be written to.</exception>
            <exception cref="T:System.InvalidOperationException">Feed must contain at least one channel.</exception>
            <exception cref="T:System.InvalidOperationException">Channel must contain at least one item.</exception>
        </member>
        <member name="M:Rss.RssFeed.Write(System.String)">
            <summary>Writes the RSS feed to the specified file.</summary>
            <remarks>The encoding is ISO-8859-1.</remarks>
            <exception cref="T:System.ArgumentException">The filename is empty, contains only white space, or contains one or more invalid characters.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Access is denied.</exception>
            <exception cref="T:System.ArgumentNullException">The filename is a (null c#, Nothing vb) reference.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The directory to write to is not found.</exception>
            <exception cref="T:System.IO.IOException">The filename includes an incorrect or invalid syntax for file name, directory name, or volume label syntax.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <param name="fileName">specified file (including path) If the file exists, it will be truncated with the new content.</param>
            <exception cref="T:System.InvalidOperationException">Feed must contain at least one channel.</exception>
            <exception cref="T:System.InvalidOperationException">Channel must contain at least one item.</exception>
        </member>
        <member name="P:Rss.RssFeed.Channels">
            <summary>The channels that are contained in the feed.</summary>
        </member>
        <member name="P:Rss.RssFeed.Modules">
            <summary>The modules that the feed adhears to.</summary>
        </member>
        <member name="P:Rss.RssFeed.Exceptions">
            <summary>A collection of all exceptions encountered during the reading of the feed.</summary>
        </member>
        <member name="P:Rss.RssFeed.Version">
            <summary>The Version of the feed.</summary>
        </member>
        <member name="P:Rss.RssFeed.ETag">
            <summary>The server generated hash of the feed.</summary>
        </member>
        <member name="P:Rss.RssFeed.LastModified">
            <summary>The server generated last modfified date and time of the feed.</summary>
        </member>
        <member name="P:Rss.RssFeed.Cached">
            <summary>Indicates this feed has not been changed on the server, and the local copy was returned.</summary>
        </member>
        <member name="P:Rss.RssFeed.Url">
            <summary>Location of the feed</summary>
        </member>
        <member name="P:Rss.RssFeed.Encoding">
            <summary>Encoding of the feed</summary>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.Hashes.Set(System.String,System.String,System.Object)">
            <summary>
            Sets field in the hash stored at key to value.
            </summary>
            <param name="key">redis key</param>
            <param name="hkey">hashtable key</param>
            <param name="hvalue">hashtable value</param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.Hashes.SetIfNull(System.String,System.String,System.Object)">
            <summary>
            Sets field in the hash stored at key to value, only if field does not yet exist.
            </summary>
            <param name="key">redis key</param>
            <param name="hkey">hashtable key</param>
            <param name="hvalue">hashtable value</param>
            <returns>
            1  if field is a new field in the hash and value was set.
            0  if field already exists in the hash and no operation was performed.
            -1 failed.
            </returns>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.Hashes.Sets(System.String,Mtime.MongoDB.Document)">
            <summary>
            Sets the specified fields to their respective values in the hash stored at key. 
            </summary>
            <param name="key">redis key</param>
            <param name="hkvs">hash table</param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.Hashes.Remove(System.String,System.String[])">
            <summary>
            Removes the specified fields from the hash stored at key.
            </summary>
            <param name="key">redis key</param>
            <param name="key">hashtable key</param>
            <returns>
            The number of fields that were removed
            -1 failed.
            </returns>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.Hashes.Exists(System.String,System.String)">
            <summary>
            Returns if field is an existing field in the hash stored at key.
            </summary>
            <param name="key">redis key</param>
            <param name="hkey">hashtable key</param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.Hashes.Get``1(System.String,System.String)">
            <summary>
            Returns the value associated with field in the hash stored at key.
            </summary>
            <param name="key">redis key</param>
            <param name="hkey">hashtable key</param>
            <returns>
            the value associated with field
            null - no value.
            </returns>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.Hashes.Gets(System.String,System.String[])">
            <summary>
            Returns the values associated with the specified fields in the hash stored at key.
            </summary>
            <param name="key">redis key</param>
            <param name="hkeys">hashtable keys</param>
            <returns>
            list of values associated with the given fields, in the same order as they are requested or an empty list.
            byte[]由调用者自己反序列化，可使用GetValueFromByte辅助方法。
            </returns>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.Hashes.GetKeys(System.String)">
            <summary>
            Returns all field names in the hash stored at key.
            </summary>
            <param name="key">redis key</param>
            <returns>
            list of fields in the hash or an empty list when key does not exist.
            </returns>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.Hashes.GetValues``1(System.String)">
            <summary>
            Returns all values in the hash stored at key.
            </summary>
            <param name="key">redis key</param>
            <returns>
            list of values in the hash, or an empty list when key does not exist.
            </returns>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.Hashes.GetAll(System.String)">
            <summary>
            Returns all fields and values of the hash stored at key.
            </summary>
            <param name="key">redis key</param>
            <returns>
            list of fields and their values stored in the hash or an empty list when key does not exist.
            byte[]由调用者自己反序列化，可使用GetValueFromByte辅助方法。
            </returns>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.Hashes.GetCount(System.String)">
            <summary>
            Returns the number of fields contained in the hash stored at key.
            </summary>
            <param name="key">redis key</param>
            <returns>
            number of fields in the hash.
            0   when key does not exist.
            -1  failed.
            </returns>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.Hashes.Increment(System.String,System.String,System.Int64)">
            <summary>
            Increments the number stored at field in the hash stored at key by increment.
            </summary>
            <param name="key">redis key</param>
            <param name="hkey">hashtable key</param>
            <param name="hvalue">hashtable value</param>
            <returns>
            the value at field after the increment operation.
            -1 failed.
            </returns>
        </member>
        <member name="M:Mtime.Community.Utility.Json.JsonHelper.Read(System.String)">
            <summary>
            处理简单一维的json对象
            TODO:重构，目前比较乱
            </summary>
            <param name="simpleJsonString"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Json.JsonHelper.ReadRecursion(System.String,System.String,System.Boolean@)">
            <summary>
            递归解析Json字符串，生成JsonObject对象
            </summary>
            <param name="jsonName">Json对象名称</param>
            <param name="jsonString">Json字符串</param>
            <param name="result">返回值为false，构建JsonObject异常，记录日志</param>
            <returns></returns>
        </member>
        <member name="T:ProtoBuf.ProtoMemberAttribute">
            <summary>
            Declares a member to be used in protocol-buffer serialization, using
            the given Tag. A DataFormat may be used to optimise the serialization
            format (for instance, using zigzag encoding for negative numbers, or 
            fixed-length encoding for large values.
            </summary>
        </member>
        <member name="M:ProtoBuf.ProtoMemberAttribute.CompareTo(System.Object)">
            <summary>
            Compare with another ProtoMemberAttribute for sorting purposes
            </summary>
        </member>
        <member name="M:ProtoBuf.ProtoMemberAttribute.CompareTo(ProtoBuf.ProtoMemberAttribute)">
            <summary>
            Compare with another ProtoMemberAttribute for sorting purposes
            </summary>
        </member>
        <member name="M:ProtoBuf.ProtoMemberAttribute.#ctor(System.Int32)">
            <summary>
            Creates a new ProtoMemberAttribute instance.
            </summary>
            <param name="tag">Specifies the unique tag used to identify this member within the type.</param>
        </member>
        <member name="P:ProtoBuf.ProtoMemberAttribute.Name">
            <summary>
            Gets or sets the original name defined in the .proto; not used
            during serialization.
            </summary>
        </member>
        <member name="P:ProtoBuf.ProtoMemberAttribute.DataFormat">
            <summary>
            Gets or sets the data-format to be used when encoding this value.
            </summary>
        </member>
        <member name="P:ProtoBuf.ProtoMemberAttribute.Tag">
            <summary>
            Gets the unique tag used to identify this member within the type.
            </summary>
        </member>
        <member name="P:ProtoBuf.ProtoMemberAttribute.IsRequired">
            <summary>
            Gets or sets a value indicating whether this member is mandatory.
            </summary>
        </member>
        <member name="P:ProtoBuf.ProtoMemberAttribute.IsPacked">
            <summary>
            Gets a value indicating whether this member is packed.
            </summary>
        </member>
        <member name="P:ProtoBuf.ProtoMemberAttribute.AsReference">
            <summary>
            Enables full object-tracking/full-graph support.
            </summary>
        </member>
        <member name="P:ProtoBuf.ProtoMemberAttribute.DynamicType">
            <summary>
            Embeds the type information into the stream, allowing usage with types not known in advance.
            </summary>
        </member>
        <member name="P:ProtoBuf.ProtoMemberAttribute.Options">
            <summary>
            Gets or sets a value indicating whether this member is packed (lists/arrays).
            </summary>
        </member>
        <member name="T:ProtoBuf.MemberSerializationOptions">
            <summary>
            Additional (optional) settings that control serialization of members
            </summary>
        </member>
        <member name="F:ProtoBuf.MemberSerializationOptions.None">
            <summary>
            Default; no additional options
            </summary>
        </member>
        <member name="F:ProtoBuf.MemberSerializationOptions.Packed">
            <summary>
            Indicates that repeated elements should use packed (length-prefixed) encoding
            </summary>
        </member>
        <member name="F:ProtoBuf.MemberSerializationOptions.Required">
            <summary>
            Indicates that the given item is required
            </summary>
        </member>
        <member name="F:ProtoBuf.MemberSerializationOptions.AsReference">
            <summary>
            Enables full object-tracking/full-graph support
            </summary>
        </member>
        <member name="F:ProtoBuf.MemberSerializationOptions.DynamicType">
            <summary>
            Embeds the type information into the stream, allowing usage with types not known in advance
            </summary>
        </member>
        <member name="T:ProtoBuf.ProtoPartialMemberAttribute">
            <summary>
            Declares a member to be used in protocol-buffer serialization, using
            the given Tag and MemberName. This allows ProtoMemberAttribute usage
            even for partial classes where the individual members are not
            under direct control.
            A DataFormat may be used to optimise the serialization
            format (for instance, using zigzag encoding for negative numbers, or 
            fixed-length encoding for large values.
            </summary>
        </member>
        <member name="M:ProtoBuf.ProtoPartialMemberAttribute.#ctor(System.Int32,System.String)">
            <summary>
            Creates a new ProtoMemberAttribute instance.
            </summary>
            <param name="tag">Specifies the unique tag used to identify this member within the type.</param>
            <param name="memberName">Specifies the member to be serialized.</param>
        </member>
        <member name="P:ProtoBuf.ProtoPartialMemberAttribute.MemberName">
            <summary>
            The name of the member to be serialized.
            </summary>
        </member>
        <member name="T:Mtime.Community.Utility.zxing.common.reedsolomon.GF256Poly">
            <summary> <p>Represents a polynomial whose coefficients are elements of GF(256).
            Instances of this class are immutable.</p>
            
            <p>Much credit is due to William Rucklidge since portions of this code are an indirect
            port of his C++ Reed-Solomon implementation.</p>
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="M:Mtime.Community.Utility.zxing.common.reedsolomon.GF256Poly.#ctor(Mtime.Community.Utility.zxing.common.reedsolomon.GF256,System.Int32[])">
            <param name="field">the {@link GF256} instance representing the field to use
            to perform computations
            </param>
            <param name="coefficients">coefficients as ints representing elements of GF(256), arranged
            from most significant (highest-power term) coefficient to least significant
            </param>
            <throws>  IllegalArgumentException if argument is null or empty, </throws>
            <summary> or if leading coefficient is 0 and this is not a
            constant polynomial (that is, it is not the monomial "0")
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.zxing.common.reedsolomon.GF256Poly.getCoefficient(System.Int32)">
            <returns> coefficient of x^degree term in this polynomial
            </returns>
        </member>
        <member name="M:Mtime.Community.Utility.zxing.common.reedsolomon.GF256Poly.evaluateAt(System.Int32)">
            <returns> evaluation of this polynomial at a given point
            </returns>
        </member>
        <member name="P:Mtime.Community.Utility.zxing.common.reedsolomon.GF256Poly.Degree">
            <returns> degree of this polynomial
            </returns>
        </member>
        <member name="P:Mtime.Community.Utility.zxing.common.reedsolomon.GF256Poly.Zero">
            <returns> true iff this polynomial is the monomial "0"
            </returns>
        </member>
        <member name="T:Mtime.Community.Utility.Helper.EnumHelper">
            <summary>
            枚举扩展
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.EnumHelper.GetDescription(System.Enum)">
            <summary>
            获取枚举的描述(EnumDescription属性)
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.EnumHelper.Initialize(System.Type)">
            <summary>
            初始化枚举描述
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Mtime.Community.Components.Constants.v3.IHtmlAttributeValueValidator">
            <summary>
            Html属性验证接口
            </summary>
        </member>
        <member name="T:Mtime.Community.Components.Constants.v3.VideoURLValidator">
            <summary>
            视频URL验证器
            </summary>
        </member>
        <member name="T:Mtime.Community.Components.Constants.v3.RegexValueValidator">
            <summary>
            通用正则表达式验证器
            </summary>
        </member>
        <member name="T:Mtime.Community.Components.Constants.v3.AllowedHtmlTags2011">
            <summary>
            暂时放在这里
            </summary>
        </member>
        <member name="P:Mtime.EPay.Order.OrderID">
            <summary>
            订单ID
            </summary>
        </member>
        <member name="P:Mtime.EPay.Order.OrderName">
            <summary>
            订单名称
            </summary>
        </member>
        <member name="P:Mtime.EPay.Order.Description">
            <summary>
            商品描述
            </summary>
        </member>
        <member name="P:Mtime.EPay.Order.Quantity">
            <summary>
            物品数量
            </summary>
        </member>
        <member name="P:Mtime.EPay.Order.Price">
            <summary>
            物品单价
            </summary>
        </member>
        <member name="P:Mtime.EPay.Order.LogisticsFee">
            <summary>
            物流费用
            </summary>
        </member>
        <member name="P:Mtime.EPay.Order.CreateTime">
            <summary>
            订单产生日期
            </summary>
        </member>
        <member name="T:SixtyTwoScale">
            <summary>
            C#的62进制实现
            </summary>
        </member>
        <member name="F:SixtyTwoScale.value">
            <summary>
            62进制数
            </summary>
        </member>
        <member name="F:SixtyTwoScale.value_long">
            <summary>
            对应10进制长整数
            </summary>
        </member>
        <member name="M:SixtyTwoScale.#ctor(System.String)">
            <summary>
            62进制数向10进制转换
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:SixtyTwoScale.#ctor(System.Int64)">
            <summary>
            10进制向62进制转换
            </summary>
            <param name="value_long"></param>
        </member>
        <member name="M:SixtyTwoScale.ToString">
            <summary>
            输出62进制
            </summary>
            <returns></returns>
        </member>
        <member name="M:SixtyTwoScale.ToInt64">
            <summary>
            输出10进制
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.ScrambleStyle.GetRandomChineseString(System.Int32)">
            <summary>
            随机获取中文字符串
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Mtime.Community.Utility.Components.ObjectPool`1" -->
        <!-- Badly formed XML comment ignored for member "F:Mtime.Community.Utility.Components.ObjectPool`1.pool" -->
        <!-- Badly formed XML comment ignored for member "F:Mtime.Community.Utility.Components.ObjectPool`1._poolLock" -->
        <!-- Badly formed XML comment ignored for member "M:Mtime.Community.Utility.Components.ObjectPool`1.#ctor(System.Int32,System.Int32)" -->
        <member name="M:Mtime.Community.Utility.Components.ObjectPool`1.GetObject">
            <returns>An unused instance of <typeparamref name="T"/>.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Mtime.Community.Utility.Components.ObjectPool`1.ReturnObject(`0)" -->
        <!-- Badly formed XML comment ignored for member "M:Mtime.Community.Utility.Components.ObjectPool`1.DisposeAllObjects" -->
        <!-- Badly formed XML comment ignored for member "P:Mtime.Community.Utility.Components.ObjectPool`1.Count" -->
        <member name="T:Mtime.MongoDB.Protocol.InsertMessage">
            <summary>
            
            </summary>
            <remarks>
            struct {
            	MsgHeader header;             // standard message header
            	int32     ZERO;               // 0 - reserved for future use
            	cstring   fullCollectionName; // "dbname.collectionname"
            	document* documents;          // one or more documents to insert into the collection
            }
            </remarks>
        </member>
        <member name="P:Mtime.MongoDB.Protocol.InsertMessage.FullCollectionName">
            <summary>
            表的全路径名，如："dbname.collectionname"
            </summary>
        </member>
        <member name="T:Mtime.MongoDB.MongoCommException">
            <summary>
            通讯异常
            </summary>
        </member>
        <member name="P:Mtime.MongoDB.MongoCommException.ConnectionString">
            <summary>
            获取或设置连接字符串
            </summary>
        </member>
        <member name="T:Mtime.MongoDB.Bson.MongoSymbol">
            <summary>
            Type to hold an interned string that maps to the bson symbol type.
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.Keys.Remove(System.String[])">
            <summary>
            Removes the specified keys. A key is ignored if it does not exist.
            </summary>
            <param name="keys">redis keys</param>
            <returns>
             The number of keys that were removed.
             -1 failed.
            </returns>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.Keys.RemoveAll">
            <summary>
            Remove all keys in redis db.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.Keys.GetKeys(System.String)">
            <summary>
            Returns all keys matching pattern. */?
            </summary>
            <param name="keyPattern">redis key pattern</param>
            <returns>
            list of keys matching pattern. null when no keys in redis
            </returns>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.Keys.GetRandomKey">
            <summary>
            Get a random key from redis
            </summary>
            <returns>return a key name if not exist return null</returns>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.Keys.GetExpire(System.String)">
            <summary>
            Returns the remaining time to live of a key that has a timeout.
            </summary>
            <param name="key">redis key</param>
            <returns>
            TTL in seconds.
            -1 when key does not exist or does not have a timeout.
            </returns>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.Keys.Exists(System.String)">
            <summary>
            Returns if key exists.
            </summary>
            <param name="key">redis key</param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.Keys.RenameKey(System.String,System.String)">
            <summary>
            Renames key to newkey.
            </summary>
            <param name="key">old key</param>
            <param name="newKey">new key</param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.Keys.GetValueType(System.String)">
            <summary>
            Returns the string representation of the type of the value stored at key.
            </summary>
            <param name="key"></param>
            <returns>
            type of key, or null when key does not exist.
            </returns>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.Keys.SetExpireAfter(System.String,System.Int32)">
            <summary>
            Set a timeout on key.
            </summary>
            <param name="key"></param>
            <param name="expiretime"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.Keys.SetExpireTo(System.String,System.Int32)">
            <summary>
            Set a timeout on key.
            </summary>
            <param name="key"></param>
            <param name="expiretime"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.Keys.RenameKeyIfNull(System.String,System.String)">
            <summary>
            Renames key to newkey.
            </summary>
            <param name="key">old key</param>
            <param name="newKey">new key</param>
            <returns>
             1 if key was renamed to newkey.
             0 if newkey already exists.
            -1 failed.
            </returns>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.Keys.RemoveExpire(System.String)">
            <summary>
            Remove the existing timeout on key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.Keys.GetSortValues``1(System.String,System.String)">
            <summary>
            Returns or stores the elements contained in the list, set or sorted set at key.
            </summary>
            <param name="key"></param>
            <param name="sortPattern"></param>
            <returns>list of sorted elements.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Mtime.Community.Utility.Client.SimpleRemoteService.Components.Serializer" -->
        <member name="T:Mtime.Community.Utility.Caching.DataCache">
            <summary>
            普通对象通用缓存，支持批量移除
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.Caching.DataCache.Get">
            <summary>
            从缓存里面取数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Caching.DataCache.Remove">
            <summary>
            从缓存里移出数据
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.Caching.DataCache.RemoveByPattern">
            <summary>
            从缓存里批量移除
            </summary>
        </member>
        <member name="T:Mtime.Community.Utility.DataProviderCache">
            <summary>
            数据提供类
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.DataProviderCache.ENABLE_MEMCACHED">
            <summary>
            是否启用Memcached
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.DataProviderCache.#ctor(System.String,System.Object[])">
            <summary>
            configKey
            </summary>
            <param name="configKey">与配置文件(DatabaseCache.config)对应，一般为存储过程名</param>
            <param name="parms">参数集合</param>
        </member>
        <member name="M:Mtime.Community.Utility.DataProviderCache.Insert(System.Object)">
            <summary>
            把数据加入到缓存
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Mtime.Community.Utility.DataProviderCache.Get">
            <summary>
            从缓存里面取数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.DataProviderCache.Remove">
            <summary>
            从缓存里移出数据
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.DataProviderCache.RemoveByPattern">
            <summary>
            从缓存里通过模式匹配移出数据
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.BaiduNewsRss.BaiduNewsRss.#ctor(System.String,System.String,System.Int32)">
            <summary>
            构造
            </summary>
            <param name="webSite">站点地址</param>
            <param name="webMaster">负责人员的Email</param>
            <param name="updatePeri">更新周期，以分钟为单位</param>
        </member>
        <member name="P:Mtime.Community.Utility.BaiduNewsRss.BaiduNewsRss.WebSite">
            <summary>
            站点地址
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.BaiduNewsRss.BaiduNewsRss.WebMaster">
            <summary>
            负责人员的Email
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.BaiduNewsRss.BaiduNewsRss.UpdatePeri">
            <summary>
            更新周期，以分钟为单位
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.BaiduNewsRss.BaiduNewsRss.BaiduNewsRssItems">
            <summary>
            记录的集合
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.FastZipEvents">
            <summary>
            FastZipEvents supports all events applicable to <see cref="T:ICSharpCode.SharpZipLib.Zip.FastZip">FastZip</see> operations.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.FastZipEvents.ProcessDirectory">
            <summary>
            Delegate to invoke when processing directories.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.FastZipEvents.ProcessFile">
            <summary>
            Delegate to invoke when processing files.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.FastZipEvents.DirectoryFailure">
            <summary>
            Delegate to invoke when processing directory failures.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.FastZipEvents.FileFailure">
            <summary>
            Delegate to invoke when processing file failures.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.FastZipEvents.OnDirectoryFailure(System.String,System.Exception)">
            <summary>
            Raise the <see cref="F:ICSharpCode.SharpZipLib.Zip.FastZipEvents.DirectoryFailure">directory failure</see> event.
            </summary>
            <param name="directory">The directory causing the failure.</param>
            <param name="e">The exception for this event.</param>
            <returns>A boolean indicating if execution should continue or not.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.FastZipEvents.OnFileFailure(System.String,System.Exception)">
            <summary>
            Raises the <see cref="F:ICSharpCode.SharpZipLib.Zip.FastZipEvents.FileFailure">file failure delegate</see>.
            </summary>
            <param name="file">The file causing the failure.</param>
            <param name="e">The exception for this failure.</param>
            <returns>A boolean indicating if execution should continue or not.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.FastZipEvents.OnProcessFile(System.String)">
            <summary>
            Raises the <see cref="F:ICSharpCode.SharpZipLib.Zip.FastZipEvents.ProcessFile">Process File delegate</see>.
            </summary>
            <param name="file">The file being processed.</param>
            <returns>A boolean indicating if execution should continue or not.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.FastZipEvents.OnProcessDirectory(System.String,System.Boolean)">
            <summary>
            Fires the <see cref="F:ICSharpCode.SharpZipLib.Zip.FastZipEvents.ProcessDirectory">process directory</see> delegate.
            </summary>
            <param name="directory">The directory being processed.</param>
            <param name="hasMatchingFiles">Flag indicating if directory has matching files as determined by the current filter.</param>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.FastZip">
            <summary>
            FastZip provides facilities for creating and extracting zip files.
            Only relative paths are supported.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.FastZip.#ctor">
            <summary>
            Initialise a default instance of <see cref="T:ICSharpCode.SharpZipLib.Zip.FastZip"/>.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.FastZip.#ctor(ICSharpCode.SharpZipLib.Zip.FastZipEvents)">
            <summary>
            Initialise a new instance of <see cref="T:ICSharpCode.SharpZipLib.Zip.FastZip"/>
            </summary>
            <param name="events">The <see cref="T:ICSharpCode.SharpZipLib.Zip.FastZipEvents">events</see> to use during operations.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.FastZip.CreateZip(System.String,System.String,System.Boolean,System.String,System.String)">
            <summary>
            Create a zip file.
            </summary>
            <param name="zipFileName">The name of the zip file to create.</param>
            <param name="sourceDirectory">The directory to source files from.</param>
            <param name="recurse">True to recurse directories, false for no recursion.</param>
            <param name="fileFilter">The <see cref="T:ICSharpCode.SharpZipLib.Core.PathFilter">file filter</see> to apply.</param>
            <param name="directoryFilter">The <see cref="T:ICSharpCode.SharpZipLib.Core.PathFilter">directory filter</see> to apply.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.FastZip.CreateZip(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Create a zip file/archive.
            </summary>
            <param name="zipFileName">The name of the zip file to create.</param>
            <param name="sourceDirectory">The directory to obtain files and directories from.</param>
            <param name="recurse">True to recurse directories, false for no recursion.</param>
            <param name="fileFilter">The file filter to apply.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.FastZip.CreateZip(System.IO.Stream,System.String,System.Boolean,System.String,System.String)">
            <summary>
            Create a zip archive sending output to the <paramref name="outputStream"/> passed.
            </summary>
            <param name="outputStream">The stream to write archive data to.</param>
            <param name="sourceDirectory">The directory to source files from.</param>
            <param name="recurse">True to recurse directories, false for no recursion.</param>
            <param name="fileFilter">The <see cref="T:ICSharpCode.SharpZipLib.Core.PathFilter">file filter</see> to apply.</param>
            <param name="directoryFilter">The <see cref="T:ICSharpCode.SharpZipLib.Core.PathFilter">directory filter</see> to apply.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.FastZip.ExtractZip(System.String,System.String,System.String)">
            <summary>
            Extract the contents of a zip file.
            </summary>
            <param name="zipFileName">The zip file to extract from.</param>
            <param name="targetDirectory">The directory to save extracted information in.</param>
            <param name="fileFilter">A filter to apply to files.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.FastZip.ExtractZip(System.String,System.String,ICSharpCode.SharpZipLib.Zip.FastZip.Overwrite,ICSharpCode.SharpZipLib.Zip.FastZip.ConfirmOverwriteDelegate,System.String,System.String,System.Boolean)">
            <summary>
            Extract the contents of a zip file.
            </summary>
            <param name="zipFileName">The zip file to extract from.</param>
            <param name="targetDirectory">The directory to save extracted information in.</param>
            <param name="overwrite">The style of <see cref="T:ICSharpCode.SharpZipLib.Zip.FastZip.Overwrite">overwriting</see> to apply.</param>
            <param name="confirmDelegate">A delegate to invoke when confirming overwriting.</param>
            <param name="fileFilter">A filter to apply to files.</param>
            <param name="directoryFilter">A filter to apply to directories.</param>
            <param name="restoreDateTime">Flag indicating wether to restore the date and time for extracted files.</param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.FastZip.CreateEmptyDirectories">
            <summary>
            Get/set a value indicating wether empty directories should be created.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.FastZip.Password">
            <summary>
            Get / set the password value.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.FastZip.NameTransform">
            <summary>
            Get or set the <see cref="T:ICSharpCode.SharpZipLib.Core.INameTransform"></see> active when creating Zip files.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.FastZip.EntryFactory">
            <summary>
            Get or set the <see cref="T:ICSharpCode.SharpZipLib.Zip.IEntryFactory"></see> active when creating Zip files.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.FastZip.RestoreDateTimeOnExtract">
            <summary>
            Get/set a value indicating wether file dates and times should 
            be restored when extracting files from an archive.
            </summary>
            <remarks>The default value is false.</remarks>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.FastZip.Overwrite">
            <summary>
            Defines the desired handling when overwriting files during extraction.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.FastZip.Overwrite.Prompt">
            <summary>
            Prompt the user to confirm overwriting
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.FastZip.Overwrite.Never">
            <summary>
            Never overwrite files.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.FastZip.Overwrite.Always">
            <summary>
            Always overwrite files.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.FastZip.ConfirmOverwriteDelegate">
            <summary>
            Delegate called when confirming overwriting of files.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow">
            <summary>
            Contains the output from the Inflation process.
            We need to have a window so that we can refer backwards into the output stream
            to repeat stuff.<br/>
            Author of the original java version : John Leuner
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow.Write(System.Int32)">
            <summary>
            Write a byte to this output window
            </summary>
            <param name="value">value to write</param>
            <exception cref="T:System.InvalidOperationException">
            if window is full
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow.Repeat(System.Int32,System.Int32)">
            <summary>
            Append a byte pattern already in the window itself
            </summary>
            <param name="length">length of pattern to copy</param>
            <param name="distance">distance from end of window pattern occurs</param>
            <exception cref="T:System.InvalidOperationException">
            If the repeated data overflows the window
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow.CopyStored(ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator,System.Int32)">
            <summary>
            Copy from input manipulator to internal window
            </summary>
            <param name="input">source of data</param>
            <param name="length">length of data to copy</param>
            <returns>the number of bytes copied</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow.CopyDict(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copy dictionary to window
            </summary>
            <param name="dictionary">source dictionary</param>
            <param name="offset">offset of start in source dictionary</param>
            <param name="length">length of dictionary</param>
            <exception cref="T:System.InvalidOperationException">
            If window isnt empty
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow.GetFreeSpace">
            <summary>
            Get remaining unfilled space in window
            </summary>
            <returns>Number of bytes left in window</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow.GetAvailable">
            <summary>
            Get bytes available for output in window
            </summary>
            <returns>Number of bytes filled</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow.CopyOutput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copy contents of window to output
            </summary>
            <param name="output">buffer to copy to</param>
            <param name="offset">offset to start at</param>
            <param name="len">number of bytes to count</param>
            <returns>The number of bytes copied</returns>
            <exception cref="T:System.InvalidOperationException">
            If a window underflow occurs
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow.Reset">
            <summary>
            Reset by clearing window so <see cref="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow.GetAvailable">GetAvailable</see> returns 0
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Tar.TarHeader">
            <summary>
            This class encapsulates the Tar Entry Header used in Tar Archives.
            The class also holds a number of tar constants, used mostly in headers.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.NAMELEN">
            <summary>
            The length of the name field in a header buffer.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.MODELEN">
            <summary>
            The length of the mode field in a header buffer.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.UIDLEN">
            <summary>
            The length of the user id field in a header buffer.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.GIDLEN">
            <summary>
            The length of the group id field in a header buffer.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.CHKSUMLEN">
            <summary>
            The length of the checksum field in a header buffer.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.CHKSUMOFS">
            <summary>
            Offset of checksum in a header buffer.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.SIZELEN">
            <summary>
            The length of the size field in a header buffer.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.MAGICLEN">
            <summary>
            The length of the magic field in a header buffer.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.VERSIONLEN">
            <summary>
            The length of the version field in a header buffer.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.MODTIMELEN">
            <summary>
            The length of the modification time field in a header buffer.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.UNAMELEN">
            <summary>
            The length of the user name field in a header buffer.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.GNAMELEN">
            <summary>
            The length of the group name field in a header buffer.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.DEVLEN">
            <summary>
            The length of the devices field in a header buffer.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_OLDNORM">
            <summary>
             The "old way" of indicating a normal file.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_NORMAL">
            <summary>
            Normal file type.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_LINK">
            <summary>
            Link file type.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_SYMLINK">
            <summary>
            Symbolic link file type.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_CHR">
            <summary>
            Character device file type.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_BLK">
            <summary>
            Block device file type.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_DIR">
            <summary>
            Directory file type.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_FIFO">
            <summary>
            FIFO (pipe) file type.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_CONTIG">
            <summary>
            Contiguous file type.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_GHDR">
            <summary>
            Posix.1 2001 global extended header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_XHDR">
            <summary>
            Posix.1 2001 extended header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_ACL">
            <summary>
            Solaris access control list file type
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_GNU_DUMPDIR">
            <summary>
            GNU dir dump file type
            This is a dir entry that contains the names of files that were in the
            dir at the time the dump was made
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_EXTATTR">
            <summary>
            Solaris Extended Attribute File
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_META">
            <summary>
            Inode (metadata only) no file content
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_GNU_LONGLINK">
            <summary>
            Identifies the next file on the tape as having a long link name
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_GNU_LONGNAME">
            <summary>
            Identifies the next file on the tape as having a long name
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_GNU_MULTIVOL">
            <summary>
            Continuation of a file that began on another volume
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_GNU_NAMES">
            <summary>
            For storing filenames that dont fit in the main header (old GNU)
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_GNU_SPARSE">
            <summary>
            GNU Sparse file
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_GNU_VOLHDR">
            <summary>
            GNU Tape/volume header ignore on extraction
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.TMAGIC">
            <summary>
            The magic tag representing a POSIX tar archive.  (includes trailing NULL)
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.GNU_TMAGIC">
            <summary>
            The magic tag representing an old GNU tar archive where version is included in magic and overwrites it
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.#ctor">
            <summary>
            Initialise a default TarHeader instance
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.GetName">
            <summary>
            Get the name of this entry.
            </summary>
            <returns>The entry's name.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.Clone">
            <summary>
            Clone a TAR header.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.ParseBuffer(System.Byte[])">
            <summary>
            Parse TarHeader information from a header buffer.
            </summary>
            <param name = "header">
            The tar entry header buffer to get information from.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.WriteHeader(System.Byte[])">
            <summary>
            'Write' header information to buffer provided, updating the <see cref="P:ICSharpCode.SharpZipLib.Tar.TarHeader.Checksum">check sum</see>.
            </summary>
            <param name="outBuffer">output buffer for header information</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.GetHashCode">
            <summary>
            Get a hash code for the current object.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.Equals(System.Object)">
            <summary>
            Determines if this instance is equal to the specified object.
            </summary>
            <param name="obj">The object to compare with.</param>
            <returns>true if the objects are equal, false otherwise.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.SetValueDefaults(System.Int32,System.String,System.Int32,System.String)">
            <summary>
            Set defaults for values used when constructing a TarHeader instance.
            </summary>
            <param name="userId">Value to apply as a default for userId.</param>
            <param name="userName">Value to apply as a default for userName.</param>
            <param name="groupId">Value to apply as a default for groupId.</param>
            <param name="groupName">Value to apply as a default for groupName.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.ParseOctal(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Parse an octal string from a header buffer.
            </summary>
            <param name = "header">The header buffer from which to parse.</param>
            <param name = "offset">The offset into the buffer from which to parse.</param>
            <param name = "length">The number of header bytes to parse.</param>
            <returns>The long equivalent of the octal string.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.ParseName(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Parse a name from a header buffer.
            </summary>
            <param name="header">
            The header buffer from which to parse.
            </param>
            <param name="offset">
            The offset into the buffer from which to parse.
            </param>
            <param name="length">
            The number of header bytes to parse.
            </param>
            <returns>
            The name parsed.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.GetNameBytes(System.Text.StringBuilder,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Add <paramref name="name">name</paramref> to the buffer as a collection of bytes
            </summary>
            <param name="name">The name to add</param>
            <param name="nameOffset">The offset of the first character</param>
            <param name="buffer">The buffer to add to</param>
            <param name="bufferOffset">The index of the first byte to add</param>
            <param name="length">The number of characters/bytes to add</param>
            <returns>The next free index in the <paramref name="buf">buffer</paramref></returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.GetNameBytes(System.String,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Add <paramref name="name">name</paramref> to the buffer as a collection of bytes
            </summary>
            <param name="name">The name to add</param>
            <param name="nameOffset">The offset of the first character</param>
            <param name="buffer">The buffer to add to</param>
            <param name="bufferOffset">The index of the first byte to add</param>
            <param name="length">The number of characters/bytes to add</param>
            <returns>The next free index in the <paramref name="buf">buffer</paramref></returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.GetNameBytes(System.Text.StringBuilder,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Add an entry name to the buffer
            </summary>
            <param name="name">
            The name to add
            </param>
            <param name="buffer">
            The buffer to add to
            </param>
            <param name="offset">
            The offset into the buffer from which to start adding
            </param>
            <param name="length">
            The number of header bytes to add
            </param>
            <returns>
            The index of the next free byte in the buffer
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.GetNameBytes(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Add an entry name to the buffer
            </summary>
            <param name="name">The name to add</param>
            <param name="buffer">The buffer to add to</param>
            <param name="offset">The offset into the buffer from which to start adding</param>
            <param name="length">The number of header bytes to add</param>
            <returns>The index of the next free byte in the buffer</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.GetAsciiBytes(System.String,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Add a string to a buffer as a collection of ascii bytes.
            </summary>
            <param name="toAdd">The string to add</param>
            <param name="nameOffset">The offset of the first character to add.</param>
            <param name="buffer">The buffer to add to.</param>
            <param name="bufferOffset">The offset to start adding at.</param>
            <param name="length">The number of ascii characters to add.</param>
            <returns>The next free index in the buffer.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.GetOctalBytes(System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Put an octal representation of a value into a buffer
            </summary>
            <param name = "value">
            the value to be converted to octal
            </param>
            <param name = "buffer">
            buffer to store the octal string
            </param>
            <param name = "offset">
            The offset into the buffer where the value starts
            </param>
            <param name = "length">
            The length of the octal string to create
            </param>
            <returns>
            The offset of the character next byte after the octal string
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.GetLongOctalBytes(System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Put an octal representation of a value into a buffer
            </summary>
            <param name = "value">Value to be convert to octal</param>
            <param name = "buffer">The buffer to update</param>
            <param name = "offset">The offset into the buffer to store the value</param>
            <param name = "length">The length of the octal string</param>
            <returns>Index of next byte</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.GetCheckSumOctalBytes(System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Add the checksum integer to header buffer.
            </summary>
            <param name = "value"></param>
            <param name = "buffer">The header buffer to set the checksum for</param>
            <param name = "offset">The offset into the buffer for the checksum</param>
            <param name = "length">The number of header bytes to update.
            It's formatted differently from the other fields: it has 6 digits, a
            null, then a space -- rather than digits, a space, then a null.
            The final space is already there, from checksumming
            </param>
            <returns>The modified buffer offset</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.ComputeCheckSum(System.Byte[])">
            <summary>
            Compute the checksum for a tar entry header.  
            The checksum field must be all spaces prior to this happening
            </summary>
            <param name = "buffer">The tar entry's header buffer.</param>
            <returns>The computed checksum.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.MakeCheckSum(System.Byte[])">
            <summary>
            Make a checksum for a tar entry ignoring the checksum contents.
            </summary>
            <param name = "buffer">The tar entry's header buffer.</param>
            <returns>The checksum for the buffer</returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarHeader.Name">
            <summary>
            Get/set the name for this tar entry.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when attempting to set the property to null.</exception>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarHeader.Mode">
            <summary>
            Get/set the entry's Unix style permission mode.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarHeader.UserId">
            <summary>
            The entry's user id.
            </summary>
            <remarks>
            This is only directly relevant to unix systems.
            The default is zero.
            </remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarHeader.GroupId">
            <summary>
            Get/set the entry's group id.
            </summary>
            <remarks>
            This is only directly relevant to linux/unix systems.
            The default value is zero.
            </remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarHeader.Size">
            <summary>
            Get/set the entry's size.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when setting the size to less than zero.</exception>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarHeader.ModTime">
            <summary>
            Get/set the entry's modification time.
            </summary>
            <remarks>
            The modification time is only accurate to within a second.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when setting the date time to less than 1/1/1970.</exception>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarHeader.Checksum">
            <summary>
            Get the entry's checksum.  This is only valid/updated after writing or reading an entry.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarHeader.IsChecksumValid">
            <summary>
            Get value of true if the header checksum is valid, false otherwise.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarHeader.TypeFlag">
            <summary>
            Get/set the entry's type flag.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarHeader.LinkName">
            <summary>
            The entry's link name.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when attempting to set LinkName to null.</exception>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarHeader.Magic">
            <summary>
            Get/set the entry's magic tag.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when attempting to set Magic to null.</exception>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarHeader.Version">
            <summary>
            The entry's version.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when attempting to set Version to null.</exception>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarHeader.UserName">
            <summary>
            The entry's user name.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarHeader.GroupName">
            <summary>
            Get/set the entry's group name.
            </summary>
            <remarks>
            This is only directly relevant to unix systems.
            </remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarHeader.DevMajor">
            <summary>
            Get/set the entry's major device number.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarHeader.DevMinor">
            <summary>
            Get/set the entry's minor device number.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Tar.TarBuffer">
            <summary>
            The TarBuffer class implements the tar archive concept
            of a buffered input stream. This concept goes back to the
            days of blocked tape drives and special io devices. In the
            C# universe, the only real function that this class
            performs is to ensure that files have the correct "record"
            size, or other tars will complain.
            <p>
            You should never have a need to access this class directly.
            TarBuffers are created by Tar IO Streams.
            </p>
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarBuffer.BlockSize">
            <summary>
            The size of a block in a tar archive in bytes.
            </summary>
            <remarks>This is 512 bytes.</remarks>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarBuffer.DefaultBlockFactor">
            <summary>
            The number of blocks in a default record.
            </summary>
            <remarks>
            The default value is 20 blocks per record.
            </remarks>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarBuffer.DefaultRecordSize">
            <summary>
            The size in bytes of a default record.
            </summary>
            <remarks>
            The default size is 10KB.
            </remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.GetRecordSize">
            <summary>
            Get the TAR Buffer's record size.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.GetBlockFactor">
            <summary>
            Get the TAR Buffer's block factor
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.#ctor">
            <summary>
            Construct a default TarBuffer
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.CreateInputTarBuffer(System.IO.Stream)">
            <summary>
            Create TarBuffer for reading with default BlockFactor
            </summary>
            <param name="inputStream">Stream to buffer</param>
            <returns>TarBuffer</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.CreateInputTarBuffer(System.IO.Stream,System.Int32)">
            <summary>
            Construct TarBuffer for reading inputStream setting BlockFactor
            </summary>
            <param name="inputStream">Stream to buffer</param>
            <param name="blockFactor">Blocking factor to apply</param>
            <returns>TarBuffer</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.CreateOutputTarBuffer(System.IO.Stream)">
            <summary>
            Construct TarBuffer for writing with default BlockFactor
            </summary>
            <param name="outputStream">output stream for buffer</param>
            <returns>TarBuffer</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.CreateOutputTarBuffer(System.IO.Stream,System.Int32)">
            <summary>
            Construct TarBuffer for writing Tar output to streams.
            </summary>
            <param name="outputStream">Output stream to write to.</param>
            <param name="blockFactor">Blocking factor to apply</param>
            <returns>TarBuffer</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.Initialize(System.Int32)">
            <summary>
            Initialization common to all constructors.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.IsEOFBlock(System.Byte[])">
            <summary>
            Determine if an archive block indicates End of Archive. End of
            archive is indicated by a block that consists entirely of null bytes.
            All remaining blocks for the record should also be null's
            However some older tars only do a couple of null blocks (Old GNU tar for one)
            and also partial records
            </summary>
            <param name = "block">The data block to check.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.SkipBlock">
            <summary>
            Skip over a block on the input stream.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.ReadBlock">
            <summary>
            Read a block from the input stream.
            </summary>
            <returns>
            The block of data read.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.ReadRecord">
            <summary>
            Read a record from data stream.
            </summary>
            <returns>
            false if End-Of-File, else true.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.GetCurrentBlockNum">
            <summary>
            Get the current block number, within the current record, zero based.
            </summary>
            <returns>
            The current zero based block number.
            </returns>
            <remarks>
            The absolute block number = (<see cref="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.GetCurrentRecordNum">record number</see> * <see cref="P:ICSharpCode.SharpZipLib.Tar.TarBuffer.BlockFactor">block factor</see>) + <see cref="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.GetCurrentBlockNum">block number</see>.
            </remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.GetCurrentRecordNum">
            <summary>
            Get the current record number.
            </summary>
            <returns>
            The current zero based record number.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.WriteBlock(System.Byte[])">
            <summary>
            Write a block of data to the archive.
            </summary>
            <param name="block">
            The data to write to the archive.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.WriteBlock(System.Byte[],System.Int32)">
            <summary>
            Write an archive record to the archive, where the record may be
            inside of a larger array buffer. The buffer must be "offset plus
            record size" long.
            </summary>
            <param name="buffer">
            The buffer containing the record data to write.
            </param>
            <param name="offset">
            The offset of the record data within buffer.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.WriteRecord">
            <summary>
            Write a TarBuffer record to the archive.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.Flush">
            <summary>
            Flush the current record if it has any data in it.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.Close">
            <summary>
            Close the TarBuffer. If this is an output buffer, also flush the
            current block before closing.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarBuffer.RecordSize">
            <summary>
            Get the record size for this buffer
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarBuffer.BlockFactor">
            <summary>
            Get the Blocking factor for the buffer
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarBuffer.CurrentBlock">
            <summary>
            Get the current block number, within the current record, zero based.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarBuffer.CurrentRecord">
            <summary>
            Get the current record number.
            </summary>
            <returns>
            The current zero based record number.
            </returns>
        </member>
        <member name="T:Mtime.Community.Utility.URLRewriter.Config.NfaRewriterConfig">
            <summary>
            定义了URL重写的配置类文件结构以及获取配置
            </summary>
        </member>
        <member name="T:Rss.RssCloud">
            <summary>Allow processes to register with a cloud to be notified of updates to the channel.</summary>
        </member>
        <member name="M:Rss.RssCloud.#ctor">
            <summary>Initialize a new instance of the RssCloud class.</summary>
        </member>
        <member name="P:Rss.RssCloud.Domain">
            <summary>Domain name or IP address of the cloud</summary>
        </member>
        <member name="P:Rss.RssCloud.Port">
            <summary>TCP port that the cloud is running on</summary>
        </member>
        <member name="P:Rss.RssCloud.Path">
            <summary>Location of its responder</summary>
        </member>
        <member name="P:Rss.RssCloud.RegisterProcedure">
            <summary>Name of the procedure to call to request notification</summary>
        </member>
        <member name="P:Rss.RssCloud.Protocol">
            <summary>Protocol used</summary>
        </member>
        <member name="T:Rss.RssModuleCollection">
            <summary>A strongly typed collection of <see cref="T:Rss.RssModule"/> objects</summary>
        </member>
        <member name="M:Rss.RssModuleCollection.Add(Rss.RssModule)">
            <summary>Adds a specified item to this collection.</summary>
            <param name="rssModule">The item to add.</param>
            <returns>The zero-based index of the added item.</returns>
        </member>
        <member name="M:Rss.RssModuleCollection.Contains(Rss.RssModule)">
            <summary>Determines whether the RssModuleCollection contains a specific element.</summary>
            <param name="rssModule">The RssModule to locate in the RssModuleCollection.</param>
            <returns>true if the RssModuleCollection contains the specified value; otherwise, false.</returns>
        </member>
        <member name="M:Rss.RssModuleCollection.CopyTo(Rss.RssModule[],System.Int32)">
            <summary>Copies the entire RssModuleCollection to a compatible one-dimensional <see cref="T:System.Array"/>, starting at the specified index of the target array.</summary>
            <param name="array">The one-dimensional RssModule Array that is the destination of the elements copied from RssModuleCollection. The Array must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">array is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero.</exception>
            <exception cref="T:System.ArgumentException">array is multidimensional. -or- index is equal to or greater than the length of array.-or-The number of elements in the source RssModuleCollection is greater than the available space from index to the end of the destination array.</exception>
        </member>
        <member name="M:Rss.RssModuleCollection.IndexOf(Rss.RssModule)">
            <summary>Searches for the specified RssModule and returns the zero-based index of the first occurrence within the entire RssModuleCollection.</summary>
            <param name="rssModule">The RssModule to locate in the RssModuleCollection.</param>
            <returns>The zero-based index of the first occurrence of RssModule within the entire RssModuleCollection, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Rss.RssModuleCollection.Insert(System.Int32,Rss.RssModule)">
            <summary>Inserts an item into this collection at a specified index.</summary>
            <param name="index">The zero-based index of the collection at which to insert the item.</param>
            <param name="rssModule">The item to insert into this collection.</param>
        </member>
        <member name="M:Rss.RssModuleCollection.Remove(Rss.RssModule)">
            <summary>Removes a specified item from this collection.</summary>
            <param name="rssModule">The item to remove.</param>
        </member>
        <member name="P:Rss.RssModuleCollection.Item(System.Int32)">
            <summary>Gets or sets the item at a specified index.<para>In C#, this property is the indexer for the class.</para></summary>
            <param name="index">The index of the collection to access.</param>
            <value>An item at each valid index.</value>
            <remarks>This method is an indexer that can be used to access the collection.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index.</exception>
        </member>
        <member name="T:Mtime.Community.Utility.ResourceManager.SonyResourceManager">
            <summary>
            Sony资源
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.HtmlHelper.#ctor(System.String)">
            <summary>
            Filters unknown markup. Will not encode exceptions
            </summary>
            <param name="html">Markup to filter</param>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.HtmlHelper.#ctor(System.String,System.Boolean)">
            <summary>
            Filters unknown markup
            </summary>
            <param name="html">Markup to filter</param>
            <param name="encodeRuleExceptions">Should unknown elements be encoded or removed?</param>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.HtmlHelper.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Filters unknown markup
            </summary>
            <param name="html">Markup to filter</param>
            <param name="encodeRuleExceptions">Should unknown elements be encoded or removed?</param>
            <param name="removeScripts">Check for javascript: attributes</param>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.HtmlHelper.Clean">
            <summary>
            Returns the results of a cleaning.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.HtmlHelper.Format">
            <summary>
            Walks one time through the HTML. All elements/tags are validated.
            The rest of the text is simply added to the internal queue
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.HtmlHelper.Validate(System.String)">
            <summary>
            Main method for starting element validation
            </summary>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.HtmlHelper.ValidateSingleTag(System.String)">
            <summary>
            Validates single element tags such as <br /> and <hr class = "X" />
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.HtmlHelper.ValidateStartTag(System.String)">
            <summary>
            Validates a start tag
            </summary>
            <param name="tag"></param>
            <returns>the tag and validate attributes</returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.HtmlHelper.ValidateAttributes(System.String,System.String,System.String,System.String)">
            <summary>
            Validates the elements attribute collection
            </summary>
            <param name="allowedAttributes"></param>
            <param name="tagAttributes"></param>
            <param name="tagName"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.HtmlHelper.ValidateEndTag(System.String)">
            <summary>
            Validate End/Closing tag
            </summary>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="T:ProtoBuf.ProtoEnumAttribute">
            <summary>
            Used to define protocol-buffer specific behavior for
            enumerated values.
            </summary>
        </member>
        <member name="M:ProtoBuf.ProtoEnumAttribute.HasValue">
            <summary>
            Indicates whether this instance has a customised value mapping
            </summary>
            <returns>true if a specific value is set</returns>
        </member>
        <member name="P:ProtoBuf.ProtoEnumAttribute.Value">
            <summary>
            Gets or sets the specific value to use for this enum during serialization.
            </summary>
        </member>
        <member name="P:ProtoBuf.ProtoEnumAttribute.Name">
            <summary>
            Gets or sets the defined name of the enum, as used in .proto
            (this name is not used during serialization).
            </summary>
        </member>
        <member name="T:ProtoBuf.PrefixStyle">
            <summary>
            Specifies the type of prefix that should be applied to messages.
            </summary>
        </member>
        <member name="F:ProtoBuf.PrefixStyle.None">
            <summary>
            No length prefix is applied to the data; the data is terminated only be the end of the stream.
            </summary>
        </member>
        <member name="F:ProtoBuf.PrefixStyle.Base128">
            <summary>
            A base-128 length prefix is applied to the data (efficient for short messages).
            </summary>
        </member>
        <member name="F:ProtoBuf.PrefixStyle.Fixed32">
            <summary>
            A fixed-length (little-endian) length prefix is applied to the data (useful for compatibility).
            </summary>
        </member>
        <member name="F:ProtoBuf.PrefixStyle.Fixed32BigEndian">
            <summary>
            A fixed-length (big-endian) length prefix is applied to the data (useful for compatibility).
            </summary>
        </member>
        <member name="T:Mtime.Community.Utility.Client.DefaultNodeLocator">
            <summary>
            This is a ketama-like consistent hashing based node locator. Used when no other <see cref="T:IMemcachedNodeLocator"/> is specified for the pool.
            </summary>
        </member>
        <member name="M:Mtime.Service.Messaging.LogWriter.WriteMsg(System.String)">
            <summary>
            写入普通信息日志
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Mtime.Service.Messaging.LogWriter.WriteMsg(System.String,System.Object[])">
            <summary>
            写入普通信息日志
            </summary>
            <param name="msg"></param>
            <param name="args"></param>
        </member>
        <member name="M:Mtime.Service.Messaging.LogWriter.WriteMsg(System.Exception)">
            <summary>
            写入普通信息日志
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Mtime.Service.Messaging.LogWriter.WriteMsg(Mtime.Service.Messaging.LogType,System.String)">
            <summary>
            写入指定类型的日志
            </summary>
            <param name="type"></param>
            <param name="msg"></param>
        </member>
        <member name="M:Mtime.Service.Messaging.LogWriter.WriteMsg(Mtime.Service.Messaging.LogType,System.String,System.Object[])">
            <summary>
            写入指定类型的日志
            </summary>
            <param name="type"></param>
            <param name="msg"></param>
        </member>
        <member name="M:Mtime.Service.Messaging.LogWriter.WriteMsgData(System.Messaging.Message)">
            <summary>
            记录处理失败的消息，用于重新发送消息
            </summary>
            <param name="type"></param>
            <param name="msg"></param>
        </member>
        <member name="M:Mtime.Service.Messaging.LogWriter.WriteMsgData(System.String)">
            <summary>
            记录处理失败的消息，用于重新发送消息
            </summary>
            <param name="type"></param>
            <param name="msg"></param>
        </member>
        <member name="M:Mtime.Community.Utility.Json.JsonTrue.ToString">
            <returns>A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.</returns>
        </member>
        <member name="T:GifUtility.OcTreeQuantizer">
            <summary>
            八叉树颜色量化器
            </summary>
        </member>
        <member name="M:Mtime.EPay.PayEase.PayEaseProcessor.Send(Mtime.EPay.Interface.IOrder)">
            <summary>
            此方法用于向首信易支付平台发送订单数据
            </summary>
            <param name="order"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.EPay.PayEase.PayEaseProcessor.Receive(System.Collections.Specialized.NameValueCollection)">
            <summary>
            此方法用于从首信易实时返回支付结果
            </summary>
            <param name="Url"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.EPay.PayEase.PayEaseProcessor.Notify(System.Collections.Specialized.NameValueCollection)">
            <summary>
            此方法用于首信易支付的消息通知机制
            sent:表示成功收到支付结果信息。
            error:表示接收消息发生错误，如md5校验错。
            </summary>
            <returns></returns>
        </member>
        <member name="F:Mtime.EPay.AliPayTradeStatus.WAIT_BUYER_PAY">
            <summary>
            等待买家付款
            </summary>
        </member>
        <member name="F:Mtime.EPay.AliPayTradeStatus.WAIT_SELLER_CONFIRM_TRADE">
            <summary>
            交易已创建，等待卖家确认
            </summary>
        </member>
        <member name="F:Mtime.EPay.AliPayTradeStatus.WAIT_SYS_CONFIRM_PAY">
            <summary>
            确认买家付款中，暂勿发货
            </summary>
        </member>
        <member name="F:Mtime.EPay.AliPayTradeStatus.WAIT_SELLER_SEND_GOODS">
            <summary>
            支付宝收到买家付款，请卖家发货
            </summary>
        </member>
        <member name="F:Mtime.EPay.AliPayTradeStatus.WAIT_BUYER_CONFIRM_GOODS">
            <summary>
            卖家已发货，买家确认中
            </summary>
        </member>
        <member name="F:Mtime.EPay.AliPayTradeStatus.WAIT_SYS_PAY_SELLER">
            <summary>
            买家确认收到货，等待支付宝打款给卖家
            </summary>
        </member>
        <member name="F:Mtime.EPay.AliPayTradeStatus.TRADE_FINISHED">
            <summary>
            交易成功结束
            </summary>
        </member>
        <member name="F:Mtime.EPay.AliPayTradeStatus.TRADE_CLOSED">
            <summary>
            交易中途关闭（未完成）
            </summary>
        </member>
        <member name="T:Mtime.Community.Utility.MemoryTributary">
            <summary>
            MemoryTributary is a re-implementation of MemoryStream that uses a dynamic list of byte arrays as a backing store, instead of a single byte array, the allocation
            of which will fail for relatively small streams as it requires contiguous memory.
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.MemoryTributary.ToArray">
            <summary>
            Returns the entire content of the stream as a byte array. This is not safe because the call to new byte[] may 
            fail if the stream is large enough. Where possible use methods which operate on streams directly instead.
            </summary>
            <returns>A byte[] containing the current data in the stream</returns>
        </member>
        <member name="M:Mtime.Community.Utility.MemoryTributary.ReadFrom(System.IO.Stream,System.Int64)">
            <summary>
            Reads length bytes from source into the this instance at the current position.
            </summary>
            <param name="source">The stream containing the data to copy</param>
            <param name="length">The number of bytes to copy</param>
        </member>
        <member name="P:Mtime.Community.Utility.MemoryTributary.block">
            <summary>
            The block of memory currently addressed by Position
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.MemoryTributary.blockId">
            <summary>
            The id of the block currently addressed by Position
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.MemoryTributary.blockOffset">
            <summary>
            The offset of the byte currently addressed by Position, into the block that contains it
            </summary>
        </member>
        <member name="T:Mtime.MongoDB.Protocol.ReplyMessage">
            <summary>
            
            </summary>
            <remarks>
            struct {
            	MsgHeader header;         // standard message header
            	int32     responseFlag;   // normally zero, non-zero on query failure
            	int64     cursorID;       // id of the cursor created for this query response
            	int32     startingFrom;   // indicates where in the cursor this reply is starting
            	int32     numberReturned; // number of documents in the reply
            	document* documents;      // documents
            }
            </remarks>
        </member>
        <member name="T:Mtime.MongoDB.Protocol.MsgMessage">
            <summary>
            
            </summary>
            <remarks>
            struct {
                MsgHeader header;    // standard message header
                cstring   message;   // message for the database
            }
            </remarks>
        </member>
        <member name="M:Mtime.MongoDB.MongoQuery.Group(System.String[],Mtime.MongoDB.ConditionBuilder,Mtime.MongoDB.Document,System.String)">
            <summary>
            示例：
            SQL:	 select a,b,sum(c) csum from coll where active=1 group by a,b
            MongoDB: Group(new string[]{"a", "b"}, new ConditionBuilder().Add("active", 1), 0, "function(obj,prev) { prev.csum += obj.c; }")
            </summary>
            <param name="keys"></param>
            <param name="condition"></param>
            <param name="initial">Document对象，如：{ csum: 0 }</param>
            <param name="reduce"></param>
            <returns></returns
        </member>
        <member name="M:Mtime.MongoDB.MongoQuery.BeginQuery">
            <summary>
            准备执行多次查询，在所有查询完成后必须调用EndQuery以释放资源
            </summary>
        </member>
        <member name="M:Mtime.MongoDB.MongoQuery.EndQuery">
            <summary>
            结束执行多次查询
            </summary>
        </member>
        <member name="M:Mtime.MongoDB.MongoQuery.GetLastError">
            <summary>
            获取最近一次操作错误信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mtime.MongoDB.MongoQuery.Delete(Mtime.MongoDB.ConditionBuilder)">
            <summary>
            删除记录，如果条件为空将删除所有记录
            </summary>
            <param name="condition"></param>
        </member>
        <member name="M:Mtime.MongoDB.MongoQuery.Insert(Mtime.MongoDB.Document[])">
            <summary>
            插入文档到数据库中
            </summary>
            <param name="docs"></param>
        </member>
        <member name="M:Mtime.MongoDB.MongoQuery.UpdateAll(Mtime.MongoDB.Document,Mtime.MongoDB.ConditionBuilder)">
            <summary>
            更新所有匹配记录
            </summary>
            <param name="doc"></param>
            <param name="condition"></param>
        </member>
        <member name="M:Mtime.MongoDB.MongoQuery.UpdateAll(Mtime.MongoDB.UpdateBuilder,Mtime.MongoDB.ConditionBuilder)">
            <summary>
            更新所有匹配记录
            </summary>
            <param name="update"></param>
            <param name="condition"></param>
        </member>
        <member name="M:Mtime.MongoDB.MongoQuery.UpdateOne(Mtime.MongoDB.Document,Mtime.MongoDB.ConditionBuilder)">
            <summary>
            仅更新第一条匹配记录
            </summary>
            <param name="doc"></param>
            <param name="condition"></param>
        </member>
        <member name="M:Mtime.MongoDB.MongoQuery.UpdateOne(Mtime.MongoDB.UpdateBuilder,Mtime.MongoDB.ConditionBuilder)">
            <summary>
            仅更新第一条匹配记录
            </summary>
            <param name="doc"></param>
            <param name="condition"></param>
        </member>
        <member name="M:Mtime.MongoDB.MongoQuery.UpdateOrInsert(Mtime.MongoDB.Document,Mtime.MongoDB.ConditionBuilder)">
            <summary>
            如果存在匹配条件的记录则更新一条文档，否则插入文档
            </summary>
            <param name="doc"></param>
        </member>
        <member name="M:Mtime.MongoDB.MongoQuery.UpdateOrInsert(Mtime.MongoDB.UpdateBuilder,Mtime.MongoDB.ConditionBuilder)">
            <summary>
            如果存在匹配条件的记录则更新一条文档，否则插入文档
            </summary>
            <param name="update"></param>
        </member>
        <member name="T:Mtime.MongoDB.Document">
            <summary>
            文档对象，对应数据库中一条记录
            </summary>
        </member>
        <member name="M:Mtime.MongoDB.Communication.ConnectionFactory.CreateConnection(System.String)">
            <summary>
            创建连接
            </summary>
            <param name="connString"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.MongoDB.Communication.ConnectionFactory.Clear">
            <summary>
            清理过期连接
            </summary>
        </member>
        <member name="F:Mtime.MongoDB.ModifierOperations.Inc">
            <summary>
            增加
            </summary>
        </member>
        <member name="F:Mtime.MongoDB.ModifierOperations.Set">
            <summary>
            设置
            </summary>
        </member>
        <member name="F:Mtime.MongoDB.ModifierOperations.Unset">
            <summary>
            Deletes a given field. v1.3+
            </summary>
        </member>
        <member name="F:Mtime.MongoDB.ModifierOperations.Push">
            <summary>
            appends value to field, if field  is an existing array, otherwise sets field to the array [value] if field is not present. If field is present but is not an array, an error condition is raised.
            </summary>
        </member>
        <member name="F:Mtime.MongoDB.ModifierOperations.PushAll">
            <summary>
            appends each value in value_array to field, if field is an existing array, otherwise sets field  to the array value_array if field is not present. If field is present but is not an array, an error condition is raised.
            </summary>
        </member>
        <member name="F:Mtime.MongoDB.ModifierOperations.AddToSet">
            <summary>
            Adds value to the array only if its not in the array already.
            To add many valuest.update:	{ $addToSet : { a : { $each : [ 3 , 5 , 6 ] } } }
            </summary>
        </member>
        <member name="F:Mtime.MongoDB.ModifierOperations.Pop">
            <summary>
            removes the last element in an array (ADDED in 1.1)
            </summary>
        </member>
        <member name="F:Mtime.MongoDB.ModifierOperations.Pull">
            <summary>
            removes all occurrences of value from field, if field is an array. If field is present but is not an array, an error condition is raised.
            </summary>
        </member>
        <member name="F:Mtime.MongoDB.ModifierOperations.PullAll">
            <summary>
            removes all occurrences of each value in value_array from field, if field is an array. If field is present but is not an array, an error condition is raised.
            </summary>
        </member>
        <member name="T:Mtime.Community.Utility.Client.ProtoTranscoder">
            <summary>
            Acts as a transcoder compatible with the "enyim" client, swapping
            BinaryFormatter for protobuf-net's Serializer
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.Sets.Add(System.String,System.Object)">
            <summary>
            Add member to the set stored at key. 
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>the number of elements actually added to the set. -1 failed.</returns>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.Sets.Add``1(System.String,System.Collections.Generic.IList{``0})">
            <summary>
            Add members to the set stored at key. 
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>the number of elements actually added to the set. -1 failed.</returns>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.Sets.Remove(System.String,System.Object)">
            <summary>
            Remove member from the set stored at key.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>1 if the element was removed. 0 if the element was not a member of the set. -1 failed</returns>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.Sets.GetAllValues``1(System.String)">
            <summary>
            Returns all the members of the set value stored at key.
            </summary>
            <param name="key"></param>
            <returns>all elements of the set. null: failed.</returns>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.Sets.Exists(System.String,System.Object)">
            <summary>
            Returns if member is a member of the set stored at key.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.Sets.GetCount(System.String)">
            <summary>
            Returns the set cardinality (number of elements) of the set stored at key.
            </summary>
            <param name="key"></param>
            <returns>the cardinality (number of elements) of the set, or 0 if key does not exist. -1 failed.</returns>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.Sets.Move(System.String,System.String,System.Object)">
            <summary>
            Move member from the set at source to the set at destination. 
            </summary>
            <param name="sourceKey"></param>
            <param name="destinationKey"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.Sets.PopAnRandom``1(System.String)">
            <summary>
            Removes and returns a random element from the set value stored at key.
            </summary>
            <param name="key"></param>
            <returns>the removed element, or null when key does not exist.</returns>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.Sets.GetAnRandom``1(System.String)">
            <summary>
            returns a random element from the set value stored at key.
            </summary>
            <param name="key"></param>
            <returns>the removed element, or null when key does not exist.</returns>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.Sets.GetOverlap``1(System.String[])">
            <summary>
            Returns the members of the set resulting from the intersection of all the given sets.
            </summary>
            <param name="keys"></param>
            <returns>list with members of the resulting set. null when members don't exist</returns>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.Sets.StoreOverlap(System.String,System.String[])">
            <summary>
            it is stored in destination for the overlap list
            </summary>
            <param name="destinationKey"></param>
            <param name="keys"></param>
            <returns>the number of elements in the resulting set. -1 failed.</returns>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.Sets.GetUnion``1(System.String[])">
            <summary>
            Returns the members of the set resulting from the union of all the given sets.
            </summary>
            <param name="keys"></param>
            <returns>list with members of the resulting set. null when members don't exist </returns>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.Sets.StoreUnion(System.String,System.String[])">
            <summary>
            it is stored in destination for the union list
            </summary>
            <param name="destinationKey"></param>
            <param name="keys"></param>
            <returns>the number of elements in the resulting set. -1 failed.</returns>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.Sets.GetDiff``1(System.String[])">
            <summary>
            Returns the members of the set resulting from the difference between the first set and all the successive sets.
            </summary>
            <param name="keys"></param>
            <returns>list with members of the resulting set. null when members don't exist </returns>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.Sets.StoreDiff(System.String,System.String[])">
            <summary>
            This command is equal to SDIFF, but instead of returning the resulting set, it is stored in destination.
            </summary>
            <param name="destinationKey"></param>
            <param name="keys"></param>
            <returns>the number of elements in the resulting set. -1 failed.</returns>
        </member>
        <member name="M:Mtime.Community.Utility.Client.HttpProxy.Components.CookieHelper.SetCookie(System.Net.CookieCollection,System.String)">
            <summary>
            Set-Cookie
            </summary>
            <param name="cookies"></param>
            <param name="header"></param>
        </member>
        <member name="M:Mtime.Community.Utility.Client.HttpProxy.Components.CookieHelper.SetCookie2(System.Net.CookieCollection,System.String)">
            <summary>
            "Set-Cookie2" 
            </summary>
            <param name="cookies"></param>
            <param name="cookieLine"></param>
        </member>
        <member name="T:Mtime.Community.Utility.Client.SearchService.Protocol.SearchResponseProtocol">
            <summary>
            127MessageDataLength\r\nResponseMessage
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.Client.SearchService.Protocol.SearchResponseProtocol.Reset">
            <summary>
            重置分析器
            </summary>
        </member>
        <member name="T:Mtime.Community.Utility.Client.SearchService.Protocol.SearchResponseProtocol.RemoteParseState">
            <summary>
            Remote协议分析状态
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.Client.SearchService.Protocol.SearchResponseProtocol.RemoteParseState.Action">
            <summary>
            操作
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.Client.SearchService.Protocol.SearchResponseProtocol.RemoteParseState.Length">
            <summary>
            消息长度
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.Client.SearchService.Protocol.SearchResponseProtocol.RemoteParseState.Body">
            <summary>
            内容主体
            </summary>
        </member>
        <member name="T:Mtime.Community.Utility.Client.FNV64">
            <summary>
            Implements a 64 bit long Fowler-Noll-Vo hash.
            </summary>
            <remarks>
            Calculation found at http://lists.danga.com/pipermail/memcached/2007-April/003846.html, but 
            it is pretty much available everywhere
            </remarks>
        </member>
        <member name="M:Mtime.Community.Utility.Client.FNV64.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FNV64"/> class.
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.Client.FNV64.Initialize">
            <summary>
            Initializes an instance of <see cref="T:FNV64"/>.
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.Client.FNV64.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>Routes data written to the object into the <see cref="T:FNV64" /> hash algorithm for computing the hash.</summary>
            <param name="array">The input data. </param>
            <param name="ibStart">The offset into the byte array from which to begin using data. </param>
            <param name="cbSize">The number of bytes in the array to use as data. </param>
        </member>
        <member name="M:Mtime.Community.Utility.Client.FNV64.HashFinal">
            <summary>
            Returns the computed <see cref="T:FNV64" /> hash value after all data has been written to the object.
            </summary>
            <returns>The computed hash code.</returns>
        </member>
        <member name="T:Mtime.Community.Utility.Client.FNV1a">
            <summary>
            Implements an FNV1a hash algorithm.
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.Client.FNV1a.CurrentHashValue">
            <summary>
            The current hash value.
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.Client.FNV1a.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FNV1a"/> class.
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.Client.FNV1a.Initialize">
            <summary>
            Initializes an instance of <see cref="T:FNV1a"/>.
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.Client.FNV1a.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>Routes data written to the object into the <see cref="T:FNV1a" /> hash algorithm for computing the hash.</summary>
            <param name="array">The input data. </param>
            <param name="ibStart">The offset into the byte array from which to begin using data. </param>
            <param name="cbSize">The number of bytes in the array to use as data. </param>
        </member>
        <member name="M:Mtime.Community.Utility.Client.FNV1a.HashFinal">
            <summary>
            Returns the computed <see cref="T:FNV1a" /> hash value after all data has been written to the object.
            </summary>
            <returns>The computed hash code.</returns>
        </member>
        <member name="T:Mtime.Community.Utility.Client.ModifiedFNV">
            <summary>
            Implements a modified FNV hash. Provides better distribution than FNV1 but it's only 32 bit long.
            </summary>
            <remarks>Algorithm found at http://bretm.home.comcast.net/hash/6.html</remarks>
        </member>
        <member name="M:Mtime.Community.Utility.Client.ModifiedFNV.HashFinal">
            <summary>
            Returns the computed <see cref="T:ModifiedFNV" /> hash value after all data has been written to the object.
            </summary>
            <returns>The computed hash code.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Mtime.Community.Utility.BaiduTopicRss.BaiduTopicRss" -->
        <member name="M:Mtime.Community.Utility.BaiduTopicRss.BaiduTopicRss.#ctor(System.String,System.String,System.Int32,System.DateTime,System.String)">
            <summary>
            
            </summary>
            <param name="webSite">站点地址</param>
            <param name="webMaster">负责人员的Email</param>
            <param name="updatePeri">更新周期，以分钟为单位</param>
            <param name="updatetime">该 xml 文件最近一次的更新时间</param>
            <param name="version">论坛所使用程序的版本</param>
        </member>
        <member name="P:Mtime.Community.Utility.BaiduTopicRss.BaiduTopicRss.WebSite">
            <summary>
            站点地址
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.BaiduTopicRss.BaiduTopicRss.WebMaster">
            <summary>
            负责人员的Email
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.BaiduTopicRss.BaiduTopicRss.UpdatePeri">
            <summary>
            更新周期，以分钟为单位
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.BaiduTopicRss.BaiduTopicRss.BaiduNewsRssItems">
            <summary>
            记录的集合
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.HostSystemID">
            <summary>
            Defines known values for the <see cref="T:ICSharpCode.SharpZipLib.Zip.HostSystemID"/> property.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.HostSystemID.Msdos">
            <summary>
            Host system = MSDOS
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.HostSystemID.Amiga">
            <summary>
            Host system = Amiga
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.HostSystemID.OpenVms">
            <summary>
            Host system = Open VMS
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.HostSystemID.Unix">
            <summary>
            Host system = Unix
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.HostSystemID.VMCms">
            <summary>
            Host system = VMCms
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.HostSystemID.AtariST">
            <summary>
            Host system = Atari ST
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.HostSystemID.OS2">
            <summary>
            Host system = OS2
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.HostSystemID.Macintosh">
            <summary>
            Host system = Macintosh
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.HostSystemID.ZSystem">
            <summary>
            Host system = ZSystem
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.HostSystemID.Cpm">
            <summary>
            Host system = Cpm
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.HostSystemID.WindowsNT">
            <summary>
            Host system = Windows NT
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.HostSystemID.MVS">
            <summary>
            Host system = MVS
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.HostSystemID.Vse">
            <summary>
            Host system = VSE
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.HostSystemID.AcornRisc">
            <summary>
            Host system = Acorn RISC
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.HostSystemID.Vfat">
            <summary>
            Host system = VFAT
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.HostSystemID.AlternateMvs">
            <summary>
            Host system = Alternate MVS
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.HostSystemID.BeOS">
            <summary>
            Host system = BEOS
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.HostSystemID.Tandem">
            <summary>
            Host system = Tandem
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.HostSystemID.OS400">
            <summary>
            Host system = OS400
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.HostSystemID.OSX">
            <summary>
            Host system = OSX
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.HostSystemID.WinZipAES">
            <summary>
            Host system = WinZIP AES
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ZipEntry">
            <summary>
            This class represents an entry in a zip archive.  This can be a file
            or a directory
            ZipFile and ZipInputStream will give you instances of this class as 
            information about the members in an archive.  ZipOutputStream
            uses an instance of this class when creating an entry in a Zip file.
            <br/>
            <br/>Author of the original java version : Jochen Hoenicke
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipEntry.#ctor(System.String)">
            <summary>
            Creates a zip entry with the given name.
            </summary>
            <param name="name">
            The name for this entry. Can include directory components.
            The convention for names is 'unix' style paths with relative names only.
            There are with no device names and path elements are separated by '/' characters.
            </param>
            <exception cref="T:System.ArgumentNullException">
            The name passed is null
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipEntry.#ctor(System.String,System.Int32)">
            <summary>
            Creates a zip entry with the given name and version required to extract
            </summary>
            <param name="name">
            The name for this entry. Can include directory components.
            The convention for names is 'unix'  style paths with no device names and 
            path elements separated by '/' characters.  This is not enforced see <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipEntry.CleanName(System.String)">CleanName</see>
            on how to ensure names are valid if this is desired.
            </param>
            <param name="versionRequiredToExtract">
            The minimum 'feature version' required this entry
            </param>
            <exception cref="T:System.ArgumentNullException">
            The name passed is null
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipEntry.#ctor(System.String,System.Int32,System.Int32,ICSharpCode.SharpZipLib.Zip.CompressionMethod)">
            <summary>
            Initializes an entry with the given name and made by information
            </summary>
            <param name="name">Name for this entry</param>
            <param name="madeByInfo">Version and HostSystem Information</param>
            <param name="versionRequiredToExtract">Minimum required zip feature version required to extract this entry</param>
            <param name="method">Compression method for this entry.</param>
            <exception cref="T:System.ArgumentNullException">
            The name passed is null
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            versionRequiredToExtract should be 0 (auto-calculate) or &gt; 10
            </exception>
            <remarks>
            This constructor is used by the ZipFile class when reading from the central header
            It is not generally useful, use the constructor specifying the name only.
            </remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipEntry.#ctor(ICSharpCode.SharpZipLib.Zip.ZipEntry)">
            <summary>
            Creates a deep copy of the given zip entry.
            </summary>
            <param name="entry">
            The entry to copy.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipEntry.HasDosAttributes(System.Int32)">
            <summary>
            Test the external attributes for this <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry"/> to
            see if the external attributes are Dos based (including WINNT and variants)
            and match the values
            </summary>
            <param name="attributes">The attributes to test.</param>
            <returns>Returns true if the external attributes are known to be DOS/Windows 
            based and have the same attributes set as the value passed.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipEntry.ForceZip64">
            <summary>
            Force this entry to be recorded using Zip64 extensions.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipEntry.IsZip64Forced">
            <summary>
            Get a value indicating wether Zip64 extensions were forced.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipEntry.ProcessExtraData(System.Boolean)">
            <summary>
            Process extra data fields updating the entry based on the contents.
            </summary>
            <param name="localHeader">True if the extra data fields should be handled
            for a local header, rather than for a central header.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipEntry.IsCompressionMethodSupported">
            <summary>
            Test entry to see if data can be extracted.
            </summary>
            <returns>Returns true if data can be extracted for this entry; false otherwise.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipEntry.Clone">
            <summary>
            Creates a copy of this zip entry.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipEntry.ToString">
            <summary>
            Gets the string representation of this ZipEntry.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipEntry.IsCompressionMethodSupported(ICSharpCode.SharpZipLib.Zip.CompressionMethod)">
            <summary>
            Test a <see cref="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.CompressionMethod">compression method</see> to see if this library
            supports extracting data compressed with that method
            </summary>
            <param name="method">The compression method to test.</param>
            <returns>Returns true if the compression method is supported; false otherwise</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipEntry.CleanName(System.String)">
            <summary>
            Cleans a name making it conform to Zip file conventions.
            Devices names ('c:\') and UNC share names ('\\server\share') are removed
            and forward slashes ('\') are converted to back slashes ('/').
            Names are made relative by trimming leading slashes which is compatible
            with the ZIP naming convention.
            </summary>
            <param name="name">Name to clean</param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.HasCrc">
            <summary>
            Get a value indicating wether the entry has a CRC value available.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.IsCrypted">
            <summary>
            Get/Set flag indicating if entry is encrypted.
            A simple helper routine to aid interpretation of <see cref="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.Flags">flags</see>
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.IsUnicodeText">
            <summary>
            Get / set a flag indicating wether entry name and comment text are
            encoded in Unicode UTF8
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.CryptoCheckValue">
            <summary>
            Value used during password checking for PKZIP 2.0 / 'classic' encryption.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.Flags">
            <summary>
            Get/Set general purpose bit flag for entry
            </summary>
            <remarks>
            General purpose bit flag<br/>
            Bit 0: If set, indicates the file is encrypted<br/>
            Bit 1-2 Only used for compression type 6 Imploding, and 8, 9 deflating<br/>
            Imploding:<br/>
            Bit 1 if set indicates an 8K sliding dictionary was used.  If clear a 4k dictionary was used<br/>
            Bit 2 if set indicates 3 Shannon-Fanno trees were used to encode the sliding dictionary, 2 otherwise<br/>
            <br/>
            Deflating:<br/>
              Bit 2    Bit 1<br/>
                0        0       Normal compression was used<br/>
                0        1       Maximum compression was used<br/>
                1        0       Fast compression was used<br/>
                1        1       Super fast compression was used<br/>
            <br/>
            Bit 3: If set, the fields crc-32, compressed size
            and uncompressed size are were not able to be written during zip file creation
            The correct values are held in a data descriptor immediately following the compressed data. <br/>
            Bit 4: Reserved for use by PKZIP for enhanced deflating<br/>
            Bit 5: If set indicates the file contains compressed patch data<br/>
            Bit 6: If set indicates strong encryption was used.<br/>
            Bit 7-15: Unused or reserved<br/>
            </remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.ZipFileIndex">
            <summary>
            Get/Set index of this entry in Zip file
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.Offset">
            <summary>
            Get/set offset for use in central header
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.ExternalFileAttributes">
            <summary>
            Get/Set external file attributes as an integer.
            The values of this are operating system dependant see
            <see cref="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.HostSystem">HostSystem</see> for details
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.VersionMadeBy">
            <summary>
            Get the version made by for this entry or zero if unknown.
            The value / 10 indicates the major version number, and 
            the value mod 10 is the minor version number
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.HostSystem">
            <summary>
            Gets the compatability information for the <see cref="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.ExternalFileAttributes">external file attribute</see>
            If the external file attributes are compatible with MS-DOS and can be read
            by PKZIP for DOS version 2.04g then this value will be zero.  Otherwise the value
            will be non-zero and identify the host system on which the attributes are compatible.
            </summary>
            		
            <remarks>
            The values for this as defined in the Zip File format and by others are shown below.  The values are somewhat
            misleading in some cases as they are not all used as shown.  You should consult the relevant documentation
            to obtain up to date and correct information.  The modified appnote by the infozip group is
            particularly helpful as it documents a lot of peculiarities.  The document is however a little dated.
            <list type="table">
            <item>0 - MS-DOS and OS/2 (FAT / VFAT / FAT32 file systems)</item>
            <item>1 - Amiga</item>
            <item>2 - OpenVMS</item>
            <item>3 - Unix</item>
            <item>4 - VM/CMS</item>
            <item>5 - Atari ST</item>
            <item>6 - OS/2 HPFS</item>
            <item>7 - Macintosh</item>
            <item>8 - Z-System</item>
            <item>9 - CP/M</item>
            <item>10 - Windows NTFS</item>
            <item>11 - MVS (OS/390 - Z/OS)</item>
            <item>12 - VSE</item>
            <item>13 - Acorn Risc</item>
            <item>14 - VFAT</item>
            <item>15 - Alternate MVS</item>
            <item>16 - BeOS</item>
            <item>17 - Tandem</item>
            <item>18 - OS/400</item>
            <item>19 - OS/X (Darwin)</item>
            <item>99 - WinZip AES</item>
            <item>remainder - unused</item>
            </list>
            </remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.Version">
            <summary>
            Get minimum Zip feature version required to extract this entry
            </summary>		
            <remarks>
            Minimum features are defined as:<br/>
            1.0 - Default value<br/>
            1.1 - File is a volume label<br/>
            2.0 - File is a folder/directory<br/>
            2.0 - File is compressed using Deflate compression<br/>
            2.0 - File is encrypted using traditional encryption<br/>
            2.1 - File is compressed using Deflate64<br/>
            2.5 - File is compressed using PKWARE DCL Implode<br/>
            2.7 - File is a patch data set<br/>
            4.5 - File uses Zip64 format extensions<br/>
            4.6 - File is compressed using BZIP2 compression<br/>
            5.0 - File is encrypted using DES<br/>
            5.0 - File is encrypted using 3DES<br/>
            5.0 - File is encrypted using original RC2 encryption<br/>
            5.0 - File is encrypted using RC4 encryption<br/>
            5.1 - File is encrypted using AES encryption<br/>
            5.1 - File is encrypted using corrected RC2 encryption<br/>
            5.1 - File is encrypted using corrected RC2-64 encryption<br/>
            6.1 - File is encrypted using non-OAEP key wrapping<br/>
            6.2 - Central directory encryption (not confirmed yet)<br/>
            6.3 - File is compressed using LZMA<br/>
            6.3 - File is compressed using PPMD+<br/>
            6.3 - File is encrypted using Blowfish<br/>
            6.3 - File is encrypted using Twofish<br/>
            </remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.CanDecompress">
            <summary>
            Get a value indicating wether this entry can be decompressed by the library.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.LocalHeaderRequiresZip64">
            <summary>
            Gets a value indicating if the entry requires Zip64 extensions 
            to store the full entry values.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.CentralHeaderRequiresZip64">
            <summary>
            Get a value indicating wether the central directory entry requires Zip64 extensions to be stored.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.DosTime">
            <summary>
            Get/Set DosTime
            </summary>		
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.DateTime">
            <summary>
            Gets/Sets the time of last modification of the entry.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.Name">
            <summary>
            Returns the entry name.  The path components in the entry should
            always separated by slashes ('/').  Dos device names like C: should also
            be removed.  See the <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipNameTransform"/> class, or <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipEntry.CleanName(System.String)"/>
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.Size">
            <summary>
            Gets/Sets the size of the uncompressed data.
            </summary>
            <returns>
            The size or -1 if unknown.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.CompressedSize">
            <summary>
            Gets/Sets the size of the compressed data.
            </summary>
            <returns>
            The compressed entry size or -1 if unknown.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.Crc">
            <summary>
            Gets/Sets the crc of the uncompressed data.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Crc is not in the range 0..0xffffffffL
            </exception>
            <returns>
            The crc value or -1 if unknown.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.CompressionMethod">
            <summary>
            Gets/Sets the compression method. Only Deflated and Stored are supported.
            </summary>
            <returns>
            The compression method for this entry
            </returns>
            <see cref="F:ICSharpCode.SharpZipLib.Zip.CompressionMethod.Deflated"/>
            <see cref="F:ICSharpCode.SharpZipLib.Zip.CompressionMethod.Stored"/>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.ExtraData">
            <summary>
            Gets/Sets the extra data.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Extra data is longer than 64KB (0xffff) bytes.
            </exception>
            <returns>
            Extra data or null if not set.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.Comment">
            <summary>
            Gets/Sets the entry comment.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If comment is longer than 0xffff.
            </exception>
            <returns>
            The comment or null if not set.
            </returns>
            <remarks>
            A comment is only available for entries when read via the <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipFile"/> class.
            The <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipInputStream"/> class doesnt have the comment data available.
            </remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.IsDirectory">
            <summary>
            Gets a value indicating if the entry is a directory.
            however.
            </summary>
            <remarks>
            A directory is determined by an entry name with a trailing slash '/'.
            The external file attributes can also indicate an entry is for a directory.
            Currently only dos/windows attributes are tested in this manner.
            The trailing slash convention should always be followed.
            </remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.IsFile">
            <summary>
            Get a value of true if the entry appears to be a file; false otherwise
            </summary>
            <remarks>
            This only takes account of DOS/Windows attributes.  Other operating systems are ignored.
            For linux and others the result may be incorrect.
            </remarks>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.GZip.GZipConstants">
            <summary>
            This class contains constants used for gzip.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.GZipConstants.GZIP_MAGIC">
            <summary>
            Magic number found at start of GZIP header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.GZipConstants.FTEXT">
            <summary>
            Flag bit mask for text
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.GZipConstants.FHCRC">
            <summary>
            Flag bitmask for Crc
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.GZipConstants.FEXTRA">
            <summary>
            Flag bit mask for extra
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.GZipConstants.FNAME">
            <summary>
            flag bitmask for name
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.GZipConstants.FCOMMENT">
            <summary>
            flag bit mask indicating comment is present
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.GZipConstants.#ctor">
            <summary>
            Initialise default instance.
            </summary>
            <remarks>Constructor is private to prevent instances being created.</remarks>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.ScanEventArgs">
            <summary>
            Event arguments for scanning.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.ScanEventArgs.#ctor(System.String)">
            <summary>
            Initialise a new instance of <see cref="T:ICSharpCode.SharpZipLib.Core.ScanEventArgs"/>
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.ScanEventArgs.Name">
            <summary>
            The name for this event.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.ScanEventArgs.ContinueRunning">
            <summary>
            Get set a value indicating if scanning should continue or not.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.DirectoryEventArgs">
            <summary>
            Event arguments for directories.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.DirectoryEventArgs.#ctor(System.String,System.Boolean)">
            <summary>
            Initialize an instance of <see cref="T:ICSharpCode.SharpZipLib.Core.DirectoryEventArgs"></see>.
            </summary>
            <param name="name">The name for this directory.</param>
            <param name="hasMatchingFiles">Flag value indicating if any matching files are contained in this directory.</param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.DirectoryEventArgs.HasMatchingFiles">
            <summary>
            Get a value indicating if the directory contains any matching files or not.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.ScanFailureEventArgs">
            <summary>
            Arguments passed when scan failures are detected.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.ScanFailureEventArgs.#ctor(System.String,System.Exception)">
            <summary>
            Initialise a new instance of <see cref="T:ICSharpCode.SharpZipLib.Core.ScanFailureEventArgs"></see>
            </summary>
            <param name="name">The name to apply.</param>
            <param name="e">The exception to use.</param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.ScanFailureEventArgs.Name">
            <summary>
            The applicable name.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.ScanFailureEventArgs.Exception">
            <summary>
            The applicable exception.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.ScanFailureEventArgs.ContinueRunning">
            <summary>
            Get / set a value indicating wether scanning should continue.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.ProcessDirectoryDelegate">
            <summary>
            Delegate invoked when a directory is processed.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.ProcessFileDelegate">
            <summary>
            Delegate invoked when a file is processed.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.DirectoryFailureDelegate">
            <summary>
            Delegate invoked when a directory failure is detected.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.FileFailureDelegate">
            <summary>
            Delegate invoked when a file failure is detected.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.FileSystemScanner">
            <summary>
            FileSystemScanner provides facilities scanning of files and directories.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.FileSystemScanner.#ctor(System.String)">
            <summary>
            Initialise a new instance of <see cref="T:ICSharpCode.SharpZipLib.Core.FileSystemScanner"></see>
            </summary>
            <param name="filter">The <see cref="T:ICSharpCode.SharpZipLib.Core.PathFilter">file filter</see> to apply when scanning.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.FileSystemScanner.#ctor(System.String,System.String)">
            <summary>
            Initialise a new instance of <see cref="T:ICSharpCode.SharpZipLib.Core.FileSystemScanner"></see>
            </summary>
            <param name="fileFilter">The <see cref="T:ICSharpCode.SharpZipLib.Core.PathFilter">file filter</see> to apply.</param>
            <param name="directoryFilter">The <see cref="T:ICSharpCode.SharpZipLib.Core.PathFilter">directory filter</see> to apply.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.FileSystemScanner.#ctor(ICSharpCode.SharpZipLib.Core.IScanFilter)">
            <summary>
            Initialise a new instance of <see cref="T:ICSharpCode.SharpZipLib.Core.FileSystemScanner"></see>
            </summary>
            <param name="fileFilter">The file <see cref="T:ICSharpCode.SharpZipLib.Core.IScanFilter"></see>filter to apply.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.FileSystemScanner.#ctor(ICSharpCode.SharpZipLib.Core.IScanFilter,ICSharpCode.SharpZipLib.Core.IScanFilter)">
            <summary>
            Initialise a new instance of <see cref="T:ICSharpCode.SharpZipLib.Core.FileSystemScanner"></see>
            </summary>
            <param name="fileFilter">The file <see cref="T:ICSharpCode.SharpZipLib.Core.IScanFilter"></see>filter to apply.</param>
            <param name="directoryFilter">The directory <see cref="T:ICSharpCode.SharpZipLib.Core.IScanFilter"></see>filter to apply.</param>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Core.FileSystemScanner.ProcessDirectory">
            <summary>
            Delegate to invoke when a directory is processed.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Core.FileSystemScanner.ProcessFile">
            <summary>
            Delegate to invoke when a file is processed.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Core.FileSystemScanner.DirectoryFailure">
            <summary>
            Delegate to invoke when a directory failure is detected.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Core.FileSystemScanner.FileFailure">
            <summary>
            Delegate to invoke when a file failure is detected.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.FileSystemScanner.OnDirectoryFailure(System.String,System.Exception)">
            <summary>
            Raise the DirectoryFailure event.
            </summary>
            <param name="directory">The directory name.</param>
            <param name="e">The exception detected.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.FileSystemScanner.OnFileFailure(System.String,System.Exception)">
            <summary>
            Raise the FileFailure event.
            </summary>
            <param name="file">The file name.</param>
            <param name="e">The exception detected.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.FileSystemScanner.OnProcessFile(System.String)">
            <summary>
            Raise the ProcessFile event.
            </summary>
            <param name="file">The file name.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.FileSystemScanner.OnProcessDirectory(System.String,System.Boolean)">
            <summary>
            Raise the ProcessDirectory event.
            </summary>
            <param name="directory">The directory name.</param>
            <param name="hasMatchingFiles">Flag indicating if the directory has matching files.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.FileSystemScanner.Scan(System.String,System.Boolean)">
            <summary>
            Scan a directory.
            </summary>
            <param name="directory">The base directory to scan.</param>
            <param name="recurse">True to recurse subdirectories, false to scan a single directory.</param>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Core.FileSystemScanner.fileFilter_">
            <summary>
            The file filter currently in use.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Core.FileSystemScanner.directoryFilter_">
            <summary>
            The directory filter currently in use.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Core.FileSystemScanner.alive_">
            <summary>
            Flag indicating if scanning should continue running.
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.PageSubArea.IPageSubArea.CreateHtml">
            <summary>
            创建HTML，后台预览
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.PageSubArea.IPageSubArea.CreateHtml(System.String@)">
            <summary>
            创建HTML，后台预览
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.PageSubArea.PageSubAreaFactory.Create(System.String,System.String,System.String)">
            <summary>
            创建一个继承了IPageSubArea的实例
            该方法主要由后台调用，前台程序直接初始化
            </summary>
            <param name="className">类名</param>
            <returns></returns>
        </member>
        <member name="T:Mtime.Community.Utility.URLRewriter.Config.MtimeSearch08RewriterConfig">
            <summary>
            定义了URL重写的配置类文件结构以及获取配置
            </summary>
        </member>
        <member name="T:Rss.DBBool">
            <summary>Represents Null, False, and True</summary>
            <remarks>Source: Microsoft c# example</remarks>
        </member>
        <member name="F:Rss.DBBool.Null">
            <summary>A DBBool containing 'Null'.</summary>
            <remarks>One of three possible DBBool values.</remarks>
        </member>
        <member name="F:Rss.DBBool.False">
            <summary>A DBBool containing 'False'.</summary>
            <remarks>One of three possible DBBool values.</remarks>
        </member>
        <member name="F:Rss.DBBool.True">
            <summary>A DBBool containing 'True'.</summary>
            <remarks>One of three possible DBBool values.</remarks>
        </member>
        <member name="F:Rss.DBBool.value">
            <summary>Private field that stores ?, 0, 1 for False, Null, True.</summary>
        </member>
        <member name="M:Rss.DBBool.#ctor(System.Int32)">
            <summary>Private instance constructor. The value parameter must be ?, 0, or 1.</summary>
        </member>
        <member name="M:Rss.DBBool.op_Implicit(System.Boolean)~Rss.DBBool">
            <summary>Implicit conversion from bool to DBBool. Maps true to DBBool.True and false to DBBool.False.</summary>
            <param name="x">a DBBool</param>
        </member>
        <member name="M:Rss.DBBool.op_Explicit(Rss.DBBool)~System.Boolean">
            <summary>Explicit conversion from DBBool to bool.</summary>
            <exception cref="T:System.InvalidOperationException">The given DBBool is Null</exception>
            <param name="x">a DBBool</param>
            <returns>true or false</returns>
        </member>
        <member name="M:Rss.DBBool.op_Equality(Rss.DBBool,Rss.DBBool)">
            <summary>Equality operator.</summary>
            <param name="x">a DBBool</param>
            <param name="y">a DBBool</param>
            <returns>Returns Null if either operand is Null, otherwise returns True or False.</returns>
        </member>
        <member name="M:Rss.DBBool.op_Inequality(Rss.DBBool,Rss.DBBool)">
            <summary>Inequality operator.</summary>
            <param name="x">a DBBool</param>
            <param name="y">a DBBool</param>
            <returns>Returns Null if either operand is Null, otherwise returns True or False.</returns>
        </member>
        <member name="M:Rss.DBBool.op_LogicalNot(Rss.DBBool)">
            <summary>Logical negation operator.</summary>
            <param name="x">a DBBool</param>
            <returns>Returns True if the operand is False, Null if the operand is Null, or False if the operand is True.</returns>
        </member>
        <member name="M:Rss.DBBool.op_BitwiseAnd(Rss.DBBool,Rss.DBBool)">
            <summary>Logical AND operator.</summary>
            <param name="x">a DBBool</param>
            <param name="y">a DBBool</param>
            <returns>Returns False if either operand is False, otherwise Null if either operand is Null, otherwise True.</returns>
        </member>
        <member name="M:Rss.DBBool.op_BitwiseOr(Rss.DBBool,Rss.DBBool)">
            <summary>Logical OR operator.</summary>
            <param name="x">a DBBool</param>
            <param name="y">a DBBool</param>
            <returns>Returns True if either operand is True, otherwise Null if either operand is Null, otherwise False.</returns>
        </member>
        <member name="M:Rss.DBBool.op_True(Rss.DBBool)">
            <summary>Definitely true operator.</summary>
            <param name="x">a DBBool</param>
            <returns>Returns true if the operand is True, false otherwise.</returns>
        </member>
        <member name="M:Rss.DBBool.op_False(Rss.DBBool)">
            <summary>Definitely false operator.</summary>
            <param name="x">a DBBool</param>
            <returns>Returns true if the operand is False, false otherwise.</returns>
        </member>
        <member name="M:Rss.DBBool.Equals(System.Object)">
            <summary>Determines whether two DBBool instances are equal.</summary>
            <param name="o">The object to check.</param>
            <returns>True if the two DBBools are equal.</returns>
        </member>
        <member name="M:Rss.DBBool.GetHashCode">
            <summary>Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.</summary>
            <returns>A hash code for the current DBBool.</returns>
        </member>
        <member name="M:Rss.DBBool.ToString">
            <summary>Returns a string representation of the current Object.</summary>
            <exception cref="T:System.InvalidOperationException">Object has not been initialized.</exception>
            <returns>A string containing DBBool.False, DBBool.Null, or DBBool.True</returns>
        </member>
        <member name="P:Rss.DBBool.IsNull">
            <summary>Properties to examine the value of a DBBool.</summary>
            <remarks>Return true if this DBBool has the given value, false otherwise.</remarks>
        </member>
        <member name="P:Rss.DBBool.IsFalse">
            <summary>Properties to examine the value of a DBBool.</summary>
            <remarks>Return true if this DBBool has the given value, false otherwise.</remarks>
        </member>
        <member name="P:Rss.DBBool.IsTrue">
            <summary>Properties to examine the value of a DBBool.</summary>
            <remarks>Return true if this DBBool has the given value, false otherwise.</remarks>
        </member>
        <member name="T:Rss.RssCreativeCommons">
            <summary>A RSS module that adds elements at the channel or item level that specifies which Creative Commons license applies.</summary>
        </member>
        <member name="M:Rss.RssCreativeCommons.#ctor(System.Uri,System.Boolean)">
            <summary>Initialize a new instance of the </summary>
            <param name="license">
            	If present as a sub-element of channel, indicates that the content of the RSS file is available under a license, indicated by a URL, which is the value of the license element. A list of some licenses that may be used in this context is on the Creative Commons website on this page, however the license element may point to licenses not authored by Creative Commons.
            	You may also use the license element as a sub-element of item. When used this way it applies only to the content of that item. If an item has a license, and the channel does too, the license on the item applies, i.e. the inner license overrides the outer one.
            	Multiple license elements are allowed, in either context, indicating that the content is available under multiple licenses.
            	<remarks>"http://www.creativecommons.org/licenses/"</remarks>
            </param>
            <param name="isChannelSubElement">If present as a sub-element of channel then true, otherwise false</param>
        </member>
        <member name="T:Rss.RssEnclosure">
            <summary>A reference to an attachment to the item</summary>
        </member>
        <member name="M:Rss.RssEnclosure.#ctor">
            <summary>Initialize a new instance of the RssEnclosure class.</summary>
        </member>
        <member name="P:Rss.RssEnclosure.Url">
            <summary>Where the enclosure is located</summary>
        </member>
        <member name="P:Rss.RssEnclosure.Length">
            <summary>The size of the enclosure, in bytes</summary>
            <remarks>-1 represents a null.</remarks>
        </member>
        <member name="P:Rss.RssEnclosure.Type">
            <summary>A standard Multipurpose Internet Mail Extensions (MIME) type</summary>
        </member>
        <member name="T:ProtoBuf.DataFormat">
            <summary>
            Sub-format to use when serializing/deserializing data
            </summary>
        </member>
        <member name="F:ProtoBuf.DataFormat.Default">
            <summary>
            Uses the default encoding for the data-type.
            </summary>
        </member>
        <member name="F:ProtoBuf.DataFormat.ZigZag">
            <summary>
            When applied to signed integer-based data (including Decimal), this
            indicates that zigzag variant encoding will be used. This means that values
            with small magnitude (regardless of sign) take a small amount
            of space to encode.
            </summary>
        </member>
        <member name="F:ProtoBuf.DataFormat.TwosComplement">
            <summary>
            When applied to signed integer-based data (including Decimal), this
            indicates that two's-complement variant encoding will be used.
            This means that any -ve number will take 10 bytes (even for 32-bit),
            so should only be used for compatibility.
            </summary>
        </member>
        <member name="F:ProtoBuf.DataFormat.FixedSize">
            <summary>
            When applied to signed integer-based data (including Decimal), this
            indicates that a fixed amount of space will be used.
            </summary>
        </member>
        <member name="F:ProtoBuf.DataFormat.Group">
            <summary>
            When applied to a sub-message, indicates that the value should be treated
            as group-delimited.
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.OAuth.Weibo.OAuthSina.GetAuthorizationUrl">
            <summary>
            获取认证URL
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.OAuth.Weibo.OAuthSina.GetAccountInfo">
            <summary>
            获取用户详情
            </summary>
            <remarks>内容参考地址： http://open.weibo.com/wiki/Account/verify_credentials </remarks>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.OAuth.Weibo.OAuthSina.GetTokenV2ForTokenV1">
            <summary>
            根据V1Token换取V2Token
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mtime.Community.Utility.OAuth.RequestMethod">
            <summary>
            请求方式
            </summary>
        </member>
        <member name="T:Mtime.Community.Utility.Client.EndPointElement">
            <summary>
            Represents a configuration element that contains a Memcached node address. This class cannot be inherited. 
            </summary>
        </member>
        <member name="T:Mtime.Community.Utility.MwSettings">
            <summary>
            Mtime后台相关配置 对应文件  "Config/MwSettings.config"
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.MwSettings.FrozenThreshold">
            <summary>
            冻结阀值
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.MwSettings.FrozenMinutes">
            <summary>
            冻结时间
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.MwSettings.AdsFtpServerIP">
            <summary>
            Ftp 服务器	IP
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.MwSettings.AdsFtpServerPort">
            <summary>
            Ftp 服务器	端口
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.MwSettings.AdsFtpServerUserID">
            <summary>
            Ftp 服务器	编辑用帐号
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.MwSettings.AdsFtpServerPassword">
            <summary>
            Ftp 服务器	密码
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.MwSettings.AdsJsFilePathOnFTP">
            <summary>
            JavaScript 文件在 Ftp 服务器上的存放目录
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.AutoConfigAttribute.#ctor(System.String,System.Object)">
            <summary>
            配置中的key值与字段名不同
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
        </member>
        <member name="M:Mtime.Community.Utility.AutoConfigAttribute.#ctor(System.Object)">
            <summary>
            配置中的key值与字段名相同
            </summary>
            <param name="defaultValue"></param>
        </member>
        <member name="P:Mtime.Community.Utility.AutoConfigAttribute.Key">
            <summary>
            在配置文件中的Key值
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.AutoConfigAttribute.DefaultValue">
            <summary>
            字段默认值
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonSerializationException">
            <summary>
            The exception thrown when an error occurs during Json serialization or deserialization.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException"/> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException"/> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="F:Mtime.Community.Utility.Json.FastJSON.JSONParamters.UseOptimizedDatasetSchema">
            <summary>
            Use the optimized fast Dataset Schema format (dfault = True)
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.Json.FastJSON.JSONParamters.UseFastGuid">
            <summary>
            Use the fast GUID format (default = True)
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.Json.FastJSON.JSONParamters.SerializeNullValues">
            <summary>
            Serialize null values to the output (default = True)
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.Json.FastJSON.JSONParamters.UseUTCDateTime">
            <summary>
            Use the UTC date format (default = True)
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.Json.FastJSON.JSONParamters.ShowReadOnlyProperties">
            <summary>
            Show the readonly properties of types in the output (default = False)
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.Json.FastJSON.JSONParamters.UsingGlobalTypes">
            <summary>
            Use the $types extension to optimise the output json (default = True)
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.Json.FastJSON.JSONParamters.IgnoreCaseOnDeserialize">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.Json.FastJSON.JSONParamters.EnableAnonymousTypes">
            <summary>
            Anonymous types have read only properties 
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.Json.FastJSON.JSONParamters.UseExtensions">
            <summary>
            Enable fastJSON extensions $types, $type, $map (default = True)
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.Json.FastJSON.FastJson.Parameters">
            <summary>
            You can set these paramters globally for all calls
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.IDHelper.NewPaymentID">
            <summary>
            获取支付订单号，目前暂定23位数字
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mtime.Community.Utility.Helper.RemoteClientHelper">
            <summary>
            根据传入的type类型，从Hashtable中获取WellKnownClientTypeEntry，
            	然后通过调用Activator.GetObject()方法，得到需要的Remote Object。
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.RemoteClientHelper.GetObject(System.Type)">
            <summary>
            获取对象。
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.RemoteClientHelper.InitTypeCache">
            <summary>
            初始化Hashtable，并根据Remoting Configuration配置文件填入Remote Object Type和WellKnownClientTypeEntry。
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.CSSHelper.GetSafeColorString(System.String)">
            <summary>
            获取安全的颜色字符串:#ffffff
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.CSSHelper.GetSafeBackgroundImage(System.String)">
            <summary>
            获取安全的背景图，形如: url(...)
            </summary>
            <param name="backgroundImage"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.CSSHelper.GetSafeBackgroundPositionAlignment(System.String)">
            <summary>
            获取安全的背景平铺方向
            </summary>
            <param name="backgroundRepeat"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.CSSHelper.GetSafeLengthUnit(System.String)">
            <summary>
            获取安全的Length Unit，用于宽度、高度等定位和计算值
            </summary>
            <param name="lengthUnit"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Service.Files.IFileService.SaveFileByID(System.String,System.String,System.String,System.String)">
            <summary>
            保存文件到服务器
            </summary>
            <param name="fileServer">服务器名称，FileService.config中配置</param>
            <param name="id">文件ID</param>
            <param name="extension">文件扩展名</param>
            <param name="srcPath">源文件路径</param>
        </member>
        <member name="M:Mtime.Service.Files.IFileService.SaveFileByID(System.String,System.String,System.String,System.Byte[])">
            <summary>
            保存文件到服务器
            </summary>
            <param name="fileServer">服务器名称，FileService.config中配置</param>
            <param name="id">文件ID</param>
            <param name="extension">文件扩展名</param>
            <param name="content">源文件内容</param>
        </member>
        <member name="M:Mtime.Service.Files.IFileService.DeleteFileByID(System.String,System.String,System.String)">
            <summary>
            删除所有相关文件
            </summary>
            <param name="fileServer">服务器名称，FileService.config中配置</param>
            <param name="id">文件ID</param>
            <param name="extension">文件扩展名</param>
        </member>
        <member name="M:Mtime.Service.Files.IFileService.RenameFileByID(System.String,System.String,System.String,System.String)">
            <summary>
            重命名并移动所有相关文件
            </summary>
            <param name="fileServer">服务器名称，FileService.config中配置</param>
            <param name="id">文件ID</param>
            <param name="extension">文件扩展名</param>
            <param name="newID">新文件ID</param>
        </member>
        <member name="M:Mtime.Service.Files.IFileService.GetUrlByID(System.String,System.String,System.String)">
            <summary>
            获取文件发布路径
            </summary>
            <param name="fileServer">服务器名称，FileService.config中配置</param>
            <param name="id">文件ID</param>
            <param name="extension">文件扩展名</param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Service.Files.IFileService.GetImageUrlByID(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            获取图像文件缩略图发布路径
            </summary>
            <param name="fileServer">服务器名称，FileService.config中配置</param>
            <param name="id">文件ID</param>
            <param name="extension">文件扩展名</param>
            <param name="width">宽度</param>
            <param name="height">高度</param>
            <returns></returns>
        </member>
        <member name="M:Mtime.EPay.Utility.Encrypt.RSA(System.String,System.String,System.String)">
            <summary>
            返回0代表成功
            </summary>
            <param name="orignalString"></param>
            <param name="signString"></param>
            <returns></returns>
        </member>
        <member name="F:Mtime.EPay.AliPaySignType.MD5">
            <summary>
            MD5方式
            </summary>
        </member>
        <member name="F:Mtime.EPay.AliPaySignType.RSA">
            <summary>
            RSA方式，不实用，故未实现
            </summary>
        </member>
        <member name="F:Mtime.EPay.AliPayService.TRADE_CREATE_BY_BUYER">
            <summary>
            实物交易(包含物流方式以及费用)
            </summary>
        </member>
        <member name="F:Mtime.EPay.AliPayService.CREATE_DIGITAL_GOODS_TRADE_P">
            <summary>
            虚拟物品交易(不包含物流方式以及费用，使用total_fee)
            </summary>
        </member>
        <member name="F:Mtime.EPay.AliPayService.CREATE_DONATE_TRADE_P">
            <summary>
            捐赠(不包含物流方式以及费用，使用total_fee)
            </summary>
        </member>
        <member name="F:Mtime.EPay.AliPayService.CREATE_DIRECT_PAY_BY_USER">
            <summary>
            只支持即时到帐付款的实物交易
            </summary>
        </member>
        <member name="F:Mtime.EPay.AliPayService.NOTIFY_VERIFY">
            <summary>
            通知服务
            </summary>
        </member>
        <member name="F:Mtime.EPay.AliPayPaymentType.Commodity">
            <summary>
            商品购买
            </summary>
        </member>
        <member name="F:Mtime.EPay.AliPayPaymentType.Service">
            <summary>
            服务
            </summary>
        </member>
        <member name="F:Mtime.EPay.AliPayPaymentType.Auction">
            <summary>
            拍卖
            </summary>
        </member>
        <member name="F:Mtime.EPay.AliPayPaymentType.Donate">
            <summary>
            捐赠
            </summary>
        </member>
        <member name="F:Mtime.EPay.AliPayPaymentType.Postage">
            <summary>
            邮资补偿
            </summary>
        </member>
        <member name="F:Mtime.EPay.AliPayPaymentType.Prize">
            <summary>
            奖金
            </summary>
        </member>
        <member name="F:Mtime.EPay.AliPayLogisticsType.VIRTUAL">
            <summary>
            虚拟物品
            </summary>
        </member>
        <member name="F:Mtime.EPay.AliPayLogisticsType.POST">
            <summary>
            平邮
            </summary>
        </member>
        <member name="F:Mtime.EPay.AliPayLogisticsType.EMS">
            <summary>
            EMS
            </summary>
        </member>
        <member name="F:Mtime.EPay.AliPayLogisticsType.EXPRESS">
            <summary>
            其他快递公司 
            </summary>
        </member>
        <member name="M:Mtime.EPay.AliPayGateway.GetUrlParam(System.Collections.Generic.SortedList{System.String,System.String},System.Boolean)">
            <summary>
            获取Url的参数
            </summary>
            <param name="list"></param>
            <param name="encodeValue">参数是否经过编码,被签名的参数不用编码,Post的参数要编码</param>
            <returns></returns>
        </member>
        <member name="P:Mtime.EPay.AliPayGateway.Encoding">
            <summary>
            合作伙伴系统与支付宝系统之间交互信息时使用的编码字符集,默认为UTF-8
            </summary>
        </member>
        <member name="P:Mtime.EPay.AliPayGateway.Service">
            <summary>
            服务名称，默认为: create_direct_pay_by_user
            </summary>
        </member>
        <member name="P:Mtime.EPay.AliPayGateway.Partner">
            <summary>
            合作伙伴在支付宝的用户ID，16位
            </summary>
        </member>
        <member name="P:Mtime.EPay.AliPayGateway.NotifyUrl">
            <summary>
            通知返回URL,仅适用于异步返回处理结果的接口。有些服务是无法立即返回处理结果的，那么需要通过这个URL将处理结果异步返回给合作伙伴。
            </summary>
        </member>
        <member name="P:Mtime.EPay.AliPayGateway.ReturnUrl">
            <summary>
            结果返回URL，仅适用于立即返回处理结果的接口。支付宝处理完请求后，立即将处理结果返回给这个URL
            </summary>
        </member>
        <member name="P:Mtime.EPay.AliPayGateway.Agent">
            <summary>
            如果一些交易网站的交易，有一定的“代理”所属关系，代理商可以在交易中传递该参数，来表明代理的身份。这里传送的值，请使用代理商所属支付宝账户的PartnerID
            </summary>
        </member>
        <member name="P:Mtime.EPay.AliPayGateway.SecurityCode">
            <summary>
            交易安全校验码
            </summary>
        </member>
        <member name="P:Mtime.EPay.AliPayGateway.SignType">
            <summary>
            加密参数的算法如Md5（只实现了Md5）
            </summary>
        </member>
        <member name="P:Mtime.EPay.AliPayGateway.Subject">
            <summary>
            商品名称
            </summary>
        </member>
        <member name="P:Mtime.EPay.AliPayGateway.Body">
            <summary>
            商品描述
            </summary>
        </member>
        <member name="P:Mtime.EPay.AliPayGateway.OutTradeNo">
            <summary>
            外部交易号,要保证唯一，推荐GUID
            </summary>
        </member>
        <member name="P:Mtime.EPay.AliPayGateway.Price">
            <summary>
            商品单价，保留两位小数，必须为0.01在100000000.00之间,如果小数超过两位会四舍五入
            </summary>
        </member>
        <member name="P:Mtime.EPay.AliPayGateway.Quantity">
            <summary>
            购买数量，不超过六位的正整数
            </summary>
        </member>
        <member name="P:Mtime.EPay.AliPayGateway.TotalFee">
            <summary>
            总金额
            </summary>
        </member>
        <member name="P:Mtime.EPay.AliPayGateway.PaymentType">
            <summary>
            支付类型
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.CustomSession.ConfigSessionId">
            <summary>
            初始化
            </summary>
        </member>
        <member name="P:Mtime.Community.Model.UploadedFileInfo.Src">
            <summary>
            原图HTTP路径
            </summary>
        </member>
        <member name="M:Mtime.MongoDB.Bson.MongoRegex.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mtime.MongoDB.Bson.MongoRegex"/> class.
            </summary>
        </member>
        <member name="M:Mtime.MongoDB.Bson.MongoRegex.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mtime.MongoDB.Bson.MongoRegex"/> class.
            </summary>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:Mtime.MongoDB.Bson.MongoRegex.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mtime.MongoDB.Bson.MongoRegex"/> class.
            </summary>
            <param name="expression">The expression.</param>
            <param name="options">The options.</param>
        </member>
        <member name="M:Mtime.MongoDB.Bson.MongoRegex.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Mtime.MongoDB.Bson.MongoRegex.Expression">
            <summary>
            A valid regex string including the enclosing / characters.
            </summary>
        </member>
        <member name="P:Mtime.MongoDB.Bson.MongoRegex.Options">
            <summary>
            A string that may contain only the characters 'g', 'i', and 'm'. 
            Because the JS and TenGen representations support a limited range of options, 
            any nonconforming options will be dropped when converting to this representation
            </summary>        
        </member>
        <member name="T:Mtime.Community.Utility.Client.HashCodeCombiner">
            <summary>
            Combines multiple hash codes into one.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ZipInputStream">
             <summary>
             This is an InflaterInputStream that reads the files baseInputStream an zip archive
             one after another.  It has a special method to get the zip entry of
             the next file.  The zip entry contains information about the file name
             size, compressed size, Crc, etc.
             It includes support for Stored and Deflated entries.
             <br/>
             <br/>Author of the original java version : Jochen Hoenicke
             </summary>
             
             <example> This sample shows how to read a zip file
             <code lang="C#">
             using System;
             using System.Text;
             using System.IO;
             
             using ICSharpCode.SharpZipLib.Zip;
             
             class MainClass
             {
             	public static void Main(string[] args)
             	{
             		using ( ZipInputStream s = new ZipInputStream(File.OpenRead(args[0]))) {
            
             			ZipEntry theEntry;
             			while ((theEntry = s.GetNextEntry()) != null) {
             				int size = 2048;
             				byte[] data = new byte[2048];
            
             				Console.Write("Show contents (y/n) ?");
             				if (Console.ReadLine() == "y") {
             					while (true) {
             						size = s.Read(data, 0, data.Length);
             						if (size > 0) {
             							Console.Write(new ASCIIEncoding().GetString(data, 0, size));
             						} else {
             							break;
             						}
             					}
             				}
             			}
             		}
             	}
             }
             </code>
             </example>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipInputStream.internalReader">
            <summary>
            The current reader this instance.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipInputStream.#ctor(System.IO.Stream)">
            <summary>
            Creates a new Zip input stream, for reading a zip archive.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipInputStream.GetNextEntry">
            <summary>
            Advances to the next entry in the archive
            </summary>
            <returns>
            The next <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry">entry</see> in the archive or null if there are no more entries.
            </returns>
            <remarks>
            If the previous entry is still open <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipInputStream.CloseEntry">CloseEntry</see> is called.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Input stream is closed
            </exception>
            <exception cref="T:ICSharpCode.SharpZipLib.Zip.ZipException">
            Password is not set, password is invalid, compression method is invalid,
            version required to extract is not supported
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipInputStream.ReadDataDescriptor">
            <summary>
            Read data descriptor at the end of compressed data. 
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipInputStream.CompleteCloseEntry(System.Boolean)">
            <summary>
            Complete cleanup as the final part of closing.
            </summary>
            <param name="testCrc">True if the crc value should be tested</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipInputStream.CloseEntry">
            <summary>
            Closes the current zip entry and moves to the next one.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The stream is closed
            </exception>
            <exception cref="T:ICSharpCode.SharpZipLib.Zip.ZipException">
            The Zip stream ends early
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipInputStream.ReadByte">
            <summary>
            Reads a byte from the current zip entry.
            </summary>
            <returns>
            The byte or -1 if end of stream is reached.
            </returns>
            <exception name="System.IO.IOException">
            An i/o error occured.
            </exception>
            <exception name="ICSharpCode.SharpZipLib.ZipException">
            The deflated stream is corrupted.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipInputStream.ReadingNotAvailable(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Handle attempts to read by throwing an <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <param name="destination">The destination array to store data in.</param>
            <param name="offset">The offset at which data read should be stored.</param>
            <param name="count">The maximum number of bytes to read.</param>
            <returns>Returns the number of bytes actually read.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipInputStream.ReadingNotSupported(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Handle attempts to read from this entry by throwing an exception
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipInputStream.InitialRead(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Perform the initial read on an entry which may include 
            reading encryption headers and setting up inflation.
            </summary>
            <param name="destination">The destination to fill with data read.</param>
            <param name="offset">The offset to start reading at.</param>
            <param name="count">The maximum number of bytes to read.</param>
            <returns>The actual number of bytes read.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read a block of bytes from the stream.
            </summary>
            <param name="buffer">The destination for the bytes.</param>
            <param name="offset">The index to start storing data.</param>
            <param name="count">The number of bytes to attempt to read.</param>
            <returns>Returns the number of bytes read.</returns>
            <remarks>Zero bytes read means end of stream.</remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipInputStream.BodyRead(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a block of bytes from the current zip entry.
            </summary>
            <returns>
            The number of bytes read (this may be less than the length requested, even before the end of stream), or 0 on end of stream.
            </returns>
            <exception name="IOException">
            An i/o error occured.
            </exception>
            <exception cref="T:ICSharpCode.SharpZipLib.Zip.ZipException">
            The deflated stream is corrupted.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The stream is not open.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipInputStream.Close">
            <summary>
            Closes the zip input stream
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipInputStream.Password">
            <summary>
            Optional password used for encryption when non-null
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipInputStream.CanDecompressEntry">
            <summary>
            Gets a value indicating if there is a current entry  and it can be decompressed
            </summary>
            <remarks>
            The entry can only be decompressed if the library supports the zip features required to extract it.
            See the <see cref="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.Version">ZipEntry Version</see> property for more details.
            </remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipInputStream.Available">
            <summary>
            Returns 1 if there is an entry available
            Otherwise returns 0.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipInputStream.Length">
            <summary>
            Returns the current size that can be read from the current entry if available
            </summary>
            <exception cref="T:ICSharpCode.SharpZipLib.Zip.ZipException">Thrown if the entry size is not known.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if no entry is currently available.</exception>
        </member>
        <member name="M:Mtime.Community.Utility.Web.ProxyHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Method calls when client request the server
            </summary>
            <param name="context">HTTP context for client</param>
        </member>
        <member name="M:Mtime.Community.Utility.Web.ProxyServer.#ctor(System.Web.HttpContext,System.String)">
            <summary>
            Initialize the communication with the Remote Server
            </summary>
            <param name="context">Context </param>
        </member>
        <member name="M:Mtime.Community.Utility.Web.ProxyServer.GetRequest">
            <summary>
            Create a request the remote server
            </summary>
            <returns>Request to send to the server </returns>
        </member>
        <member name="M:Mtime.Community.Utility.Web.ProxyServer.GetResponse(System.Net.HttpWebRequest)">
            <summary>
            Send the request to the remote server and return the response
            </summary>
            <param name="request">Request to send to the server </param>
            <returns>Response received from the remote server
                      or null if page not found </returns>
        </member>
        <member name="M:Mtime.Community.Utility.Web.ProxyServer.GetResponseStreamBytes(System.Net.HttpWebResponse)">
            <summary>
            Return the response in bytes array format
            </summary>
            <param name="response">Response received
                        from the remote server </param>
            <returns>Response in bytes </returns>
        </member>
        <member name="M:Mtime.Community.Utility.Web.ProxyServer.SetContextCookies(System.Net.HttpWebResponse)">
            <summary>
            Set cookies received from remote server to response of navigator
            </summary>
            <param name="response">Response received
                            from the remote server</param>
        </member>
        <member name="P:Mtime.Community.Utility.Web.ProxyServer.RemoteUrl">
            <summary>
            Return address to communicate to the remote server
            </summary>
        </member>
        <member name="T:Mtime.Community.Utility.URLRewriter.Config.M08RewriterConfig">
            <summary>
            定义了URL重写的配置类文件结构以及获取配置
            </summary>
        </member>
        <member name="T:Mtime.Community.Utility.Server.ServerConfig">
            <summary>
            Represents a configuration element that contains a Memcached node address. This class cannot be inherited. 
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.Server.ServerConfig.ClearIdleSession">
            <summary>
            Gets a value indicating whether clear idle session.
            </summary>
            <value><c>true</c> if clear idle session; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Mtime.Community.Utility.Server.ServerConfig.ClearIdleSessionInterval">
            <summary>
            Gets the clear idle session interval, in seconds.
            </summary>
            <value>The clear idle session interval.</value>
        </member>
        <member name="P:Mtime.Community.Utility.Server.ServerConfig.IdleSessionTimeOut">
            <summary>
            Gets the idle session timeout time length, in minutes.
            </summary>
            <value>The idle session time out.</value>
        </member>
        <member name="T:Rss.RssCategory">
            <summary>Provide information regarding the location of the subject matter of the channel in a taxonomy</summary>
        </member>
        <member name="M:Rss.RssCategory.#ctor">
            <summary>Initialize a new instance of the RssCategory class</summary>
        </member>
        <member name="P:Rss.RssCategory.Name">
            <summary>Actual categorization given for this item, within the chosen taxonomy</summary>
        </member>
        <member name="P:Rss.RssCategory.Domain">
            <summary>URL of external taxonomy</summary>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.DbHelper.LogSqlException(System.Data.SqlClient.SqlException)">
            <summary>
            记录SQL异常
            </summary>
            <param name="exception"></param>
            <param name="orderId"></param>
            <param name="method"></param>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.DbHelper.LogSqlException(System.Data.SqlClient.SqlException,System.String)">
            <summary>
            记录SQL异常
            </summary>
            <param name="exception"></param>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.DbHelper.IsSqlNetworkException(System.Data.SqlClient.SqlException)">
            <summary>
            是否为SQL网络异常
            </summary>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="T:Mtime.Community.Utility.ECMAScriptPacker">
            <summary>
            Packs a javascript file into a smaller area, removing unnecessary characters from the output.
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.ECMAScriptPacker.#ctor(Mtime.Community.Utility.ECMAScriptPacker.PackerEncoding,System.Boolean,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="encoding">The encoding level for this instance</param>
            <param name="fastDecode">Adds a subroutine to the output to speed up decoding</param>
            <param name="specialChars">Replaces special characters</param>
        </member>
        <member name="M:Mtime.Community.Utility.ECMAScriptPacker.Pack(System.String)">
            <summary>
            Packs the script
            </summary>
            <param name="script">the script to pack</param>
            <returns>the packed script</returns>
        </member>
        <member name="P:Mtime.Community.Utility.ECMAScriptPacker.Encoding">
            <summary>
            The encoding level for this instance
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.ECMAScriptPacker.FastDecode">
            <summary>
            Adds a subroutine to the output to speed up decoding
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.ECMAScriptPacker.SpecialChars">
            <summary>
            Replaces special characters
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.ECMAScriptPacker.Enabled">
            <summary>
            Packer enabled
            </summary>
        </member>
        <member name="T:Mtime.Community.Utility.ECMAScriptPacker.PackerEncoding">
            <summary>
            The encoding level to use. See http://dean.edwards.name/packer/usage/ for more info.
            </summary>
        </member>
        <member name="T:ProtoBuf.WireType">
            <summary>
            Indicates the encoding used to represent an individual value in a protobuf stream
            </summary>
        </member>
        <member name="F:ProtoBuf.WireType.None">
            <summary>
            Represents an error condition
            </summary>
        </member>
        <member name="F:ProtoBuf.WireType.Variant">
            <summary>
            Base-128 variant-length encoding
            </summary>
        </member>
        <member name="F:ProtoBuf.WireType.Fixed64">
            <summary>
            Fixed-length 8-byte encoding
            </summary>
        </member>
        <member name="F:ProtoBuf.WireType.String">
            <summary>
            Length-variant-prefixed encoding
            </summary>
        </member>
        <member name="F:ProtoBuf.WireType.StartGroup">
            <summary>
            Indicates the start of a group
            </summary>
        </member>
        <member name="F:ProtoBuf.WireType.EndGroup">
            <summary>
            Indicates the end of a group
            </summary>
        </member>
        <member name="F:ProtoBuf.WireType.Fixed32">
            <summary>
            Fixed-length 4-byte encoding
            </summary>10
        </member>
        <member name="F:ProtoBuf.WireType.SignedVariant">
            <summary>
            This is not a formal wire-type in the "protocol buffers" spec, but
            denotes a variant integer that should be interpreted using
            zig-zag semantics (so -ve numbers aren't a significant overhead)
            </summary>
        </member>
        <member name="T:Mtime.Community.Utility.zxing.qrcode.decoder.Version">
            <summary> See ISO 18004:2006 Annex D
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="F:Mtime.Community.Utility.zxing.qrcode.decoder.Version.VERSION_DECODE_INFO">
            <summary> See ISO 18004:2006 Annex D.
            Element i represents the raw version bits that specify version i + 7
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.zxing.qrcode.decoder.Version.getProvisionalVersionForDimension(System.Int32)">
            <summary> <p>Deduces version information purely from QR Code dimensions.</p>
            
            </summary>
            <param name="dimension">dimension in modules
            </param>
            <returns> {@link Version} for a QR Code of that dimension
            </returns>
            <throws>  ReaderException if dimension is not 1 mod 4 </throws>
        </member>
        <member name="M:Mtime.Community.Utility.zxing.qrcode.decoder.Version.buildFunctionPattern">
            <summary> See ISO 18004:2006 Annex E</summary>
        </member>
        <member name="M:Mtime.Community.Utility.zxing.qrcode.decoder.Version.buildVersions">
            <summary> See ISO 18004:2006 6.5.1 Table 9</summary>
        </member>
        <member name="T:Mtime.Community.Utility.zxing.qrcode.decoder.Version.ECBlocks">
            <summary> <p>Encapsulates a set of error-correction blocks in one symbol version. Most versions will
            use blocks of differing sizes within one version, so, this encapsulates the parameters for
            each set of blocks. It also holds the number of error-correction codewords per block since it
            will be the same across all blocks within one version.</p>
            </summary>
        </member>
        <member name="T:Mtime.Community.Utility.zxing.qrcode.decoder.Version.ECB">
            <summary> <p>Encapsualtes the parameters for one error-correction block in one symbol version.
            This includes the number of data codewords, and the number of times a block with these
            parameters is used consecutively in the QR code version's format.</p>
            </summary>
        </member>
        <member name="T:Mtime.Community.Utility.zxing.qrcode.encoder.QRCodeInternal">
            <author>  satorux@google.com (Satoru Takabayashi) - creator
            </author>
            <author>  dswitkin@google.com (Daniel Switkin) - ported from C++
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Mtime.Community.Utility.zxing.common.ByteMatrix" -->
        <member name="T:Mtime.Community.Utility.OAuth.GrantType">
            <summary>
            授信类型
            </summary>
        </member>
        <member name="T:Mtime.Community.Utility.OAuth.AccessToken">
            <summary>
            授权令牌
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.OAuth.AccessToken.Token">
            <summary>
            用户Token
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.OAuth.AccessToken.Expires">
            <summary>
            过期时间
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.OAuth.AccessToken.ID">
            <summary>
            用户ID(并不是所有服务商均提供此值)
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.OAuth.AccessToken.Origin">
            <summary>
            服务端返回的原数据
            </summary>
        </member>
        <member name="T:Mtime.Community.Utility.Net.PooledAsyncSocket">
            <summary>
            Implements the connection logic for the socket client.
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.Net.PooledAsyncSocket.RECEIVE_OPERATION">
            <summary>
            Constants for socket operations.
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.Net.PooledAsyncSocket.SEND_OPERATION">
            <summary>
            Constants for socket operations.
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.Net.PooledAsyncSocket.connectEvent">
            <summary>
            Signals a connection.
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.Net.PooledAsyncSocket.sendEvent">
            <summary>
            Signals the send/receive operation.
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.Net.PooledAsyncSocket.Init(Mtime.Community.Utility.Net.SocketPool,Mtime.Community.Utility.Net.IAsyncSocketProtocol,System.Net.IPEndPoint,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[])">
            <summary>
            Create an uninitialized client instance.  
            To start the send/receive processing
            call the Connect method followed by SendReceive method.
            </summary>
            <param name="hostName">Name of the host where the listener is running.</param>
            <param name="port">Number of the TCP port from the listener.</param>
        </member>
        <member name="T:Mtime.Community.Utility.Client.SocketPoolElement">
            <summary>
            Configures the socket pool settings for Memcached servers.
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.Client.SocketPoolElement.MinPoolSize">
            <summary>
            Gets or sets a value indicating the minimum amount of sockets per server in the socket pool.
            </summary>
            <returns>The minimum amount of sockets per server in the socket pool.</returns>
        </member>
        <member name="P:Mtime.Community.Utility.Client.SocketPoolElement.MaxPoolSize">
            <summary>
            Gets or sets a value indicating the maximum amount of sockets per server in the socket pool.
            </summary>
            <returns>The maximum amount of sockets per server in the socket pool.</returns>
        </member>
        <member name="P:Mtime.Community.Utility.Client.SocketPoolElement.ConnectionTimeout">
            <summary>
            Gets or sets the time in milliseconds for trying to connect to the server before aborting.
            </summary>
            <returns>The value of the connection timeout. The default is 10000 (10 seconds).</returns>
        </member>
        <member name="P:Mtime.Community.Utility.Client.SocketPoolElement.ClearIdleSession">
            <summary>
            Gets a value indicating whether clear idle session.
            </summary>
            <value><c>true</c> if clear idle session; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Mtime.Community.Utility.Client.SocketPoolElement.ClearIdleSessionInterval">
            <summary>
            Gets the clear idle session interval, in seconds.
            </summary>
            <value>The clear idle session interval.</value>
        </member>
        <member name="P:Mtime.Community.Utility.Client.SocketPoolElement.IdleSessionTimeOut">
            <summary>
            Gets the idle session timeout time length, in minutes.
            </summary>
            <value>The idle session time out.</value>
        </member>
        <member name="F:NGif.GifDecoder.STATUS_OK">
            File read status: No errors.
        </member>
        <member name="F:NGif.GifDecoder.STATUS_FORMAT_ERROR">
            File read status: Error decoding file (may be partially decoded)
        </member>
        <member name="F:NGif.GifDecoder.STATUS_OPEN_ERROR">
            File read status: Unable to open source.
        </member>
        <member name="M:NGif.GifDecoder.GetDelay(System.Int32)">
             Gets display duration for specified frame.
            
             @param n int index of frame
             @return delay in milliseconds
        </member>
        <member name="M:NGif.GifDecoder.GetFrameCount">
            Gets the number of frames read from file.
            @return frame count
        </member>
        <member name="M:NGif.GifDecoder.GetImage">
             Gets the first (or only) image read.
            
             @return BufferedImage containing first frame, or null if none.
        </member>
        <member name="M:NGif.GifDecoder.GetLoopCount">
             Gets the "Netscape" iteration count, if any.
             A count of 0 means repeat indefinitiely.
            
             @return iteration count if one was specified, else 1.
        </member>
        <member name="M:NGif.GifDecoder.GetPixels(System.Drawing.Bitmap)">
            Creates new frame image from current data (and previous
            frames as specified by their disposition codes).
        </member>
        <member name="M:NGif.GifDecoder.GetFrame(System.Int32)">
             Gets the image contents of frame n.
            
             @return BufferedImage representation of frame, or null if n is invalid.
        </member>
        <member name="M:NGif.GifDecoder.GetFrameSize">
             Gets image size.
            
             @return GIF image dimensions
        </member>
        <member name="M:NGif.GifDecoder.Read(System.IO.Stream)">
             Reads GIF image from stream
            
             @param BufferedInputStream containing GIF file.
             @return read status code (0 = no errors)
        </member>
        <member name="M:NGif.GifDecoder.Read(System.String)">
             Reads GIF file from specified file/URL source  
             (URL assumed if name contains ":/" or "file:")
            
             @param name String containing source
             @return read status code (0 = no errors)
        </member>
        <member name="M:NGif.GifDecoder.DecodeImageData">
            Decodes LZW image data into pixel array.
            Adapted from John Cristy's ImageMagick.
        </member>
        <member name="M:NGif.GifDecoder.Error">
            Returns true if an error was encountered during reading/decoding
        </member>
        <member name="M:NGif.GifDecoder.Init">
            Initializes or re-initializes reader
        </member>
        <member name="M:NGif.GifDecoder.Read">
            Reads a single byte from the input stream.
        </member>
        <member name="M:NGif.GifDecoder.ReadBlock">
             Reads next variable length block from input.
            
             @return number of bytes stored in "buffer"
        </member>
        <member name="M:NGif.GifDecoder.ReadColorTable(System.Int32)">
             Reads color table as 256 RGB integer values
            
             @param ncolors int number of colors to read
             @return int array containing 256 colors (packed ARGB with full alpha)
        </member>
        <member name="M:NGif.GifDecoder.ReadContents">
            Main file parser.  Reads GIF content blocks.
        </member>
        <member name="M:NGif.GifDecoder.ReadGraphicControlExt">
            Reads Graphics Control Extension values
        </member>
        <member name="M:NGif.GifDecoder.ReadHeader">
            Reads GIF file header information.
        </member>
        <member name="M:NGif.GifDecoder.ReadImage">
            Reads next frame image
        </member>
        <member name="M:NGif.GifDecoder.ReadLSD">
            Reads Logical Screen Descriptor
        </member>
        <member name="M:NGif.GifDecoder.ReadNetscapeExt">
            Reads Netscape extenstion to obtain iteration count
        </member>
        <member name="M:NGif.GifDecoder.ReadShort">
            Reads next 16-bit value, LSB first
        </member>
        <member name="M:NGif.GifDecoder.ResetFrame">
            Resets frame state for reading next image.
        </member>
        <member name="M:NGif.GifDecoder.Skip">
            Skips variable length blocks up to and including
            next zero length block.
        </member>
        <member name="T:GifUtility.LZWDecoder">
            <summary>
            Gif 使用的可变长度的LZW压缩算法解码器
            </summary>
        </member>
        <member name="F:GifUtility.LZWDecoder.MaxStackSize">
            <summary>
            GIF规定编码最大为12bit，最大值即为4096
            </summary>
        </member>
        <member name="M:GifUtility.LZWDecoder.#ctor(System.IO.Stream)">
            <summary>
            构造函数
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:GifUtility.LZWDecoder.DecodeImageData(System.Int32,System.Int32,System.Int32)">
            <summary>
            LZW压缩算法的解码器
            </summary>
            <param name="width">长度</param>
            <param name="height">高度</param>
            <param name="dataSize">//图像编码流的第一个字节(byte)存放的是数据位大小，在gif通常为1,4,8</param>
            <returns>原始数据流</returns>
        </member>
        <member name="M:GifUtility.LZWDecoder.Read">
            <summary>
            读取一个字节
            </summary>
            <returns></returns>
        </member>
        <member name="M:GifUtility.GifHelper.WaterMark(System.Byte[],GifUtility.SizeMode,System.String,System.Drawing.Color,System.Drawing.Font,System.Single,System.Single,System.String)">
            <summary>
            对gif动画添加水印
            </summary>
            <param name="gifFilePath">原gif动画的路径</param>
            <param name="text">水印文字</param>
            <param name="textForceColor">水印文字的颜色，因为gif不是真彩色图片，所以在显示的时候，该颜色可能有所误差，但基本上可以确定颜色范围</param>
            <param name="font">字体</param>
            <param name="x">水印位置横坐标</param>
            <param name="y">水印位置纵坐标</param>
            <param name="outputPath">输出路径</param>
        </member>
        <member name="M:GifUtility.GifHelper.SmartWaterMark(System.Byte[],System.String,System.Drawing.Color,System.Drawing.Font,System.Single,System.Single,System.String)">
            <summary>
            对gif动画添加水印
            </summary>
            <param name="gifFilePath">原gif动画的路径</param>
            <param name="text">水印文字</param>
            <param name="textForceColor">水印文字的颜色，因为gif不是真彩色图片，所以在显示的时候，该颜色可能有所误差，但基本上可以确定颜色范围</param>
            <param name="font">字体</param>
            <param name="x">水印位置横坐标</param>
            <param name="y">水印位置纵坐标</param>
            <param name="outputPath">输出路径</param>
        </member>
        <member name="M:GifUtility.GifHelper.WaterMark(System.Byte[],System.Drawing.Bitmap,System.Single,System.Single,System.String)">
            <summary>
            对gif动画添加图片水印
            </summary>
            <param name="gifFilePath">原图片路径</param>
            <param name="waterImg">水印图片</param>
            <param name="x">横坐标</param>
            <param name="y">纵坐标</param>
            <param name="outputPath">输出路径</param>
        </member>
        <member name="M:GifUtility.GifHelper.GetThumbnail(System.String,System.Double,System.String)">
            <summary>
            获取gif动画的缩略图
            </summary>
            <param name="gifFilePath">原gif图片路径</param>
            <param name="rate">缩放大小</param>
            <param name="outputPath">缩略图大小</param>
        </member>
        <member name="M:GifUtility.GifHelper.Quantizer(System.Drawing.Bitmap,GifUtility.Color32[])">
            <summary>
            对图像进行量化，使其适应调色板
            </summary>
            <param name="bmp">图像</param>
            <param name="colorTab">调色板</param>
        </member>
        <member name="M:GifUtility.GifHelper.Quantizer(System.Drawing.Bitmap,System.Int32[])">
            <summary>
            对图像进行量化，使其适应调色板
            </summary>
            <param name="bmp">图像</param>
            <param name="colorTab">调色板</param>
        </member>
        <member name="M:GifUtility.GifHelper.Monochrome(System.String,System.String)">
            <summary>
            Gif动画单色化
            </summary>
            <param name="gifFilePath">原动画路径</param>
            <param name="outputPath">单色后动画路径</param>
        </member>
        <member name="M:GifUtility.GifHelper.Merge(System.Collections.Generic.List{System.Byte[]},System.Int16,System.Boolean)">
            <summary>
            合并多个gif文件
            </summary>
            <param name="sourceGifs">原图像路径集合</param>
            <param name="outGif">合并后图像路径</param>
            <param name="delay">间隔时间</param>
            <param name="repeat">是否重复播放</param> 
        </member>
        <member name="M:GifUtility.GifHelper.Merge(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            合并多个gif动画,在空间坐标上
            </summary>
            <param name="sourceGifs">原图像</param>
            <param name="outPath">合并后图像</param>
        </member>
        <member name="M:GifUtility.GifHelper.Rotate(System.Byte[],System.Drawing.RotateFlipType,System.String)">
            <summary>
            将Gif图片进行旋转或者翻转
            </summary>
            <param name="gifFilePath">原图像路径</param>
            <param name="rotateType">翻转或者旋转方式</param>
            <param name="outputPath">输出路径</param>
        </member>
        <member name="M:GifUtility.GifHelper.Crop(System.Byte[],System.Drawing.Rectangle,System.String)">
            <summary>
            对Gif图片进行剪裁
            </summary>
            <param name="gifFilePath">原图像</param>
            <param name="rect">剪裁区域</param>
            <param name="outFilePath">输出路径</param>
        </member>
        <member name="M:GifUtility.GifHelper.Crop(System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            对Gif图片进行剪裁
            </summary>
            <param name="gifFilePath">原图像</param>
            <param name="rect">剪裁区域</param>
            <param name="outFilePath">输出路径</param>
        </member>
        <member name="T:GifUtility.GifDecoder">
            <summary>
            GIF图像文件的解码器
            </summary>
        </member>
        <member name="M:GifUtility.GifDecoder.Decode(System.String)">
            <summary>
            对gif图像文件进行解码
            </summary>
            <param name="gifPath">gif文件路径</param>
        </member>
        <member name="T:GifUtility.Color32">
            <summary>
            封装的颜色结构
            </summary>
        </member>
        <member name="F:GifUtility.Color32.Blue">
            <summary>
            颜色中的B,位于最低位
            </summary>
        </member>
        <member name="F:GifUtility.Color32.Green">
            <summary>
            颜色中的G,位于第二位
            </summary>
        </member>
        <member name="F:GifUtility.Color32.Red">
            <summary>
            颜色中的R,位于第三位
            </summary>
        </member>
        <member name="F:GifUtility.Color32.Alpha">
            <summary>
            颜色中的A,位于第四位
            </summary>
        </member>
        <member name="F:GifUtility.Color32.ARGB">
            <summary>
            颜色的整形值
            </summary>
        </member>
        <member name="P:GifUtility.Color32.Color">
            <summary>
            颜色
            </summary>
        </member>
        <member name="T:Mtime.Community.Utility.MwDACException">
            <summary>
            Mtime后台获取数据异常时抛出。
            </summary>
        </member>
        <member name="T:Mtime.Community.Utility.MtimeException">
            <summary>
            所有Mtime异常的基类
            </summary>
        </member>
        <member name="T:Mtime.EPay.EPayProvider">
            <summary>
            电子支付提供商
            </summary>
        </member>
        <member name="F:Mtime.EPay.EPayProvider.Ali">
            <summary>
            支付宝
            </summary>
        </member>
        <member name="F:Mtime.EPay.EPayProvider.CapInfo">
            <summary>
            首信
            </summary>
        </member>
        <member name="T:Mtime.MongoDB.Protocol.UpdateMessage">
            <summary>
            
            </summary>
            <remarks>
            struct {
             	MsgHeader header;             // standard message header
             	int32     ZERO;               // 0 - reserved for future use
             	cstring   fullCollectionName; // "dbname.collectionname"
             	int32     flags;              // bit vector, bit 0 for upsert, bit 1 for multiupdate operation, 2-31 reserved.
             	BSON      selector;           // the query to select the document
             	BSON      document;           // the document data to update with or insert
            }
            </remarks>
        </member>
        <member name="P:Mtime.MongoDB.Protocol.UpdateMessage.FullCollectionName">
            <summary>
            表的全路径名，如："dbname.collectionname"
            </summary>
        </member>
        <member name="F:Mtime.MongoDB.Protocol.UpdateFlags.Upsert">
            <summary>
            If set, the database will insert the supplied object into the collection if no matching document is found. 
            </summary>
        </member>
        <member name="F:Mtime.MongoDB.Protocol.UpdateFlags.MultiUpdate">
            <summary>
            If set, the database will update all matching objects in the collection. Otherwise only updates first matching doc. 
            </summary>
        </member>
        <member name="T:Mtime.MongoDB.MongoConfigException">
            <summary>
            MongoDB数据库连接配置异常
            </summary>
        </member>
        <member name="T:Mtime.MongoDB.Bson.MongoMaxKey">
            <summary>
            Class representing the MaxKey Bson type.  It will always compare higher than any other type.
            </summary>
        </member>
        <member name="M:Mtime.MongoDB.Bson.MongoMaxKey.#cctor">
            <summary>
            Initializes the <see cref="T:Mtime.MongoDB.Bson.MongoMaxKey"/> class.
            </summary>
        </member>
        <member name="M:Mtime.MongoDB.Bson.MongoMaxKey.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mtime.MongoDB.Bson.MongoMaxKey"/> class.
            </summary>
        </member>
        <member name="M:Mtime.MongoDB.Bson.MongoMaxKey.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Mtime.MongoDB.Bson.MongoMaxKey.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.Lists.GetFirst``1(System.String)">
            <summary>
            Removes and returns the first element of the list stored at key.
            </summary>
            <param name="key"></param>
            <returns>the value of the first element, or nil when key does not exist.</returns>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.Lists.GetFirstBlock``1(System.Int32,System.String[])">
            <summary>
            Removes and returns the first element of the list stored at key. if no element it will block the connection untill get element.
            </summary>
            <param name="key"></param>
            <returns>the value of the first element, or nil when key does not exist.</returns>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.Lists.GetLast``1(System.String)">
            <summary>
            Removes and returns the last element of the list stored at key.
            </summary>
            <param name="key"></param>
            <returns>the value of the last element, or nil when key does not exist.</returns>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.Lists.GetLastBlock``1(System.Int32,System.String[])">
            <summary>
            Removes and returns the last element of the list stored at key.if no element it will block the connection untill get element.
            </summary>
            <param name="key"></param>
            <returns>the value of the last element, or nil when key does not exist.</returns>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.Lists.GetListCount(System.String)">
            <summary>
            Returns the length of the list stored at key.
            </summary>
            <param name="key"></param>
            <returns>the length of the list at key. -1 failed.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Mtime.Community.Utility.Redis.Lists.RemoveValue(System.String,System.Int32,System.Object)" -->
        <member name="M:Mtime.Community.Utility.Redis.Lists.SetLast(System.String,System.Object)">
            <summary>
            Inserts value at the tail of the list stored at key. 
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>the length of the list after the push operation. -1 failed.</returns>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.Lists.SetLastIfNotNull(System.String,System.Object)">
            <summary>
            Inserts value at the tail of the list stored at key. only if key already exists and holds a list.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>the length of the list after the push operation. -1 failed.</returns>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.Lists.SetValue(System.String,System.Int32,System.Object)">
            <summary>
            Sets the list element at index to value.
            </summary>
            <param name="key"></param>
            <param name="count"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.Lists.SetFirst(System.String,System.Object)">
            <summary>
            Inserts value at the head of the list stored at key.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>the length of the list after the push operation. -1 failed.</returns>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.Lists.SetFirst``1(System.String,System.Collections.Generic.IList{``0})">
            <summary>
            Inserts values at the head of the list stored at key.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>the length of the list after the push operation. -1 failed.</returns>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.Lists.SetFirstIfNotNull(System.String,System.Object)">
            <summary>
            Inserts value at the head of the list stored at key.only if key already exists and holds a list.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>the length of the list after the push operation. -1 failed.</returns>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.Lists.SetTrim(System.String,System.Int32,System.Int32)">
            <summary>
            Trim an existing list so that it will contain only the specified range of elements specified. 
            Out of range indexes will not produce an error: if start is larger than the end of the list, or start > end (in that case end should > 0), 
            the result will be an empty list (which causes key to be removed). If end is larger than the end of the list, 
            Redis will treat it like the last element of the list.
            </summary>
            <param name="key"></param>
            <param name="fromFirst">0 is from the first,1 is from secoend and so on. </param>
            <param name="fromLast">-1 is the last -2 is before the last and so on.</param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.Lists.GetValueByIndex``1(System.String,System.Int32)">
            <summary>
            Returns the element at index index in the list stored at key.
            </summary>
            <param name="key"></param>
            <param name="index">0 means the first element, 1 the second element and so on. </param>
            <returns>the requested element</returns>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.Lists.InsertValue(System.String,System.Boolean,System.Object,System.Object)">
            <summary>
            Inserts value in the list stored at key either before or after the reference value pivot.
            </summary>
            <param name="key"></param>
            <param name="startValue"></param>
            <param name="endValue"></param>
            <returns>the length of the list after the insert operation, or -1 when the value pivot was not found.</returns>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.Lists.GetRange``1(System.String,System.Int32,System.Int32)">
            <summary>
            Returns the specified elements of the list stored at key.
            </summary>
            <param name="key"></param>
            <param name="startIndex">0 means the first element, 1 the second element and so on.</param>
            <param name="endIndex">-1 is the last -2 is before the last and so on.</param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.Lists.MoveLast``1(System.String,System.String)">
            <summary>
            Atomically returns and removes the last element (tail) of the list stored at source, and pushes the element at the first element (head) of the list stored at destination.
            </summary>
            <param name="fromKey">first list key</param>
            <param name="toKey">destination list key</param>
            <returns>this last element of first list.</returns>
        </member>
        <member name="M:Mtime.Community.Utility.Redis.Lists.MoveLastBlock``1(System.String,System.String,System.Int32)">
            <summary>
            Atomically returns and removes the last element (tail) of the list stored at source, and pushes the element at the first element (head) of the list stored at destination.
            if no element it will block the connection untill get element.
            </summary>
            <param name="fromKey">first list key</param>
            <param name="toKey">destination list key</param>
            <returns>this last element of first list.</returns>
        </member>
        <member name="M:Mtime.Community.Utility.BaiduNewsRss.BaiduNewsRssItem.#ctor(System.String,System.String,System.String,System.String,System.String[],System.String,System.String,System.String,System.String,System.String,System.DateTime)">
            <summary>
            构造
            </summary>
            <param name="title">新闻标题</param>
            <param name="link">新闻url地址</param>
            <param name="description">新闻内容简介</param>
            <param name="text">完整的新闻正文（仅包含正文文字，不包含HTML语言等其它字符）。</param>
            <param name="imageUrls">新闻正文内相关图片，采用绝对地址。若该篇新闻无相关图片，可以为空。</param>
            <param name="headlineImg">为有可能成为头条的新闻制作的头条图，采用绝对地址。</param>
            <param name="keywords">反映新闻主题内容的一个或多个关键词，关键词之间以空格隔开。</param>
            <param name="category">新闻分类</param>
            <param name="author">新闻作者</param>
            <param name="source">新闻来源</param>
            <param name="pubDate">新闻发布时间</param>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.PathFilter">
            <summary>
            PathFilter filters directories and files using a form of <see cref="T:System.Text.RegularExpressions.Regex">regular expressions</see>
            by full path name.
            See <see cref="T:ICSharpCode.SharpZipLib.Core.NameFilter">NameFilter</see> for more detail on filtering.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.PathFilter.#ctor(System.String)">
            <summary>
            Initialise a new instance of <see cref="T:ICSharpCode.SharpZipLib.Core.PathFilter"></see>.
            </summary>
            <param name="filter">The <see cref="T:ICSharpCode.SharpZipLib.Core.NameFilter"></see>filter expression to apply.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.PathFilter.IsMatch(System.String)">
            <summary>
            Test a name to see if it matches the filter.
            </summary>
            <param name="name">The name to test.</param>
            <returns>True if the name matches, false otherwise.</returns>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.ExtendedPathFilter">
            <summary>
            ExtendedPathFilter filters based on name, file size, and the last write time of the file.
            </summary>
            <remarks>Provides an example of how to customise filtering.</remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.ExtendedPathFilter.#ctor(System.String,System.Int64,System.Int64)">
            <summary>
            Initialise a new instance of ExtendedPathFilter.
            </summary>
            <param name="filter">The filter to apply.</param>
            <param name="minSize">The minimum file size to include.</param>
            <param name="maxSize">The maximum file size to include.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.ExtendedPathFilter.#ctor(System.String,System.DateTime,System.DateTime)">
            <summary>
            Initialise a new instance of ExtendedPathFilter.
            </summary>
            <param name="filter">The filter to apply.</param>
            <param name="minDate">The minimum <see cref="T:System.DateTime"/> to include.</param>
            <param name="maxDate">The maximum <see cref="T:System.DateTime"/> to include.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.ExtendedPathFilter.#ctor(System.String,System.Int64,System.Int64,System.DateTime,System.DateTime)">
            <summary>
            Initialise a new instance of ExtendedPathFilter.
            </summary>
            <param name="filter">The filter to apply.</param>
            <param name="minSize">The minimum file size to include.</param>
            <param name="maxSize">The maximum file size to include.</param>
            <param name="minDate">The minimum <see cref="T:System.DateTime"/> to include.</param>
            <param name="maxDate">The maximum <see cref="T:System.DateTime"/> to include.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.ExtendedPathFilter.IsMatch(System.String)">
            <summary>
            Test a filename to see if it matches the filter.
            </summary>
            <param name="name">The filename to test.</param>
            <returns>True if the filter matches, false otherwise.</returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.ExtendedPathFilter.MinSize">
            <summary>
            Get/set the minimum size for a file that will match this filter.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.ExtendedPathFilter.MaxSize">
            <summary>
            Get/set the maximum size for a file that will match this filter.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.ExtendedPathFilter.MinDate">
            <summary>
            Get/set the minimum <see cref="T:System.DateTime"/> value that will match for this filter.
            </summary>
            <remarks>Files with a LastWrite time less than this value are excluded by the filter.</remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.ExtendedPathFilter.MaxDate">
            <summary>
            Get/set the maximum <see cref="T:System.DateTime"/> value that will match for this filter.
            </summary>
            <remarks>Files with a LastWrite time greater than this value are excluded by the filter.</remarks>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.NameAndSizeFilter">
            <summary>
            NameAndSizeFilter filters based on name and file size.
            </summary>
            <remarks>A sample showing how filters might be extended.</remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.NameAndSizeFilter.#ctor(System.String,System.Int64,System.Int64)">
            <summary>
            Initialise a new instance of NameAndSizeFilter.
            </summary>
            <param name="filter">The filter to apply.</param>
            <param name="minSize">The minimum file size to include.</param>
            <param name="maxSize">The maximum file size to include.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.NameAndSizeFilter.IsMatch(System.String)">
            <summary>
            Test a filename to see if it matches the filter.
            </summary>
            <param name="name">The filename to test.</param>
            <returns>True if the filter matches, false otherwise.</returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.NameAndSizeFilter.MinSize">
            <summary>
            Get/set the minimum size for a file that will match this filter.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.NameAndSizeFilter.MaxSize">
            <summary>
            Get/set the maximum size for a file that will match this filter.
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.Web.IStaticPage.PreInit(Mtime.Community.Utility.Web.IStaticPageContext)">
            <summary>
            让子类提前执行一些方法
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="F:Mtime.Community.Utility.Web.StaticPage.jsSrcScripts">
            <summary>
            外链Js src
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.Web.StaticPage.dataScripts">
            <summary>
            Js脚本 数据
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.Web.StaticPage.systemScripts">
            <summary>
            Js脚本 系统
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.Web.StaticPage.callbackScripts">
            <summary>
            Js脚本 callback
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.Web.StaticPage.runtimeScripts">
            <summary>
            Js脚本 运行
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.Web.StaticPage.styles">
            <summary>
            Css
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.Web.StaticPage.metas">
            <summary>
            Meta
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.Web.StaticPage.RegisterClientScriptDataBlock(System.String)">
            <summary>
            注册客户端脚本
            </summary>
            <param name="scriptContent">数据型脚本内容</param>
        </member>
        <member name="M:Mtime.Community.Utility.Web.StaticPage.RegisterClientScriptDataBlock(Mtime.Community.Utility.Web.ScriptVariables)">
            <summary>
            注册客户端脚本
            </summary>
            <param name="scriptVariables">数据型脚本内容</param>
        </member>
        <member name="M:Mtime.Community.Utility.Web.StaticPage.RegisterClientScriptSystemBlock(System.String)">
            <summary>
            注册客户端脚本
            </summary>
            <param name="scriptContent">系统型脚本内容</param>
        </member>
        <member name="M:Mtime.Community.Utility.Web.StaticPage.RegisterClientScriptJsSrcBlock(System.String)">
            <summary>
            外链Js src，慎用，除非该js中带有document.write
            </summary>
            <param name="scriptContent">Js src</param>
        </member>
        <member name="M:Mtime.Community.Utility.Web.StaticPage.RegisterClientScriptCallbackBlock(System.String)">
            <summary>
            注册客户端脚本
            </summary>
            <param name="scriptContent">回调型脚本内容</param>
        </member>
        <member name="M:Mtime.Community.Utility.Web.StaticPage.RegisterClientScriptRuntimeBlock(System.String)">
            <summary>
            注册客户端脚本
            </summary>
            <param name="scriptContent">运行型脚本内容</param>
        </member>
        <member name="M:Mtime.Community.Utility.Web.StaticPage.RegisterClientStyleBlock(System.String)">
            <summary>
            注册客户端CSS
            </summary>
            <param name="styleContent"></param>
        </member>
        <member name="M:Mtime.Community.Utility.Web.StaticPage.RegisterClientMetaBlock(System.String,System.String)">
            <summary>
            注册META脚本
            </summary>
            <param name="metaName"></param>
            <param name="metaContent"></param>
        </member>
        <member name="M:Mtime.Community.Utility.Web.StaticPage.RenderScript">
            <summary>
            输出脚本块
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.Web.StaticPage.RenderStyle">
            <summary>
            输出CSS块
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.Web.StaticPage.RenderMeta">
            <summary>
            输出Meta块
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.Web.StaticPage.Load">
            <summary>
            具体页面装载
            </summary>
        </member>
        <member name="T:Mtime.Community.Utility.URLRewriter.Config.MsnRewriterConfig">
            <summary>
            定义了URL重写的配置类文件结构以及获取配置
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.URLRewriter.Config.MsnRewriterConfig.GetConfig">
            <summary>
            从配置文件中返回一个RewriterConfiguration实例
            </summary>
        </member>
        <member name="T:Mtime.Community.Utility.URLRewriter.Config.Mtime08RewriterConfig">
            <summary>
            定义了URL重写的配置类文件结构以及获取配置
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.URLRewriter.Config.Mtime08RewriterConfig.GetConfig">
            <summary>
            从配置文件中返回一个RewriterConfiguration实例
            </summary>
        </member>
        <member name="T:Rss.RssImage">
            <summary>A link and description for a graphic that represent a channel</summary>
        </member>
        <member name="M:Rss.RssImage.#ctor">
            <summary>Initialize a new instance of the RssImage class.</summary>
        </member>
        <member name="P:Rss.RssImage.Url">
            <summary>The URL of a GIF, JPEG or PNG image that represents the channel.</summary>
            <remarks>Maximum length is 500 (For RSS 0.91).</remarks>
        </member>
        <member name="P:Rss.RssImage.Title">
            <summary>Describes the image, it's used in the ALT attribute of the HTML img tag when the channel is rendered in HTML.</summary>
            <remarks>Maximum length is 100 (For RSS 0.91).</remarks>
        </member>
        <member name="P:Rss.RssImage.Link">
            <summary>The URL of the site, when the channel is rendered, the image is a link to the site.</summary>
            <remarks>Maximum length is 500 (For RSS 0.91).</remarks>
        </member>
        <member name="P:Rss.RssImage.Description">
            <summary>Contains text that is included in the TITLE attribute of the link formed around the image in the HTML rendering.</summary>
        </member>
        <member name="P:Rss.RssImage.Width">
            <summary>Width of image in pixels</summary>
            <remarks>Maximum value for height is 400 (For RSS 0.91)</remarks>
        </member>
        <member name="P:Rss.RssImage.Height">
            <summary>Height of image in pixels</summary>
            <remarks>Maximum value for width is 144 (For RSS 0.91)</remarks>
        </member>
        <member name="T:Mtime.Community.Utility.ResourceManager.GroupResourceManager">
            <summary>
            群组资源
            </summary>
        </member>
        <member name="T:Mtime.Community.SQLServerDAL.SqlHelper">
            <summary>
            The SqlHelper class is intended to encapsulate high performance, scalable best practices for 
            common uses of SqlClient
            </summary>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelper.AttachParameters(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlParameter[])">
            <summary>
            This method is used to attach array of SqlParameters to a SqlCommand.
            
            This method will assign a value of DbNull to any parameter with a direction of
            InputOutput and a value of null.  
            
            This behavior will prevent default values from being used, but
            this will be the less common case than an intended pure output parameter (derived as InputOutput)
            where the user provided no input value.
            </summary>
            <param name="command">The command to which the parameters will be added</param>
            <param name="commandParameters">An array of SqlParameters to be added to command</param>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelper.AssignParameterValues(System.Data.SqlClient.SqlParameter[],System.Data.DataRow)">
            <summary>
            This method assigns dataRow column values to an array of SqlParameters
            </summary>
            <param name="commandParameters">Array of SqlParameters to be assigned values</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values</param>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelper.AssignParameterValues(System.Data.SqlClient.SqlParameter[],System.Object[])">
            <summary>
            This method assigns an array of values to an array of SqlParameters
            </summary>
            <param name="commandParameters">Array of SqlParameters to be assigned values</param>
            <param name="parameterValues">Array of objects holding the values to be assigned</param>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelper.PrepareCommand(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[],System.Boolean@)">
            <summary>
            This method opens (if necessary) and assigns a connection, transaction, command type and parameters 
            to the provided command
            </summary>
            <param name="command">The SqlCommand to be prepared</param>
            <param name="connection">A valid SqlConnection, on which to execute this command</param>
            <param name="transaction">A valid SqlTransaction, or 'null'</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters to be associated with the command or 'null' if no parameters are required</param>
            <param name="mustCloseConnection"><c>true</c> if the connection was opened by the method, otherwose is false.</param>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the database specified in 
            the connection string
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the database specified in the connection string 
            using the provided parameters
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelper.ExecuteNonQuery(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(connString, "PublishOrders", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored prcedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(conn, "PublishOrders", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(conn, trans, "PublishOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelper.ExecuteDataset(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[],Mtime.Community.SQLServerDAL.SqlHelper.SqlConnectionOwnership)">
            <summary>
            Create and prepare a SqlCommand, and call ExecuteReader with the appropriate CommandBehavior.
            </summary>
            <remarks>
            If we created and opened the connection, we want the connection to be closed when the DataReader is closed.
            
            If the caller provided the connection, we want to leave it to them to manage.
            </remarks>
            <param name="connection">A valid SqlConnection, on which to execute this command</param>
            <param name="transaction">A valid SqlTransaction, or 'null'</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters to be associated with the command or 'null' if no parameters are required</param>
            <param name="connectionOwnership">Indicates whether the connection parameter was provided by the caller, or created by SqlHelper</param>
            <returns>SqlDataReader containing the results of the command</returns>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelper.ExecuteReader(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             SqlDataReader dr = ExecuteReader(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             SqlDataReader dr = ExecuteReader(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
              SqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             SqlDataReader dr = ExecuteReader(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelper.ExecuteScalar(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, "GetOrderCount", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, "GetOrderCount", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, "GetOrderCount", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure using "FOR XML AUTO"</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelper.FillDataset(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)</param>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelper.FillDataset(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelper.FillDataset(System.String,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, 24);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>    
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             FillDataset(conn, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>    
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(conn, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             FillDataset(conn, "GetOrders", ds, new string[] {"orders"}, 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             FillDataset(trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             FillDataset(trans, "GetOrders", ds, new string[]{"orders"}, 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Private helper method that execute a SqlCommand (that returns a resultset) against the specified SqlTransaction and SqlConnection
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(conn, trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelper.UpdateDataset(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlCommand,System.Data.DataSet,System.String)">
            <summary>
            Executes the respective command for each inserted, updated, or deleted row in the DataSet.
            </summary>
            <remarks>
            e.g.:  
             UpdateDataset(conn, insertCommand, deleteCommand, updateCommand, dataSet, "Order");
            </remarks>
            <param name="insertCommand">A valid transact-SQL statement or stored procedure to insert new records into the data source</param>
            <param name="deleteCommand">A valid transact-SQL statement or stored procedure to delete records from the data source</param>
            <param name="updateCommand">A valid transact-SQL statement or stored procedure used to update records in the data source</param>
            <param name="dataSet">The DataSet used to update the data source</param>
            <param name="tableName">The DataTable used to update the data source.</param>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelper.CreateCommand(System.Data.SqlClient.SqlConnection,System.String,System.String[])">
            <summary>
            Simplify the creation of a Sql command object by allowing
            a stored procedure and optional parameters to be provided
            </summary>
            <remarks>
            e.g.:  
             SqlCommand command = CreateCommand(conn, "AddCustomer", "CustomerID", "CustomerName");
            </remarks>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="sourceColumns">An array of string to be assigned as the source columns of the stored procedure parameters</param>
            <returns>A valid SqlCommand object</returns>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelper.ExecuteNonQueryTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelper.ExecuteNonQueryTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.  
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelper.ExecuteNonQueryTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified
            SqlTransaction using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelper.ExecuteDatasetTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelper.ExecuteDatasetTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the dataRow column values as the store procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelper.ExecuteDatasetTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlTransaction 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelper.ExecuteReaderTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelper.ExecuteReaderTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelper.ExecuteReaderTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlTransaction 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelper.ExecuteScalarTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelper.ExecuteScalarTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelper.ExecuteScalarTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified SqlTransaction
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelper.ExecuteXmlReaderTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelper.ExecuteXmlReaderTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlTransaction 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelper.CacheParameters(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            add parameter array to the cache
            </summary>
            <param name="cacheKey">Key to the parameter cache</param>
            <param name="cmdParms">an array of SqlParamters to be cached</param>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelper.GetCachedParameters(System.String)">
            <summary>
            Retrieve cached parameters
            </summary>
            <param name="cacheKey">key used to lookup parameters</param>
            <returns>Cached SqlParamters array</returns>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelper.Fill(System.Data.IDataReader,System.Data.DataSet,System.String,System.Int32,System.Int32)">
            <summary>
            Fills a typed DataSet using the DataReader's current result. This method 
            allows paginated access to the database.
            </summary>
            <param name="dataReader">The DataReader used to fetch the values.</param>
            <param name="dataSet">The DataSet used to store the values.</param>
            <param name="tableName">The name of the DataSet table used to add the 
            DataReader records.</param>
            <param name="from">The quantity of records skipped before placing
            values on the DataReader on the DataSet.</param>
            <param name="count">The maximum quantity of records alloed to fill on the
            DataSet.</param>
        </member>
        <member name="T:Mtime.Community.SQLServerDAL.SqlHelper.SqlConnectionOwnership">
            <summary>
            This enum is used to indicate whether the connection was provided by the caller, or created by SqlHelper, so that
            we can set the appropriate CommandBehavior when calling ExecuteReader()
            </summary>
        </member>
        <member name="F:Mtime.Community.SQLServerDAL.SqlHelper.SqlConnectionOwnership.Internal">
            <summary>Connection is owned and managed by SqlHelper</summary>
        </member>
        <member name="F:Mtime.Community.SQLServerDAL.SqlHelper.SqlConnectionOwnership.External">
            <summary>Connection is owned and managed by the caller</summary>
        </member>
        <member name="T:Mtime.Community.SQLServerDAL.SqlHelperParameterCache">
            <summary>
            SqlHelperParameterCache provides functions to leverage a static cache of procedure parameters, and the
            ability to discover parameters for stored procedures at run-time.
            </summary>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelperParameterCache.DiscoverSpParameterSet(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary>
            Resolve at run time the appropriate set of SqlParameters for a stored procedure
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">Whether or not to include their return value parameter</param>
            <returns>The parameter array discovered.</returns>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelperParameterCache.CloneParameters(System.Data.SqlClient.SqlParameter[])">
            <summary>
            Deep copy of cached SqlParameter array
            </summary>
            <param name="originalParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelperParameterCache.CacheParameterSet(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Add parameter array to the cache
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters to be cached</param>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelperParameterCache.GetCachedParameterSet(System.String,System.String)">
            <summary>
            Retrieve a parameter array from the cache
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An array of SqlParamters</returns>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelperParameterCache.GetSpParameterSet(System.String,System.String)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelperParameterCache.GetSpParameterSet(System.String,System.String,System.Boolean)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelperParameterCache.GetSpParameterSet(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelperParameterCache.GetSpParameterSet(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:Mtime.Community.SQLServerDAL.SqlHelperParameterCache.GetSpParameterSetInternal(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="T:ProtoBuf.Meta.CallbackSet">
            <summary>
            Represents the set of serialization callbacks to be used when serializing/deserializing a type.
            </summary>
        </member>
        <member name="P:ProtoBuf.Meta.CallbackSet.BeforeSerialize">
            <summary>Called before serializing an instance</summary>
        </member>
        <member name="P:ProtoBuf.Meta.CallbackSet.BeforeDeserialize">
            <summary>Called before deserializing an instance</summary>
        </member>
        <member name="P:ProtoBuf.Meta.CallbackSet.AfterSerialize">
            <summary>Called after serializing an instance</summary>
        </member>
        <member name="P:ProtoBuf.Meta.CallbackSet.AfterDeserialize">
            <summary>Called after deserializing an instance</summary>
        </member>
        <member name="P:ProtoBuf.Meta.CallbackSet.NonTrivial">
            <summary>
            True if any callback is set, else False
            </summary>
        </member>
        <member name="T:ProtoBuf.BclHelpers">
            <summary>
            Provides support for common .NET types that do not have a direct representation
            in protobuf, using the definitions from bcl.proto
            </summary>
        </member>
        <member name="M:ProtoBuf.BclHelpers.GetUninitializedObject(System.Type)">
            <summary>
            Creates a new instance of the specified type, bypassing the constructor.
            </summary>
            <param name="type">The type to create</param>
            <returns>The new instance</returns>
            <exception cref="T:System.NotSupportedException">If the platform does not support constructor-skipping</exception>
        </member>
        <member name="M:ProtoBuf.BclHelpers.WriteTimeSpan(System.TimeSpan,ProtoBuf.ProtoWriter)">
            <summary>
            Writes a TimeSpan to a protobuf stream
            </summary>
        </member>
        <member name="M:ProtoBuf.BclHelpers.ReadTimeSpan(ProtoBuf.ProtoReader)">
            <summary>
            Parses a TimeSpan from a protobuf stream
            </summary>        
        </member>
        <member name="M:ProtoBuf.BclHelpers.ReadDateTime(ProtoBuf.ProtoReader)">
            <summary>
            Parses a DateTime from a protobuf stream
            </summary>
        </member>
        <member name="M:ProtoBuf.BclHelpers.WriteDateTime(System.DateTime,ProtoBuf.ProtoWriter)">
            <summary>
            Writes a DateTime to a protobuf stream
            </summary>
        </member>
        <member name="M:ProtoBuf.BclHelpers.ReadDecimal(ProtoBuf.ProtoReader)">
            <summary>
            Parses a decimal from a protobuf stream
            </summary>
        </member>
        <member name="M:ProtoBuf.BclHelpers.WriteDecimal(System.Decimal,ProtoBuf.ProtoWriter)">
            <summary>
            Writes a decimal to a protobuf stream
            </summary>
        </member>
        <member name="M:ProtoBuf.BclHelpers.WriteGuid(System.Guid,ProtoBuf.ProtoWriter)">
            <summary>
            Writes a Guid to a protobuf stream
            </summary>        
        </member>
        <member name="M:ProtoBuf.BclHelpers.ReadGuid(ProtoBuf.ProtoReader)">
            <summary>
            Parses a Guid from a protobuf stream
            </summary>
        </member>
        <member name="M:ProtoBuf.BclHelpers.ReadNetObject(System.Object,ProtoBuf.ProtoReader,System.Int32,System.Type)">
            <summary>
            Reads an *implementation specific* bundled .NET object, including (as options) type-metadata, identity/re-use, etc.
            </summary>
        </member>
        <member name="M:ProtoBuf.BclHelpers.WriteNetObject(System.Object,ProtoBuf.ProtoWriter,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Writes an *implementation specific* bundled .NET object, including (as options) type-metadata, identity/re-use, etc.
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.OAuth.Weibo.OAuthSohu.GetAuthorizationUrl">
            <summary>
            获取认证URL
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mtime.Community.Utility.zxing.qrcode.encoder.BitVector">
            <summary> JAVAPORT: This should be combined with BitArray in the future, although that class is not yet
            dynamically resizeable. This implementation is reasonable but there is a lot of function calling
            in loops I'd like to get rid of.
            
            </summary>
            <author>  satorux@google.com (Satoru Takabayashi) - creator
            </author>
            <author>  dswitkin@google.com (Daniel Switkin) - ported from C++
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="T:Mtime.Community.Utility.zxing.ReaderException">
            <summary> The general exception class throw when something goes wrong during decoding of a barcode.
            This includes, but is not limited to, failing checksums / error correction algorithms, being
            unable to locate finder timing patterns, and so on.
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="T:Mtime.Community.Utility.zxing.common.ByteArray">
            <summary> This class implements an array of unsigned bytes.
            
            </summary>
            <author>  dswitkin@google.com (Daniel Switkin)
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="M:Mtime.Community.Utility.zxing.common.ByteArray.at(System.Int32)">
            <summary> Access an unsigned byte at location index.</summary>
            <param name="index">The index in the array to access.
            </param>
            <returns> The unsigned value of the byte as an int.
            </returns>
        </member>
        <member name="T:Mtime.Community.Utility.FileLog">
            <summary>
            FileLog 的摘要说明
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.ReferenceLoopHandling">
            <summary>
            Specifies reference loop handling options for the <see cref="T:Newtonsoft.Json.JsonWriter"/>.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.ReferenceLoopHandling.Error">
            <summary>
            Throw a <see cref="T:Newtonsoft.Json.JsonSerializationException"/> when a loop is encountered.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.ReferenceLoopHandling.Ignore">
            <summary>
            Ignore loop references and do not serialize.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.ReferenceLoopHandling.Serialize">
            <summary>
            Serialize loop references.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonSerializer">
            <summary>
            Serializes and deserializes objects into and from the Json format.
            The <see cref="T:Newtonsoft.Json.JsonSerializer"/> enables you to control how objects are encoded into Json.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializer"/> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize(Newtonsoft.Json.JsonReader)">
            <summary>
            Deserializes the Json structure contained by the specified <see cref="T:Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> that contains the Json structure to deserialize.</param>
            <returns>The <see cref="T:System.Object"/> being deserialized.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize(Newtonsoft.Json.JsonReader,System.Type)">
            <summary>
            Deserializes the Json structure contained by the specified <see cref="T:Newtonsoft.Json.JsonReader"/>
            into an instance of the specified type.
            </summary>
            <param name="reader">The type of object to create.</param>
            <param name="objectType">The <see cref="T:System.Type"/> of object being deserialized.</param>
            <returns>The instance of <paramref name="objectType"/> being deserialized.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Serialize(System.IO.TextWriter,System.Object)">
            <summary>
            Serializes the specified <see cref="T:System.Object"/> and writes the Json structure
            to a <c>Stream</c> using the specified <see cref="T:System.IO.TextWriter"/>. 
            </summary>
            <param name="textWriter">The <see cref="T:System.IO.TextWriter"/> used to write the Json structure.</param>
            <param name="value">The <see cref="T:System.Object"/> to serialize.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Serialize(Newtonsoft.Json.JsonWriter,System.Object)">
            <summary>
            Serializes the specified <see cref="T:System.Object"/> and writes the Json structure
            to a <c>Stream</c> using the specified <see cref="T:Newtonsoft.Json.JsonWriter"/>. 
            </summary>
            <param name="jsonWriter">The <see cref="T:Newtonsoft.Json.JsonWriter"/> used to write the Json structure.</param>
            <param name="value">The <see cref="T:System.Object"/> to serialize.</param>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.ReferenceLoopHandling">
            <summary>
            Get or set how reference loops (e.g. a class referencing itself) is handled.
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.Json.JsonArray.ToString">
            <returns>A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.</returns>
        </member>
        <member name="M:Mtime.Community.Utility.Memcached.MemcachedClient.#ctor">
            <summary>
            Initializes a new MemcachedClient
            </summary>
        </member>
        <member name="T:Mtime.MongoDB.Protocol.GetMoreMessage">
            <summary>
            Description of GetMoreMessage.
            </summary>
            <remarks>
                 struct {
                     MsgHeader header;                 // standard message header
                     int32     ZERO;                   // 0 - reserved for future use
                     cstring   fullCollectionName;     // "dbname.collectionname"
                     int32     numberToReturn;         // number of documents to return
                     int64     cursorID;               // cursorID from the OP_REPLY
                 }
            </remarks>
        </member>
        <member name="P:Mtime.MongoDB.Protocol.GetMoreMessage.FullCollectionName">
            <summary>
            表的全路径名，如："dbname.collectionname"
            </summary>
        </member>
        <member name="F:Mtime.MongoDB.ConditionJoin.NotEqual">
            <summary>
            不等于
            </summary>
        </member>
        <member name="F:Mtime.MongoDB.ConditionJoin.LessThan">
            <summary>
            小于
            </summary>
        </member>
        <member name="F:Mtime.MongoDB.ConditionJoin.LessThanOrEqual">
            <summary>
            小于或等于
            </summary>
        </member>
        <member name="F:Mtime.MongoDB.ConditionJoin.GreaterThan">
            <summary>
            大于
            </summary>
        </member>
        <member name="F:Mtime.MongoDB.ConditionJoin.GreaterThanOrEqual">
            <summary>
            大于或等于
            </summary>
        </member>
        <member name="F:Mtime.MongoDB.ConditionJoin.In">
            <summary>
            在集合中
            </summary>
        </member>
        <member name="F:Mtime.MongoDB.ConditionJoin.NotIn">
            <summary>
            不在集合中
            </summary>
        </member>
        <member name="F:Mtime.MongoDB.ConditionJoin.All">
            <summary>
            必须包含集合中的所有值
            </summary>
        </member>
        <member name="F:Mtime.MongoDB.ConditionJoin.Mod">
            <summary>
            求余匹配，db.things.find( { a : { $mod : [ 10 , 1 ] } } )
            </summary>
        </member>
        <member name="F:Mtime.MongoDB.ConditionJoin.Size">
            <summary>
            匹配数组元素个数
            </summary>
        </member>
        <member name="F:Mtime.MongoDB.ConditionJoin.Exists">
            <summary>
            属性是否存在
            </summary>
        </member>
        <member name="F:Mtime.MongoDB.ConditionJoin.Type">
            <summary>
            属性Bson类型值匹配
            </summary>
        </member>
        <member name="F:Mtime.MongoDB.ConditionJoin.ElemMatch">
            <summary>
            check if an element in an array matches the specified match expression.
            </summary>
        </member>
        <member name="F:Mtime.MongoDB.ConditionJoin.Not">
            <summary>
            对条件取反
            </summary>
        </member>
        <member name="F:Mtime.MongoDB.ConditionJoin.Regex">
            <summary>
            正则表达书匹配
            </summary>
        </member>
        <member name="F:Mtime.MongoDB.ConditionJoin.Where">
            <summary>
            JavaScript代码查询，如：this.Status > 3
            </summary>
        </member>
        <member name="T:Mtime.MongoDB.ConditionBuilder">
            <summary>
            查询条件容器
            </summary>
        </member>
        <member name="M:Mtime.MongoDB.ConditionBuilder.AddOr(Mtime.MongoDB.Document[])">
            <summary>
            或(满足任意一个条件)
            </summary>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.MongoDB.ConditionBuilder.AddNotOr(Mtime.MongoDB.Document[])">
            <summary>
            非或(不满足任何一个条件)
            </summary>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.MongoDB.ConditionBuilder.OrderByNatural(Mtime.MongoDB.SortOrder)">
            <summary>
            按记录插入顺序排序
            </summary>
            <param name="order"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.MongoDB.ConditionBuilder.AddHint(System.String,System.Boolean)">
            <summary>
            强制使用指定的索引
            </summary>
            <param name="key"></param>
            <param name="enableHint"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.MongoDB.ConditionBuilder.Reset">
            <summary>
            清除所有条件和选项
            </summary>
        </member>
        <member name="P:Mtime.MongoDB.ConditionBuilder.Explain">
            <summary>
            true-返回查询计划，false-执行查询，默认false
            </summary>
        </member>
        <member name="M:Mtime.MongoDB.QueryContainer.OrderByNatural(Mtime.MongoDB.SortOrder)">
            <summary>
            按记录插入顺序排序
            </summary>
            <param name="order"></param>
            <returns></returns>
        </member>
        <member name="P:Mtime.MongoDB.QueryContainer.Explain">
            <summary>
            true-返回查询计划，false-执行查询，默认false
            </summary>
        </member>
        <member name="F:Mtime.MongoDB.Bson.BsonDataType.String">
            <summary>
            int32 
            cstring The int32 is the # bytes following (# of bytes in string + 1 for terminating NULL)
            </summary>
        </member>
        <member name="F:Mtime.MongoDB.Bson.BsonDataType.Obj">
            <summary>
            bson object
            </summary>
        </member>
        <member name="F:Mtime.MongoDB.Bson.BsonDataType.Array">
            <summary>
            bson object
            </summary>
        </member>
        <member name="F:Mtime.MongoDB.Bson.BsonDataType.Binary">
            <summary>
            int32 byte byte[]  
            The first int32 is the # of bytes following the byte subtype
            </summary>
        </member>
        <member name="F:Mtime.MongoDB.Bson.BsonDataType.Undefined">
            <summary>
            VOID  
            Conceptually equiValent to Javascript undefined.  Deprecated.
            </summary>
        </member>
        <member name="F:Mtime.MongoDB.Bson.BsonDataType.Oid">
            <summary>
            byte[12]     
            12 byte object id.
            </summary>
        </member>
        <member name="F:Mtime.MongoDB.Bson.BsonDataType.Boolean">
            <summary>
            byte     
            legal values: 0x00 -> false, 0x01 -> true
            </summary>
        </member>
        <member name="F:Mtime.MongoDB.Bson.BsonDataType.Date">
            <summary>
            int64   
            milliseconds since epoch (e.g. new Date.getTime())
            </summary>
        </member>
        <member name="F:Mtime.MongoDB.Bson.BsonDataType.Null">
            <summary>
            VOID   
            Mapped to Null in programming languages which have a Null value or type.  Conceptually equivalent to Javascript null.
            </summary>
        </member>
        <member name="F:Mtime.MongoDB.Bson.BsonDataType.Regex">
            <summary>
            cstring cstring   
            first ctring is regex expression, second cstring are regex options
            </summary>
        </member>
        <member name="F:Mtime.MongoDB.Bson.BsonDataType.Reference">
            <summary>
            int32 cstring byte[12]    
            Deprecated.  Please use a subobject instead
            The int32 is the length in bytes of the cstring.
            The cstring is the Namespace: full collection name.
            The byte array is a 12 byte object id. See note on data_oid.
            </summary>
        </member>
        <member name="F:Mtime.MongoDB.Bson.BsonDataType.Code">
            <summary>
            Int32 cstring
            The int32 is the # bytes following (# of bytes in string + 1 
            for terminating NULL) and then the code as cstring. data_code should 
            be supported in BSON encoders/decoders, but has been deprecated in 
            favor of data_code_w_scope
            </summary>
        </member>
        <member name="F:Mtime.MongoDB.Bson.BsonDataType.Symbol">
            <summary>
            String
            </summary>
        </member>
        <member name="F:Mtime.MongoDB.Bson.BsonDataType.CodeWScope">
            <summary>
            int32 
            int32 cstring bson_object  The first int32 is the total # of
            bytes (size of cstring + size of bson_object + 8 for the two int32s).
            The second int 32 is the size of the cstring (# of bytes in string + 1 for 
            terminating NULL). The cstring is the code. The bson_object is an object 
            mapping identifiers to values, representing the scope in which the code 
            should be evaluated.
            </summary>
        </member>
        <member name="F:Mtime.MongoDB.Bson.BsonDataType.Integer">
            <summary>
            Int32
            </summary>
        </member>
        <member name="F:Mtime.MongoDB.Bson.BsonDataType.Timestamp">
            <summary>
            Int64 - first 4 byte are a timestamp, next 4 byte are an incremented field
            </summary>
        </member>
        <member name="F:Mtime.MongoDB.Bson.BsonDataType.Long">
            <summary>
            Int64 - 64 bit integer 
            </summary>
        </member>
        <member name="F:Mtime.MongoDB.Bson.BsonDataType.MinKey">
            <summary>
            VOID - Special type that compares lower than all other types.
            </summary>
        </member>
        <member name="F:Mtime.MongoDB.Bson.BsonDataType.MaxKey">
            <summary>
            VOID - Special type that compares higher than all other types.
            </summary>
        </member>
        <member name="T:Mtime.Community.Utility.HttpProxy.Protocol.HttpResponeProtocol">
            <summary>
            HTTP/1.1 200 OK\r\n
            ResposneHeader
            \r\n\r\n
            
            如果不是Chunk则根据Header里的长度进行获取
            ResponseContent
            
            如果是chunk数据，则需根据每一块的长度进行获取
            
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.HttpProxy.Protocol.HttpResponeProtocol.Reset">
            <summary>
            重置分析器
            </summary>
        </member>
        <member name="T:Mtime.Community.Utility.HttpProxy.Protocol.HttpResponeProtocol.State">
            <summary>
            协议分析状态
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.HttpProxy.Protocol.HttpResponeProtocol.State.Init">
            <summary>
            初始
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.HttpProxy.Protocol.HttpResponeProtocol.State.Status">
            <summary>
            Status
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.HttpProxy.Protocol.HttpResponeProtocol.State.StatusDescription">
            <summary>
            状态描述
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.HttpProxy.Protocol.HttpResponeProtocol.State.Body">
            <summary>
            内容主体
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.HttpProxy.Protocol.HttpResponeProtocol.State.NormalBody">
            <summary>
            内容主体
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Inflater">
             <summary>
             Inflater is used to decompress data that has been compressed according
             to the "deflate" standard described in rfc1951.
             
             By default Zlib (rfc1950) headers and footers are expected in the input.
             You can use constructor <code> public Inflater(bool noHeader)</code> passing true
             if there is no Zlib header information
            
             The usage is as following.  First you have to set some input with
             <code>SetInput()</code>, then Inflate() it.  If inflate doesn't
             inflate any bytes there may be three reasons:
             <ul>
             <li>IsNeedingInput() returns true because the input buffer is empty.
             You have to provide more input with <code>SetInput()</code>.
             NOTE: IsNeedingInput() also returns true when, the stream is finished.
             </li>
             <li>IsNeedingDictionary() returns true, you have to provide a preset
                dictionary with <code>SetDictionary()</code>.</li>
             <li>IsFinished returns true, the inflater has finished.</li>
             </ul>
             Once the first output byte is produced, a dictionary will not be
             needed at a later stage.
            
             author of the original java version : John Leuner, Jochen Hoenicke
             </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.DECODE_HEADER">
            <summary>
            These are the possible states for an inflater
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.CPLENS">
            <summary>
            Copy lengths for literal codes 257..285
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.CPLEXT">
            <summary>
            Extra bits for literal codes 257..285
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.CPDIST">
            <summary>
            Copy offsets for distance codes 0..29
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.CPDEXT">
            <summary>
            Extra bits for distance codes
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.mode">
            <summary>
            This variable contains the current state.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.readAdler">
            <summary>
            The adler checksum of the dictionary or of the decompressed
            stream, as it is written in the header resp. footer of the
            compressed stream. 
            Only valid if mode is DECODE_DICT or DECODE_CHKSUM.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.neededBits">
            <summary>
            The number of bits needed to complete the current state.  This
            is valid, if mode is DECODE_DICT, DECODE_CHKSUM,
            DECODE_HUFFMAN_LENBITS or DECODE_HUFFMAN_DISTBITS.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.isLastBlock">
            <summary>
            True, if the last block flag was set in the last block of the
            inflated stream.  This means that the stream ends after the
            current block.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.totalOut">
            <summary>
            The total number of inflated bytes.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.totalIn">
            <summary>
            The total number of bytes set with setInput().  This is not the
            value returned by the TotalIn property, since this also includes the
            unprocessed input.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.noHeader">
            <summary>
            This variable stores the noHeader flag that was given to the constructor.
            True means, that the inflated stream doesn't contain a Zlib header or 
            footer.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.#ctor">
            <summary>
            Creates a new inflater or RFC1951 decompressor
            RFC1950/Zlib headers and footers will be expected in the input data
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.#ctor(System.Boolean)">
            <summary>
            Creates a new inflater.
            </summary>
            <param name="noHeader">
            True if no RFC1950/Zlib header and footer fields are expected in the input data
            
            This is used for GZIPed/Zipped input.
            
            For compatibility with
            Sun JDK you should provide one byte of input more than needed in
            this case.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.Reset">
            <summary>
            Resets the inflater so that a new stream can be decompressed.  All
            pending input and output will be discarded.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.DecodeHeader">
            <summary>
            Decodes a zlib/RFC1950 header.
            </summary>
            <returns>
            False if more input is needed.
            </returns>
            <exception cref="T:ICSharpCode.SharpZipLib.SharpZipBaseException">
            The header is invalid.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.DecodeDict">
            <summary>
            Decodes the dictionary checksum after the deflate header.
            </summary>
            <returns>
            False if more input is needed.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.DecodeHuffman">
            <summary>
            Decodes the huffman encoded symbols in the input stream.
            </summary>
            <returns>
            false if more input is needed, true if output window is
            full or the current block ends.
            </returns>
            <exception cref="T:ICSharpCode.SharpZipLib.SharpZipBaseException">
            if deflated stream is invalid.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.DecodeChksum">
            <summary>
            Decodes the adler checksum after the deflate stream.
            </summary>
            <returns>
            false if more input is needed.
            </returns>
            <exception cref="T:ICSharpCode.SharpZipLib.SharpZipBaseException">
            If checksum doesn't match.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.Decode">
            <summary>
            Decodes the deflated stream.
            </summary>
            <returns>
            false if more input is needed, or if finished.
            </returns>
            <exception cref="T:ICSharpCode.SharpZipLib.SharpZipBaseException">
            if deflated stream is invalid.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.SetDictionary(System.Byte[])">
            <summary>
            Sets the preset dictionary.  This should only be called, if
            needsDictionary() returns true and it should set the same
            dictionary, that was used for deflating.  The getAdler()
            function returns the checksum of the dictionary needed.
            </summary>
            <param name="buffer">
            The dictionary.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.SetDictionary(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the preset dictionary.  This should only be called, if
            needsDictionary() returns true and it should set the same
            dictionary, that was used for deflating.  The getAdler()
            function returns the checksum of the dictionary needed.
            </summary>
            <param name="buffer">
            The dictionary.
            </param>
            <param name="index">
            The index into buffer where the dictionary starts.
            </param>
            <param name="count">
            The number of bytes in the dictionary.
            </param>
            <exception cref="T:System.InvalidOperationException">
            No dictionary is needed.
            </exception>
            <exception cref="T:ICSharpCode.SharpZipLib.SharpZipBaseException">
            The adler checksum for the buffer is invalid
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.SetInput(System.Byte[])">
            <summary>
            Sets the input.  This should only be called, if needsInput()
            returns true.
            </summary>
            <param name="buffer">
            the input.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.SetInput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the input.  This should only be called, if needsInput()
            returns true.
            </summary>
            <param name="buffer">
            The source of input data
            </param>
            <param name="index">
            The index into buffer where the input starts.
            </param>
            <param name="count">
            The number of bytes of input to use.
            </param>
            <exception cref="T:System.InvalidOperationException">
            No input is needed.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The index and/or count are wrong.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.Inflate(System.Byte[])">
            <summary>
            Inflates the compressed stream to the output buffer.  If this
            returns 0, you should check, whether IsNeedingDictionary(),
            IsNeedingInput() or IsFinished() returns true, to determine why no
            further output is produced.
            </summary>
            <param name="buffer">
            the output buffer.
            </param>
            <returns>
            The number of bytes written to the buffer, 0 if no further
            output can be produced.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            if buffer has length 0.
            </exception>
            <exception cref="T:System.FormatException">
            if deflated stream is invalid.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.Inflate(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Inflates the compressed stream to the output buffer.  If this
            returns 0, you should check, whether needsDictionary(),
            needsInput() or finished() returns true, to determine why no
            further output is produced.
            </summary>
            <param name="buffer">
            the output buffer.
            </param>
            <param name="offset">
            the offset in buffer where storing starts.
            </param>
            <param name="count">
            the maximum number of bytes to output.
            </param>
            <returns>
            the number of bytes written to the buffer, 0 if no further output can be produced.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            if count is less than 0.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            if the index and / or count are wrong.
            </exception>
            <exception cref="T:System.FormatException">
            if deflated stream is invalid.
            </exception>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.IsNeedingInput">
            <summary>
            Returns true, if the input buffer is empty.
            You should then call setInput(). 
            NOTE: This method also returns true when the stream is finished.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.IsNeedingDictionary">
            <summary>
            Returns true, if a preset dictionary is needed to inflate the input.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.IsFinished">
            <summary>
            Returns true, if the inflater has finished.  This means, that no
            input is needed and no output can be produced.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.Adler">
            <summary>
            Gets the adler checksum.  This is either the checksum of all
            uncompressed bytes returned by inflate(), or if needsDictionary()
            returns true (and thus no output was yet produced) this is the
            adler checksum of the expected dictionary.
            </summary>
            <returns>
            the adler checksum.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.TotalOut">
            <summary>
            Gets the total number of output bytes returned by Inflate().
            </summary>
            <returns>
            the total number of output bytes.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.TotalIn">
            <summary>
            Gets the total number of processed compressed input bytes.
            </summary>
            <returns>
            The total number of bytes of processed input bytes.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.RemainingInput">
            <summary>
            Gets the number of unprocessed input bytes.  Useful, if the end of the
            stream is reached and you want to further process the bytes after
            the deflate stream.
            </summary>
            <returns>
            The number of bytes of the input which have not been processed.
            </returns>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Deflater">
             <summary>
             This is the Deflater class.  The deflater class compresses input
             with the deflate algorithm described in RFC 1951.  It has several
             compression levels and three different strategies described below.
            
             This class is <i>not</i> thread safe.  This is inherent in the API, due
             to the split of deflate and setInput.
             
             author of the original java version : Jochen Hoenicke
             </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.BEST_COMPRESSION">
            <summary>
            The best and slowest compression level.  This tries to find very
            long and distant string repetitions.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.BEST_SPEED">
            <summary>
            The worst but fastest compression level.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.DEFAULT_COMPRESSION">
            <summary>
            The default compression level.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.NO_COMPRESSION">
            <summary>
            This level won't compress at all but output uncompressed blocks.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.DEFLATED">
            <summary>
            The compression method.  This is the only method supported so far.
            There is no need to use this constant at all.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.#ctor">
            <summary>
            Creates a new deflater with default compression level.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.#ctor(System.Int32)">
            <summary>
            Creates a new deflater with given compression level.
            </summary>
            <param name="level">
            the compression level, a value between NO_COMPRESSION
            and BEST_COMPRESSION, or DEFAULT_COMPRESSION.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">if lvl is out of range.</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.#ctor(System.Int32,System.Boolean)">
            <summary>
            Creates a new deflater with given compression level.
            </summary>
            <param name="level">
            the compression level, a value between NO_COMPRESSION
            and BEST_COMPRESSION.
            </param>
            <param name="noZlibHeaderOrFooter">
            true, if we should suppress the Zlib/RFC1950 header at the
            beginning and the adler checksum at the end of the output.  This is
            useful for the GZIP/PKZIP formats.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">if lvl is out of range.</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.Reset">
            <summary>
            Resets the deflater.  The deflater acts afterwards as if it was
            just created with the same compression level and strategy as it
            had before.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.Flush">
            <summary>
            Flushes the current input block.  Further calls to deflate() will
            produce enough output to inflate everything in the current input
            block.  This is not part of Sun's JDK so I have made it package
            private.  It is used by DeflaterOutputStream to implement
            flush().
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.Finish">
            <summary>
            Finishes the deflater with the current input block.  It is an error
            to give more input after this method was called.  This method must
            be called to force all bytes to be flushed.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.SetInput(System.Byte[])">
            <summary>
            Sets the data which should be compressed next.  This should be only
            called when needsInput indicates that more input is needed.
            If you call setInput when needsInput() returns false, the
            previous input that is still pending will be thrown away.
            The given byte array should not be changed, before needsInput() returns
            true again.
            This call is equivalent to <code>setInput(input, 0, input.length)</code>.
            </summary>
            <param name="input">
            the buffer containing the input data.
            </param>
            <exception cref="T:System.InvalidOperationException">
            if the buffer was finished() or ended().
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.SetInput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the data which should be compressed next.  This should be
            only called when needsInput indicates that more input is needed.
            The given byte array should not be changed, before needsInput() returns
            true again.
            </summary>
            <param name="input">
            the buffer containing the input data.
            </param>
            <param name="offset">
            the start of the data.
            </param>
            <param name="count">
            the number of data bytes of input.
            </param>
            <exception cref="T:System.InvalidOperationException">
            if the buffer was Finish()ed or if previous input is still pending.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.SetLevel(System.Int32)">
            <summary>
            Sets the compression level.  There is no guarantee of the exact
            position of the change, but if you call this when needsInput is
            true the change of compression level will occur somewhere near
            before the end of the so far given input.
            </summary>
            <param name="level">
            the new compression level.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.GetLevel">
            <summary>
            Get current compression level
            </summary>
            <returns>Returns the current compression level</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.SetStrategy(ICSharpCode.SharpZipLib.Zip.Compression.DeflateStrategy)">
            <summary>
            Sets the compression strategy. Strategy is one of
            DEFAULT_STRATEGY, HUFFMAN_ONLY and FILTERED.  For the exact
            position where the strategy is changed, the same as for
            SetLevel() applies.
            </summary>
            <param name="strategy">
            The new compression strategy.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.Deflate(System.Byte[])">
            <summary>
            Deflates the current input block with to the given array.
            </summary>
            <param name="output">
            The buffer where compressed data is stored
            </param>
            <returns>
            The number of compressed bytes added to the output, or 0 if either
            IsNeedingInput() or IsFinished returns true or length is zero.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.Deflate(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Deflates the current input block to the given array.
            </summary>
            <param name="output">
            Buffer to store the compressed data.
            </param>
            <param name="offset">
            Offset into the output array.
            </param>
            <param name="length">
            The maximum number of bytes that may be stored.
            </param>
            <returns>
            The number of compressed bytes added to the output, or 0 if either
            needsInput() or finished() returns true or length is zero.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If Finish() was previously called.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If offset or length don't match the array length.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.SetDictionary(System.Byte[])">
            <summary>
            Sets the dictionary which should be used in the deflate process.
            This call is equivalent to <code>setDictionary(dict, 0, dict.Length)</code>.
            </summary>
            <param name="dictionary">
            the dictionary.
            </param>
            <exception cref="T:System.InvalidOperationException">
            if SetInput () or Deflate () were already called or another dictionary was already set.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.SetDictionary(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the dictionary which should be used in the deflate process.
            The dictionary is a byte array containing strings that are
            likely to occur in the data which should be compressed.  The
            dictionary is not stored in the compressed output, only a
            checksum.  To decompress the output you need to supply the same
            dictionary again.
            </summary>
            <param name="dictionary">
            The dictionary data
            </param>
            <param name="index">
            The index where dictionary information commences.
            </param>
            <param name="count">
            The number of bytes in the dictionary.
            </param>
            <exception cref="T:System.InvalidOperationException">
            If SetInput () or Deflate() were already called or another dictionary was already set.
            </exception>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.level">
            <summary>
            Compression level.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.noZlibHeaderOrFooter">
            <summary>
            If true no Zlib/RFC1950 headers or footers are generated
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.state">
            <summary>
            The current state.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.totalOut">
            <summary>
            The total bytes of output written.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.pending">
            <summary>
            The pending output.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.engine">
            <summary>
            The deflater engine.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.Adler">
            <summary>
            Gets the current adler checksum of the data that was processed so far.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.TotalIn">
            <summary>
            Gets the number of input bytes processed so far.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.TotalOut">
            <summary>
            Gets the number of output bytes so far.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.IsFinished">
            <summary>
            Returns true if the stream was finished and no more output bytes
            are available.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.IsNeedingInput">
            <summary>
            Returns true, if the input buffer is empty.
            You should then call setInput(). 
            NOTE: This method can also return true when the stream
            was finished.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Tar.TarOutputStream">
            <summary>
            The TarOutputStream writes a UNIX tar archive as an OutputStream.
            Methods are provided to put entries, and then write their contents
            by writing to this stream using write().
            </summary>
            public
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarOutputStream.#ctor(System.IO.Stream)">
            <summary>
            Construct TarOutputStream using default block factor
            </summary>
            <param name="outputStream">stream to write to</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarOutputStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Construct TarOutputStream with user specified block factor
            </summary>
            <param name="outputStream">stream to write to</param>
            <param name="blockFactor">blocking factor</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarOutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            set the position within the current stream
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarOutputStream.SetLength(System.Int64)">
            <summary>
            set the length of the current stream
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarOutputStream.ReadByte">
            <summary>
            Read a byte from the stream and advance the position within the stream 
            by one byte or returns -1 if at the end of the stream.
            </summary>
            <returns>The byte value or -1 if at end of stream</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarOutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            read bytes from the current stream and advance the position within the 
            stream by the number of bytes read.
            </summary>
            <returns>The total number of bytes read, or zero if at the end of the stream</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarOutputStream.Flush">
            <summary>
            All buffered data is written to destination
            </summary>		
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarOutputStream.Finish">
            <summary>
            Ends the TAR archive without closing the underlying OutputStream.
            The result is that the EOF block of nulls is written.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarOutputStream.Close">
            <summary>
            Ends the TAR archive and closes the underlying OutputStream.
            </summary>
            <remarks>This means that Finish() is called followed by calling the
            TarBuffer's Close().</remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarOutputStream.GetRecordSize">
            <summary>
            Get the record size being used by this stream's TarBuffer.
            </summary>
            <returns>
            The TarBuffer record size.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarOutputStream.PutNextEntry(ICSharpCode.SharpZipLib.Tar.TarEntry)">
            <summary>
            Put an entry on the output stream. This writes the entry's
            header and positions the output stream for writing
            the contents of the entry. Once this method is called, the
            stream is ready for calls to write() to write the entry's
            contents. Once the contents are written, closeEntry()
            <B>MUST</B> be called to ensure that all buffered data
            is completely written to the output stream.
            </summary>
            <param name="entry">
            The TarEntry to be written to the archive.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarOutputStream.CloseEntry">
            <summary>
            Close an entry. This method MUST be called for all file
            entries that contain data. The reason is that we must
            buffer data written to the stream in order to satisfy
            the buffer's block based writes. Thus, there may be
            data fragments still being assembled that must be written
            to the output stream before this entry is closed and the
            next entry written.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarOutputStream.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the current tar archive entry.
            This method simply calls Write(byte[], int, int).
            </summary>
            <param name="value">
            The byte to be written.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes bytes to the current tar archive entry. This method
            is aware of the current entry and will throw an exception if
            you attempt to write bytes past the length specified for the
            current entry. The method is also (painfully) aware of the
            record buffering required by TarBuffer, and manages buffers
            that are not a multiple of recordsize in length, including
            assembling records from small buffers.
            </summary>
            <param name = "buffer">
            The buffer to write to the archive.
            </param>
            <param name = "offset">
            The offset in the buffer from which to get bytes.
            </param>
            <param name = "count">
            The number of bytes to write.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarOutputStream.WriteEofBlock">
            <summary>
            Write an EOF (end of archive) block to the tar archive.
            An EOF block consists of all zeros.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarOutputStream.currBytes">
            <summary>
            bytes written for this entry so far
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarOutputStream.assemblyBufferLength">
            <summary>
            current 'Assembly' buffer length
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarOutputStream.isClosed">
            <summary>
            Flag indicating wether this instance has been closed or not.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarOutputStream.currSize">
            <summary>
            Size for the current entry
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarOutputStream.blockBuffer">
            <summary>
            single block working buffer 
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarOutputStream.assemblyBuffer">
            <summary>
            'Assembly' buffer used to assemble data before writing
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarOutputStream.buffer">
            <summary>
            TarBuffer used to provide correct blocking factor
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarOutputStream.outputStream">
            <summary>
            the destination stream for the archive contents
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarOutputStream.CanRead">
            <summary>
            true if the stream supports reading; otherwise, false.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarOutputStream.CanSeek">
            <summary>
            true if the stream supports seeking; otherwise, false.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarOutputStream.CanWrite">
            <summary>
            true if stream supports writing; otherwise, false.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarOutputStream.Length">
            <summary>
            length of stream in bytes
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarOutputStream.Position">
            <summary>
            gets or sets the position within the current stream.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarOutputStream.RecordSize">
            <summary>
            Get the record size being used by this stream's TarBuffer.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarOutputStream.IsEntryOpen">
            <summary>
            Get a value indicating wether an entry is open, requiring more data to be written.
            </summary>
        </member>
        <member name="T:Mtime.Community.Utility.HttpCompress.GZipFilter">
            <summary>
            This is a little filter to support HTTP compression using GZip
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.HttpCompress.GZipFilter.m_stream">
            <summary>
            compression stream member
            has to be a member as we can only have one instance of the
            actual filter class
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.HttpCompress.GZipFilter.#ctor(System.IO.Stream)">
            <summary>
            Primary constructor.  Need to pass in a stream to wrap up with gzip.
            </summary>
            <param name="baseStream">The stream to wrap in gzip.  Must have CanWrite.</param>
        </member>
        <member name="M:Mtime.Community.Utility.HttpCompress.GZipFilter.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write content to the stream and have it compressed using gzip.
            </summary>
            <param name="buffer">The bytes to write</param>
            <param name="offset">The offset into the buffer to start reading bytes</param>
            <param name="count">The number of bytes to write</param>
        </member>
        <member name="M:Mtime.Community.Utility.HttpCompress.GZipFilter.Close">
            <summary>
            Closes this Filter and calls the base class implementation.
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.HttpCompress.GZipFilter.Flush">
            <summary>
            Flushes the stream out to underlying storage
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.HttpCompress.GZipFilter.ContentEncoding">
            <summary>
            The Http name of this encoding.  Here, gzip.
            </summary>
        </member>
        <member name="T:Mtime.Community.Utility.XThread.XThreadPool">
            <summary>
            自定义线程池
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.XThread.XThreadPool.#ctor(System.Int32)">
            <summary>
            初始化类型
            </summary>
            <param name="count">线程池线程数</param>
        </member>
        <member name="M:Mtime.Community.Utility.XThread.XThreadPool.Start(System.Object,System.Threading.WaitCallback)">
            <summary>
            请求线程执行
            </summary>
            <param name="useradata">用户数据</param>
            <param name="callback">线程操作回调</param>
        </member>
        <member name="M:Mtime.Community.Utility.XThread.XThreadPool.GetThread">
            <summary>
            获取一个线程
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.XThread.XThreadPool.Dispose">
            <summary>
            资源释放
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.XThread.XThreadPool.Count">
            <summary>
            线程数
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.XThread.XThreadPool.List">
            <summary>
            线程列表
            </summary>
        </member>
        <member name="T:Mtime.Community.Utility.XThread.XThreadExceptionCallback">
            <summary>
            异常回调
            </summary>
            <param name="thread">线程数据</param>
            <param name="exception">异常</param>
        </member>
        <member name="T:Mtime.Community.Utility.XThread.XThreadItemCompleted">
            <summary>
            一个项执行完成
            </summary>
            <param name="thread">一个线程项执行完成</param>
        </member>
        <member name="T:Mtime.Community.Utility.URLRewriter.Config.RewriterRuleCollection">
            <summary>
            RewriterRule对象集合
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.URLRewriter.Config.RewriterRuleCollection.Add(Mtime.Community.Utility.URLRewriter.Config.RewriterRule)">
            <summary>
            添加一个实例到集合
            </summary>
            <param name="r">一个RewriterRule实例.</param>
        </member>
        <member name="P:Mtime.Community.Utility.URLRewriter.Config.RewriterRuleCollection.Item(System.Int32)">
            <summary>
            根据Index选取实例
            </summary>
        </member>
        <member name="T:Rss.RssItemCollection">
            <summary>A strongly typed collection of <see cref="T:Rss.RssItem"/> objects</summary>
        </member>
        <member name="M:Rss.RssItemCollection.Add(Rss.RssItem)">
            <summary>Adds a specified item to this collection.</summary>
            <param name="item">The item to add.</param>
            <returns>The zero-based index of the added item.</returns>
        </member>
        <member name="M:Rss.RssItemCollection.Contains(Rss.RssItem)">
            <summary>Determines whether the RssItemCollection contains a specific element.</summary>
            <param name="rssItem">The RssItem to locate in the RssItemCollection.</param>
            <returns>true if the RssItemCollection contains the specified value; otherwise, false.</returns>
        </member>
        <member name="M:Rss.RssItemCollection.CopyTo(Rss.RssItem[],System.Int32)">
            <summary>Copies the entire RssItemCollection to a compatible one-dimensional <see cref="T:System.Array"/>, starting at the specified index of the target array.</summary>
            <param name="array">The one-dimensional RssItem Array that is the destination of the elements copied from RssItemCollection. The Array must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">array is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero.</exception>
            <exception cref="T:System.ArgumentException">array is multidimensional. -or- index is equal to or greater than the length of array.-or-The number of elements in the source RssItemCollection is greater than the available space from index to the end of the destination array.</exception>
        </member>
        <member name="M:Rss.RssItemCollection.IndexOf(Rss.RssItem)">
            <summary>Searches for the specified RssItem and returns the zero-based index of the first occurrence within the entire RssItemCollection.</summary>
            <param name="rssItem">The RssItem to locate in the RssItemCollection.</param>
            <returns>The zero-based index of the first occurrence of RssItem within the entire RssItemCollection, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Rss.RssItemCollection.Insert(System.Int32,Rss.RssItem)">
            <summary>Inserts an item into this collection at a specified index.</summary>
            <param name="index">The zero-based index of the collection at which to insert the item.</param>
            <param name="item">The item to insert into this collection.</param>
        </member>
        <member name="M:Rss.RssItemCollection.Remove(Rss.RssItem)">
            <summary>Removes a specified item from this collection.</summary>
            <param name="item">The item to remove.</param>
        </member>
        <member name="M:Rss.RssItemCollection.LatestPubDate">
            <summary>The latest pubDate in the items collection</summary>
            <value>The latest pubDate -or- RssDefault.DateTime if all item pubDates are not defined</value>
        </member>
        <member name="M:Rss.RssItemCollection.OldestPubDate">
            <summary>The oldest pubDate in the items collection</summary>
            <value>The oldest pubDate -or- RssDefault.DateTime if all item pubDates are not defined</value>
        </member>
        <member name="M:Rss.RssItemCollection.CalculatePubDates">
            <summary>Calculates the oldest and latest pubdates</summary>
        </member>
        <member name="P:Rss.RssItemCollection.Item(System.Int32)">
            <summary>Gets or sets the item at a specified index.<para>In C#, this property is the indexer for the class.</para></summary>
            <param name="index">The index of the collection to access.</param>
            <value>An item at each valid index.</value>
            <remarks>This method is an indexer that can be used to access the collection.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index.</exception>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.ImageHelper.IsTransparentGif(System.Drawing.Imaging.ColorPalette)">
            <summary>
            IsTransparentPalette(objImage.Palette)
            </summary>
            <param name="palette"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.ImageHelper.Assert(System.Drawing.Bitmap)">
            <summary>
            avoid Exception:image has an indexed pixel format or its format is undefined.
            </summary>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.ImageHelper.GetThumbnailImage(System.Drawing.Bitmap,System.Drawing.Size)">
            <summary>
            获取省略图（替代Bitmap.GetThumbnailImage）
            </summary>
            <param name="sourceImage"></param>
            <param name="targetSize"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.ImageHelper.GetThumbnailImage(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
             获取省略图（替代Bitmap.GetThumbnailImage）
            </summary>
            <param name="sourceImage"></param>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.ImageHelper.ScaleToFit(System.Drawing.Size,System.Int32,System.Int32,System.Drawing.Rectangle@,System.Drawing.Rectangle@)">
            <summary>
            等比缩放
            </summary>
            <param name="srcImageSize"></param>
            <param name="destWidth"></param>
            <param name="destHeight"></param>
            <param name="srcRectangle"></param>
            <param name="destRectangle"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Mtime.Community.Utility.Helper.ImageHelper.FixWidthTrimHeight(System.Drawing.Size,System.Int32,System.Int32,System.Drawing.Rectangle@,System.Drawing.Rectangle@)" -->
        <member name="M:Mtime.Community.Utility.Helper.ImageHelper.FixWidth(System.Drawing.Size,System.Int32,System.Int32,System.Drawing.Rectangle@,System.Drawing.Rectangle@)">
            <summary>
            定宽等比缩放，不限制高
            </summary>
            <param name="srcImageSize"></param>
            <param name="destWidth"></param>
            <param name="destHeight"></param>
            <param name="srcRectangle"></param>
            <param name="destRectangle"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Mtime.Community.Utility.Helper.ImageHelper.FixWidthOrFixHeight(System.Drawing.Size,System.Int32,System.Int32,System.Drawing.Rectangle@,System.Drawing.Rectangle@)" -->
        <member name="M:Mtime.Community.Utility.Helper.ImageHelper.FixWidthAndFixHeight(System.Drawing.Size,System.Int32,System.Int32,System.Drawing.Rectangle@,System.Drawing.Rectangle@)">
            <summary>
            固定宽和高，如果小于则放大，宽截取中间的需求宽
            </summary>
            <param name="srcImageSize"></param>
            <param name="destWidth"></param>
            <param name="destHeight"></param>
            <param name="srcRectangle"></param>
            <param name="destRectangle"></param>
            <returns></returns>
        </member>
        <member name="T:Mtime.Community.Utility.CommonUtility">
            <summary>
            常用方法类
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.CommonUtility.GetLocalTime(System.Double)">
            <summary>
            取得当前本地时间
            用于显示当前登录会员的本地时间
            </summary>
            <param name="utc">时区</param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.CommonUtility.GetLocalTime(System.Double,System.DateTime)">
            <summary>
            取得指定的本地时间
            用于显示指定的本地时间
            </summary>
            <param name="utc">时区</param>
            <param name="theDateTime">指定的日期时间</param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.CommonUtility.GetUTCDescription(System.Double)">
            <summary>
            取得UTC描述
            </summary>
            <param name="utc">时区</param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.CommonUtility.SetInputBehavior(System.Web.UI.WebControls.WebControl)">
            <summary>
            设置输入框样式
            </summary>
            <param name="obj">输入框</param>
        </member>
        <member name="M:Mtime.Community.Utility.CommonUtility.BackSlashToSlash(System.String)">
            <summary>
            将字符串中的反斜杆（\）转化为斜杠（/）
            </summary>
            <param name="src">待转化的字符串</param>
            <returns>转换后的字符串</returns>
        </member>
        <member name="M:Mtime.Community.Utility.CommonUtility.BuildPageNavigation(System.Int32,System.Int32,System.Int32)">
            <summary>
            生成页导航
            </summary>
            <param name="RecordCount">总记录数</param>
            <param name="PageIndex">页索引</param>
            <param name="pageSize">页尺寸</param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.CommonUtility.GetNextPage(System.Int32,System.Int32,System.Int32)">
            <summary>
            获取下一页的起始记录号;
            </summary>
            <param name="RecordCount">总记录数</param>
            <param name="StartAt">本页的起始记录</param>
            <param name="PageSize">页大小</param>
            <returns>下一页的起始记录号(如果没有下一页返回0)</returns>
        </member>
        <member name="M:Mtime.Community.Utility.CommonUtility.GetNextPageIndex(System.Int32,System.Int32,System.Int32)">
            <summary>
            得到下一页的页索引
            </summary>
            <param name="RecordCount">总记录数</param>
            <param name="StartAt">本页的起始记录</param>
            <param name="PageSize">页大小</param>
            <returns>得到下一页的页索引，如果没有返回0</returns>
        </member>
        <member name="M:Mtime.Community.Utility.CommonUtility.GetPrevPageIndex(System.Int32,System.Int32,System.Int32)">
            <summary>
            得到上一页的页索引
            </summary>
            <param name="RecordCount">总记录数</param>
            <param name="StartAt">本页的起始记录</param>
            <param name="PageSize">页大小</param>
            <returns>得到上一页的页索引，如果没有返回0</returns>
        </member>
        <member name="M:Mtime.Community.Utility.CommonUtility.GetPrevPage(System.Int32,System.Int32,System.Int32)">
            <summary>
            获取上一页的起始记录号;
            </summary>
            <param name="RecordCount">总记录数</param>
            <param name="StartAt">本页的起始记录</param>
            <param name="PageSize">页大小</param>
            <returns>上一页起始记录号(如果没有上一页返回0)</returns>
        </member>
        <member name="M:Mtime.Community.Utility.CommonUtility.GetConstellation(System.String)">
            <summary>
            根据星座的中文名返回星座的类型
            </summary>
            <param name="constellationDescription"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.CommonUtility.GetBloodType(System.String)">
            <summary>
            根据血型描述获取血型
            </summary>
            <param name="bloodDescription"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.CommonUtility.IsFamousSearchEngine(System.String)">
            <summary>
            判断是否爬虫
            </summary>
            <param name="UserAgent"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.CommonUtility.GetRelative(System.DateTime,System.Boolean)">
            <summary>
            返回输入时间的相对时间,返回的格式#年#个月#日#时#分前/后
            </summary>
            <param name="time">输入时间</param>
            <param name="isShort">True返回短格式,False返回长格式</param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.CommonUtility.GetThisWeekNo">
            <summary>
            取得本周在一年中的周数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.CommonUtility.GetWeekFirstDay">
            <summary>
            取得本周的第一天
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.CommonUtility.MonthStringToIntString(System.String)">
            <summary>
            将英文月份转换为数字月份
            </summary>
            <param name="strMonth"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.CommonUtility.IsNullOrEmpty(System.Object)">
            <summary>
            判读对象是否有数据
            </summary>
            <param name="o">目前支持类型：DataSet，DataTable，String</param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.CommonUtility.UtcNowTimestamp">
            <summary>
            获取当前的UTC时间戳
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.CommonUtility.UtcTimestamp(System.DateTime)">
            <summary>
            
            </summary>
            <param name="utcTime"></param>
            <returns></returns>
        </member>
        <member name="T:SupportClass">
            <summary>
            Contains conversion support elements such as classes, interfaces and static methods.
            </summary>
        </member>
        <member name="M:SupportClass.ToByteArray(System.SByte[])">
            <summary>
            Converts an array of sbytes to an array of bytes
            </summary>
            <param name="sbyteArray">The array of sbytes to be converted</param>
            <returns>The new array of bytes</returns>
        </member>
        <member name="M:SupportClass.ToByteArray(System.String)">
            <summary>
            Converts a string to an array of bytes
            </summary>
            <param name="sourceString">The string to be converted</param>
            <returns>The new array of bytes</returns>
        </member>
        <member name="M:SupportClass.ToByteArray(System.Object[])">
            <summary>
            Converts a array of object-type instances to a byte-type array.
            </summary>
            <param name="tempObjectArray">Array to convert.</param>
            <returns>An array of byte type elements.</returns>
        </member>
        <member name="M:SupportClass.URShift(System.Int32,System.Int32)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:SupportClass.URShift(System.Int32,System.Int64)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:SupportClass.URShift(System.Int64,System.Int32)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:SupportClass.URShift(System.Int64,System.Int64)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:SupportClass.Identity(System.Int64)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:SupportClass.Identity(System.UInt64)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:SupportClass.Identity(System.Single)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:SupportClass.Identity(System.Double)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:SupportClass.GetCharsFromString(System.String,System.Int32,System.Int32,System.Char[],System.Int32)">
            <summary>
            Copies an array of chars obtained from a String into a specified array of chars
            </summary>
            <param name="sourceString">The String to get the chars from</param>
            <param name="sourceStart">Position of the String to start getting the chars</param>
            <param name="sourceEnd">Position of the String to end getting the chars</param>
            <param name="destinationArray">Array to return the chars</param>
            <param name="destinationStart">Position of the destination array of chars to start storing the chars</param>
            <returns>An array of chars</returns>
        </member>
        <member name="M:SupportClass.SetCapacity(System.Collections.ArrayList,System.Int32)">
            <summary>
            Sets the capacity for the specified ArrayList
            </summary>
            <param name="vector">The ArrayList which capacity will be set</param>
            <param name="newCapacity">The new capacity value</param>
        </member>
        <member name="M:SupportClass.ToSByteArray(System.Byte[])">
            <summary>
            Receives a byte array and returns it transformed in an sbyte array
            </summary>
            <param name="byteArray">Byte array to process</param>
            <returns>The transformed array</returns>
        </member>
        <member name="T:Mtime.Community.Utility.zxing.qrcode.decoder.ErrorCorrectionLevelInternal">
            <summary> <p>See ISO 18004:2006, 6.5.1. This enum encapsulates the four error correction levels
            defined by the QR code standard.</p>
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="F:Mtime.Community.Utility.zxing.qrcode.decoder.ErrorCorrectionLevelInternal.L">
            <summary> L = ~7% correction</summary>
        </member>
        <member name="F:Mtime.Community.Utility.zxing.qrcode.decoder.ErrorCorrectionLevelInternal.M">
            <summary> M = ~15% correction</summary>
        </member>
        <member name="F:Mtime.Community.Utility.zxing.qrcode.decoder.ErrorCorrectionLevelInternal.Q">
            <summary> Q = ~25% correction</summary>
        </member>
        <member name="F:Mtime.Community.Utility.zxing.qrcode.decoder.ErrorCorrectionLevelInternal.H">
            <summary> H = ~30% correction</summary>
        </member>
        <member name="M:Mtime.Community.Utility.zxing.qrcode.decoder.ErrorCorrectionLevelInternal.forBits(System.Int32)">
            <param name="bits">int containing the two bits encoding a QR Code's error correction level
            </param>
            <returns> {@link ErrorCorrectionLevelInternal} representing the encoded error correction level
            </returns>
        </member>
        <member name="T:Mtime.Community.Utility.zxing.common.BitMatrixInternal">
            <summary> <p>Represents a 2D matrix of bits. In function arguments below, and throughout the common
            module, x is the column position, and y is the row position. The ordering is always x, y.
            The origin is at the top-left.</p>
            
            <p>Internally the bits are represented in a 1-D array of 32-bit ints. However, each row begins
            with a new int. This is done intentionally so that we can copy out a row into a BitArray very
            efficiently.</p>
            
            <p>The ordering of bits is row-major. Within each int, the least significant bits are used first,
            meaning they represent lower x values. This is compatible with BitArray's implementation.</p>
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>  dswitkin@google.com (Daniel Switkin)
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="M:Mtime.Community.Utility.zxing.common.BitMatrixInternal.get_Renamed(System.Int32,System.Int32)">
            <summary> <p>Gets the requested bit, where true means black.</p>
            
            </summary>
            <param name="x">The horizontal component (i.e. which column)
            </param>
            <param name="y">The vertical component (i.e. which row)
            </param>
            <returns> value of given bit in matrix
            </returns>
        </member>
        <member name="M:Mtime.Community.Utility.zxing.common.BitMatrixInternal.set_Renamed(System.Int32,System.Int32)">
            <summary> <p>Sets the given bit to true.</p>
            
            </summary>
            <param name="x">The horizontal component (i.e. which column)
            </param>
            <param name="y">The vertical component (i.e. which row)
            </param>
        </member>
        <member name="M:Mtime.Community.Utility.zxing.common.BitMatrixInternal.flip(System.Int32,System.Int32)">
            <summary> <p>Flips the given bit.</p>
            
            </summary>
            <param name="x">The horizontal component (i.e. which column)
            </param>
            <param name="y">The vertical component (i.e. which row)
            </param>
        </member>
        <member name="M:Mtime.Community.Utility.zxing.common.BitMatrixInternal.clear">
            <summary> Clears all bits (sets to false).</summary>
        </member>
        <member name="M:Mtime.Community.Utility.zxing.common.BitMatrixInternal.setRegion(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary> <p>Sets a square region of the bit matrix to true.</p>
            
            </summary>
            <param name="left">The horizontal position to begin at (inclusive)
            </param>
            <param name="top">The vertical position to begin at (inclusive)
            </param>
            <param name="width">The width of the region
            </param>
            <param name="height">The height of the region
            </param>
        </member>
        <member name="M:Mtime.Community.Utility.zxing.common.BitMatrixInternal.getRow(System.Int32,Mtime.Community.Utility.zxing.common.BitArray)">
            <summary> A fast method to retrieve one row of data from the matrix as a BitArray.
            
            </summary>
            <param name="y">The row to retrieve
            </param>
            <param name="row">An optional caller-allocated BitArray, will be allocated if null or too small
            </param>
            <returns> The resulting BitArray - this reference should always be used even when passing
            your own row
            </returns>
        </member>
        <member name="P:Mtime.Community.Utility.zxing.common.BitMatrixInternal.Width">
            <returns> The width of the matrix
            </returns>
        </member>
        <member name="P:Mtime.Community.Utility.zxing.common.BitMatrixInternal.Height">
            <returns> The height of the matrix
            </returns>
        </member>
        <member name="P:Mtime.Community.Utility.zxing.common.BitMatrixInternal.Dimension">
            <summary> This method is for compatibility with older code. It's only logical to call if the matrix
            is square, so I'm throwing if that's not the case.
            
            </summary>
            <returns> row/column dimension of this matrix
            </returns>
        </member>
        <member name="T:Mtime.Community.Utility.OAuth.TokenResult">
            <summary>
            Token验证返回值
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.OAuth.TokenResult.Success">
            <summary>
            正常
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.OAuth.TokenResult.TokenExpired">
            <summary>
            Token已过期
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.OAuth.TokenResult.TokenUsed">
            <summary>
            Token已被占用
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.OAuth.TokenResult.TokenRevoked">
            <summary>
            Token已被回收
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.OAuth.TokenResult.TokenRejected">
            <summary>
            Token被拒绝
            </summary>
        </member>
        <member name="T:Mtime.Community.Utility.Client.TigerHashKeyTransformer">
            <summary>
            A key transformer which converts the item keys into their Tiger hash.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.StringUtils.ContainsWhiteSpace(System.String)">
            <summary>
            Determines whether the string contains white space.
            </summary>
            <param name="s">The string to test for white space.</param>
            <returns>
            	<c>true</c> if the string contains white space; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.StringUtils.IsWhiteSpace(System.String)">
            <summary>
            Determines whether the string is all white space. Empty string will return false.
            </summary>
            <param name="s">The string to test whether it is all white space.</param>
            <returns>
            	<c>true</c> if the string is all white space; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.StringUtils.EnsureEndsWith(System.String,System.String)">
            <summary>
            Ensures the target string ends with the specified string.
            </summary>
            <param name="target">The target.</param>
            <param name="value">The value.</param>
            <returns>The target string with the value string at the end.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.StringUtils.IsNullOrEmpty(System.Data.SqlTypes.SqlString)">
            <summary>
            Determines whether the SqlString is null or empty.
            </summary>
            <param name="s">The string.</param>
            <returns>
            	<c>true</c> if the SqlString is null or empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.StringUtils.IfNotNullOrEmpty(System.String,System.Action{System.String})">
            <summary>
            Perform an action if the string is not null or empty.
            </summary>
            <param name="value">The value.</param>
            <param name="action">The action to perform.</param>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.StringUtils.Indent(System.String,System.Int32)">
            <summary>
            Indents the specified string.
            </summary>
            <param name="s">The string to indent.</param>
            <param name="indentation">The number of characters to indent by.</param>
            <returns></returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.StringUtils.Indent(System.String,System.Int32,System.Char)">
            <summary>
            Indents the specified string.
            </summary>
            <param name="s">The string to indent.</param>
            <param name="indentation">The number of characters to indent by.</param>
            <param name="indentChar">The indent character.</param>
            <returns></returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.StringUtils.NumberLines(System.String)">
            <summary>
            Numbers the lines.
            </summary>
            <param name="s">The string to number.</param>
            <returns></returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.StringUtils.NullEmptyString(System.String)">
            <summary>
            Nulls an empty string.
            </summary>
            <param name="s">The string.</param>
            <returns>Null if the string was null, otherwise the string unchanged.</returns>
        </member>
        <member name="T:Newtonsoft.Json.JavaScriptArray">
            <summary>
            Represents a JavaScript array.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptArray.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JavaScriptObject"/> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptArray.#ctor(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JavaScriptArray"/> class that
            contains elements copied from the specified collection.
            </summary>
            <param name="collection">The collection whose elements are copied to the new array.</param>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptArray.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JavaScriptArray"/> class that
            is empty and has the specified initial capacity.
            </summary>
            <param name="capacity">The number of elements that the new array can initially store.</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.XmlNodeConverter.IsNamespaceAttribute(System.String,System.String@)">
            <summary>
            Checks if the attributeName is a namespace attribute.
            </summary>
            <param name="attributeName">Attribute name to test.</param>
            <param name="prefix">The attribute name prefix if it has one, otherwise an empty string.</param>
            <returns>True if attribute name is for a namespace attribute, otherwise false.</returns>
        </member>
        <member name="T:GifUtility.ApplicationEx">
            <summary>
            应用程序扩展(Application Extension)-这是提供给应用程序自己使用的
            （需要89a版本），应用程序可以在这里定义自己的标识、信息等   
            </summary>  
        </member>
        <member name="F:GifUtility.ApplicationEx.BlockSize">
            <summary>
            Block Size - 块大小，固定值11
            </summary>
        </member>
        <member name="F:GifUtility.ApplicationEx.ApplicationIdentifier">
            <summary>
            Application Identifier - 用来鉴别应用程序自身的标识(8个连续ASCII字符)
            </summary>      
        </member>
        <member name="F:GifUtility.ApplicationEx.ApplicationAuthenticationCode">
            <summary>
            Application Authentication Code - 应用程序定义的特殊标识码(3个连续ASCII字符)
            </summary>
        </member>
        <member name="F:GifUtility.ApplicationEx.Datas">
            <summary>
            应用程序自定义数据块 - 一个或多个数据块组成，保存应用程序自己定义的数据
            </summary>
        </member>
        <member name="M:GifUtility.ApplicationEx.GetBuffer">
            <summary>
            获取应用程序扩展的字节数组
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.ClientHelper.LoadJsFile(System.String)">
            <summary>
            装载Js文件
            </summary>
            <param name="scriptFileUrl">Js文件路径</param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.ClientHelper.LoadSystemJsFile(System.String)">
            <summary>
            装载Js文件
            </summary>
            <param name="scriptFileUrl">Js文件路径</param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.ClientHelper.LoadSystemJsFile(System.String,System.Boolean)">
            <summary>
            装载Js文件
            </summary>
            <param name="scriptFileUrl">Js文件路径</param>
            <param name="onlyIE">仅仅在IE下使用</param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.ClientHelper.LoadCssFile(System.String)">
            <summary>
            装载Css文件
            </summary>
            <param name="styleFileUrl">css文件路径</param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.ClientHelper.LoadCssFile(System.String,System.Boolean)">
            <summary>
            装载Css文件
            </summary>
            <param name="styleFileUrl">Css文件路径</param>
            <param name="onlyIE">仅仅在IE下使用</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Mtime.Community.Utility.Components.ThreadSafeQueue`1" -->
        <member name="T:Mtime.MongoDB.Protocol.QueryMessage">
            <summary>
            Description of QueryMessage.
            </summary>
            <remarks>
               MsgHeader header;                 // standard message header
               int32     opts;                   // query options.  See QueryOptions for values
               cstring   fullCollectionName;     // "dbname.collectionname"
               int32     numberToSkip;           // number of documents to skip when returning results
               int32     numberToReturn;         // number of documents to return in the first OP_REPLY
               BSON      query ;                 // query object.  See below for details.
             [ BSON      returnFieldSelector; ]  // OPTIONAL : selector indicating the fields to return.  See below for details.
            </remarks>
        </member>
        <member name="P:Mtime.MongoDB.Protocol.QueryMessage.FullCollectionName">
            <summary>
            表的全路径名，如："dbname.collectionname"
            </summary>
        </member>
        <member name="P:Mtime.MongoDB.Protocol.QueryMessage.NumberToReturn">
            <summary>
            如果为负数，服务器返回绝对值 = numberToReturn 的记录数，并自动关闭Cursor;
            If numberToReturn is 1 the server will treat it as -1 
            </summary>
        </member>
        <member name="P:Mtime.MongoDB.Protocol.QueryMessage.ReturnFields">
            <summary>
            返回列选择器，可选参数
            </summary>
        </member>
        <member name="F:Mtime.MongoDB.Protocol.QueryOptions.TailableCursor">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mtime.MongoDB.Protocol.QueryOptions.OplogReplay">
            <summary>
            internal replication use only - drivers should not implement
            </summary>
        </member>
        <member name="T:Mtime.Serialization.SerializationWriter">
            <summary>
            Class which defines the writer for serialized data using the fast serialization optimization.
            A SerializationWriter instance is used to store values and objects in a byte array.
            <br/><br/>
            Once an instance is created, use the various methods to store the required data.
            ToArray() will return a byte[] containing all of the data required for deserialization.
            This can be stored in the SerializationInfo parameter in an ISerializable.GetObjectData() method.
            <para/>
            As an alternative to ToArray(), if you want to apply some post-processing to the serialized bytes, 
            such as compression, call UpdateHeader() first to ensure that the string and object token table 
            sizes are updated in the header, and then cast BaseStream to MemoryStream. You can then access the
            MemoryStream's internal buffer as follows:
            <para/>
            <example><code>
            writer.UpdateHeader();
            MemoryStream stream = (MemoryStream) writer.BaseStream;
            serializedData = MyCompressor.Compress(stream.GetBuffer(), (int) stream.Length);
            </code></example>
            </summary>
        </member>
        <member name="F:Mtime.Serialization.SerializationWriter.HighestOptimizable16BitValue">
            <summary>
            Holds the highest Int16 that can be optimized into less than the normal 2 bytes
            </summary>
        </member>
        <member name="F:Mtime.Serialization.SerializationWriter.HighestOptimizable32BitValue">
            <summary>
            Holds the highest Int32 that can be optimized into less than the normal 4 bytes
            </summary>
        </member>
        <member name="F:Mtime.Serialization.SerializationWriter.HighestOptimizable64BitValue">
            <summary>
            Holds the highest Int64 that can be optimized into less than the normal 8 bytes
            </summary>
        </member>
        <member name="F:Mtime.Serialization.SerializationWriter.DefaultCapacity">
            <summary>
            Default capacity for the underlying MemoryStream
            </summary>
        </member>
        <member name="F:Mtime.Serialization.SerializationWriter.DefaultOptimizeForSize">
            <summary>
            The Default setting for the OptimizeForSize property.
            </summary>
        </member>
        <member name="F:Mtime.Serialization.SerializationWriter.DefaultPreserveDecimalScale">
            <summary>
            The Default setting for the PreserveDecimalScale property.
            </summary>
        </member>
        <member name="F:Mtime.Serialization.SerializationWriter.typeSurrogates">
            <summary>
            Holds a list of optional IFastSerializationTypeSurrogate instances which SerializationWriter and SerializationReader will use to serialize objects
            not directly supported. It is important to use the same list on both client and server ends to ensure
            that the same surrogated-types are supported.
            </summary>
        </member>
        <member name="F:Mtime.Serialization.SerializationWriter.DateYearMask">
            <summary>
            Section masks used for packing DateTime values
            </summary>
        </member>
        <member name="F:Mtime.Serialization.SerializationWriter.IsNegativeSection">
            <summary>
            Section masks used for packing TimeSpan values
            </summary>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.DumpTypeUsage">
            <summary>
            Dumps the type usage.
            </summary>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.#ctor">
            <summary>
            Creates a FastSerializer with the Default Capacity (1kb)
            </summary>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.#ctor(System.Int32)">
            <summary>
            Creates a FastSerializer with the specified capacity
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.#ctor(System.IO.Stream)">
            <summary>
            Creates a FastSerializer around the specified stream
            Will allow updating of header info if the stream is seekable
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Creates a FastSerializer around the specified stream
            Notes:
            If the stream is not seekable then the allowUpdateHeader parameter is ignored
            </summary>
            <param name="stream">The stream in which to store data</param>
            <param name="allowUpdateHeader">true if token table presize 
            information can be stored; false otherwise</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.Write(System.Collections.ArrayList)">
            <summary>
            Writes an ArrayList into the stream using the fewest number of bytes possible.
            Stored Size: 1 byte upwards depending on data content
            Notes:
            A null Arraylist takes 1 byte.
            An empty ArrayList takes 2 bytes.
            The contents are stored using WriteOptimized(ArrayList) which should be used
            if the ArrayList is guaranteed never to be null.
            </summary>
            <param name="value">The ArrayList to store.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.Write(System.Collections.BitArray)">
            <summary>
            Writes a BitArray value into the stream using the fewest number of bytes possible.
            Stored Size: 1 byte upwards depending on data content
            Notes:
            A null BitArray takes 1 byte.
            An empty BitArray takes 2 bytes.
            </summary>
            <param name="value">The BitArray value to store.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.Write(System.Collections.Specialized.BitVector32)">
            <summary>
            Writes a BitVector32 into the stream.
            Stored Size: 4 bytes.
            </summary>
            <param name="value">The BitVector32 to store.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.Write(System.DateTime)">
            <summary>
            Writes a DateTime value into the stream.
            Stored Size: 8 bytes
            </summary>
            <param name="value">The DateTime value to store.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.Write(System.Guid)">
            <summary>
            Writes a Guid into the stream.
            Stored Size: 16 bytes.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.Write(Mtime.Serialization.IOwnedDataSerializable,System.Object)">
            <summary>
            Allows any object implementing IOwnedDataSerializable to serialize itself
            into this SerializationWriter.
            A context may also be used to give the object an indication of what data
            to store. As an example, using a BitVector32 gives a list of flags and
            the object can conditionally store data depending on those flags.
            </summary>
            <param name="target">The IOwnedDataSerializable object to ask for owned data</param>
            <param name="context">An arbtritrary object but BitVector32 recommended</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.WriteObject(System.Object)">
            <summary>
            Stores an object into the stream using the fewest number of bytes possible.
            Stored Size: 1 byte upwards depending on type and/or content.
            
            1 byte: null, DBNull.Value, Boolean
            
            1 to 2 bytes: Int16, UInt16, Byte, SByte, Char, 
            
            1 to 4 bytes: Int32, UInt32, Single, BitVector32
            
            1 to 8 bytes: DateTime, TimeSpan, Double, Int64, UInt64
            
            1 or 16 bytes: Guid
            
            1 plus content: string, object[], byte[], char[], BitArray, Type, ArrayList
            
            Any other object be stored using a .Net Binary formatter but this should 
            only be allowed as a last resort:
            Since this is effectively a different serialization session, there is a 
            possibility of the same shared object being serialized twice or, if the 
            object has a reference directly or indirectly back to the parent object, 
            there is a risk of looping which will throw an exception.
            
            The type of object is checked with the most common types being checked first.
            Each 'section' can be reordered to provide optimum speed but the check for
            null should always be first and the default serialization always last.
            
            Once the type is identified, a SerializedType byte is stored in the stream
            followed by the data for the object (certain types/values may not require
            storage of data as the SerializedType may imply the value).
            
            For certain objects, if the value is within a certain range then optimized
            storage may be used. If the value doesn't meet the required optimization
            criteria then the value is stored directly.
            The checks for optimization may be disabled by setting the OptimizeForSize
            property to false in which case the value is stored directly. This could 
            result in a slightly larger stream but there will be a speed increate to
            compensate.
            </summary>
            <param name="value">The object to store.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.Write(System.String)">
            <summary>
            Calls WriteOptimized(string).
            This override to hide base BinaryWriter.Write(string).
            </summary>
            <param name="value">The string to store.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.Write(System.TimeSpan)">
            <summary>
            Writes a TimeSpan value into the stream.
            Stored Size: 8 bytes
            </summary>
            <param name="value">The TimeSpan value to store.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.Write(System.Type,System.Boolean)">
            <summary>
            Stores a Type object into the stream.
            Stored Size: Depends on the length of the Type's name and whether the fullyQualified parameter is set.
            A null Type takes 1 byte.
            </summary>
            <param name="value">The Type to store.</param>
            <param name="fullyQualified">true to store the AssemblyQualifiedName or false to store the FullName. </param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.WriteOptimized(System.Collections.ArrayList)">
            <summary>
            Writes an non-null ArrayList into the stream using the fewest number of bytes possible.
            Stored Size: 1 byte upwards depending on data content
            Notes:
            An empty ArrayList takes 1 byte.
            </summary>
            <param name="value">The ArrayList to store. Must not be null.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.WriteOptimized(System.Collections.BitArray)">
            <summary>
            Writes a BitArray into the stream using the fewest number of bytes possible.
            Stored Size: 1 byte upwards depending on data content
            Notes:
            An empty BitArray takes 1 byte.
            </summary>
            <param name="value">The BitArray value to store. Must not be null.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.WriteOptimized(System.Collections.Specialized.BitVector32)">
            <summary>
            Writes a BitVector32 into the stream using the fewest number of bytes possible.
            Stored Size: 1 to 4 bytes. (.Net is 4 bytes)
             1 to  7 bits takes 1 byte
             8 to 14 bits takes 2 bytes
            15 to 21 bits takes 3 bytes
            22 to 28 bits takes 4 bytes
            -------------------------------------------------------------------
            29 to 32 bits takes 5 bytes - use Write(BitVector32) method instead
            
            Try to order the BitVector32 masks so that the highest bits are least-likely
            to be set.
            </summary>
            <param name="value">The BitVector32 to store. Must not use more than 28 bits.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.WriteOptimized(System.DateTime)">
            <summary>
            Writes a DateTime value into the stream using the fewest number of bytes possible.
            Stored Size: 3 bytes to 7 bytes (.Net is 8 bytes)
            Notes:
            A DateTime containing only a date takes 3 bytes
            (except a .NET 2.0 Date with a specified DateTimeKind which will take a minimum
            of 5 bytes - no further optimization for this situation felt necessary since it
            is unlikely that a DateTimeKind would be specified without hh:mm also)
            Date plus hh:mm takes 5 bytes.
            Date plus hh:mm:ss takes 6 bytes.
            Date plus hh:mm:ss.fff takes 7 bytes.
            </summary>
            <param name="value">The DateTime value to store. Must not contain sub-millisecond data.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.WriteOptimized(System.Decimal)">
            <summary>
            Writes a Decimal value into the stream using the fewest number of bytes possible.
            Stored Size: 1 byte to 14 bytes (.Net is 16 bytes)
            Restrictions: None
            </summary>
            <param name="value">The Decimal value to store</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.WriteOptimized(System.Int16)">
            <summary>
            Write an Int16 value using the fewest number of bytes possible.
            </summary>
            <remarks>
            0x0000 - 0x007f (0 to 127) takes 1 byte
            0x0080 - 0x03FF (128 to 16,383) takes 2 bytes
            ----------------------------------------------------------------
            0x0400 - 0x7FFF (16,384 to 32,767) takes 3 bytes
            All negative numbers take 3 bytes
            
            Only call this method if the value is known to be between 0 and 
            16,383 otherwise use Write(Int16 value)
            </remarks>
            <param name="value">The Int16 to store. Must be between 0 and 16,383 inclusive.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.WriteOptimized(System.Int32)">
            <summary>
            Write an Int32 value using the fewest number of bytes possible.
            </summary>
            <remarks>
            0x00000000 - 0x0000007f (0 to 127) takes 1 byte
            0x00000080 - 0x000003FF (128 to 16,383) takes 2 bytes
            0x00000400 - 0x001FFFFF (16,384 to 2,097,151) takes 3 bytes
            0x00200000 - 0x0FFFFFFF (2,097,152 to 268,435,455) takes 4 bytes
            ----------------------------------------------------------------
            0x10000000 - 0x07FFFFFF (268,435,456 and above) takes 5 bytes
            All negative numbers take 5 bytes
            
            Only call this method if the value is known to be between 0 and 
            268,435,455 otherwise use Write(Int32 value)
            </remarks>
            <param name="value">The Int32 to store. Must be between 0 and 268,435,455 inclusive.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.WriteOptimized(System.Int64)">
            <summary>
            Write an Int64 value using the fewest number of bytes possible.
            </summary>
            <remarks>
            0x0000000000000000 - 0x000000000000007f (0 to 127) takes 1 byte
            0x0000000000000080 - 0x00000000000003FF (128 to 16,383) takes 2 bytes
            0x0000000000000400 - 0x00000000001FFFFF (16,384 to 2,097,151) takes 3 bytes
            0x0000000000200000 - 0x000000000FFFFFFF (2,097,152 to 268,435,455) takes 4 bytes
            0x0000000010000000 - 0x00000007FFFFFFFF (268,435,456 to 34,359,738,367) takes 5 bytes
            0x0000000800000000 - 0x000003FFFFFFFFFF (34,359,738,368 to 4,398,046,511,103) takes 6 bytes
            0x0000040000000000 - 0x0001FFFFFFFFFFFF (4,398,046,511,104 to 562,949,953,421,311) takes 7 bytes
            0x0002000000000000 - 0x00FFFFFFFFFFFFFF (562,949,953,421,312 to 72,057,594,037,927,935) takes 8 bytes
            ------------------------------------------------------------------
            0x0100000000000000 - 0x7FFFFFFFFFFFFFFF (72,057,594,037,927,936 to 9,223,372,036,854,775,807) takes 9 bytes
            0x7FFFFFFFFFFFFFFF - 0xFFFFFFFFFFFFFFFF (9,223,372,036,854,775,807 and above) takes 10 bytes
            All negative numbers take 10 bytes
            
            Only call this method if the value is known to be between 0 and
            72,057,594,037,927,935 otherwise use Write(Int64 value)
            </remarks>
            <param name="value">The Int64 to store. Must be between 0 and 72,057,594,037,927,935 inclusive.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.WriteOptimized(System.String)">
            <summary>
            Writes a string value into the stream using the fewest number of bytes possible.
            Stored Size: 1 byte upwards depending on string length
            Notes:
            Encodes null, Empty, 'Y', 'N', ' ' values as a single byte
            Any other single char string is stored as two bytes
            All other strings are stored in a string token list:
            
            The TypeCode representing the current string token list is written first (1 byte), 
            followed by the string token itself (1-4 bytes)
            
            When the current string list has reached 128 values then a new string list
            is generated and that is used for generating future string tokens. This continues
            until the maximum number (128) of string lists is in use, after which the string 
            lists are used in a round-robin fashion.
            By doing this, more lists are created with fewer items which allows a smaller 
            token size to be used for more strings.
            
            The first 16,384 strings will use a 1 byte token.
            The next 2,097,152 strings will use a 2 byte token. (This should suffice for most uses!)
            The next 268,435,456 strings will use a 3 byte token. (My, that is a lot!!)
            The next 34,359,738,368 strings will use a 4 byte token. (only shown for completeness!!!)
            </summary>
            <param name="value">The string to store.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.WriteOptimized(System.TimeSpan)">
            <summary>
            Writes a TimeSpan value into the stream using the fewest number of bytes possible.
            Stored Size: 2 bytes to 8 bytes (.Net is 8 bytes)
            Notes:
            hh:mm (time) are always stored together and take 2 bytes.
            If seconds are present then 3 bytes unless (time) is not present in which case 2 bytes
            since the seconds are stored in the minutes position.
            If milliseconds are present then 4 bytes.
            In addition, if days are present they will add 1 to 4 bytes to the above.
            </summary>
            <param name="value">The TimeSpan value to store. Must not contain sub-millisecond data.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.WriteOptimized(System.Type)">
            <summary>
            Stores a non-null Type object into the stream.
            Stored Size: Depends on the length of the Type's name.
            If the type is a System type (mscorlib) then it is stored without assembly name information,
            otherwise the Type's AssemblyQualifiedName is used.
            </summary>
            <param name="value">The Type to store. Must not be null.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.WriteOptimized(System.UInt16)">
            <summary>
            Write a UInt16 value using the fewest number of bytes possible.
            </summary>
            <remarks>
            0x0000 - 0x007f (0 to 127) takes 1 byte
            0x0080 - 0x03FF (128 to 16,383) takes 2 bytes
            ----------------------------------------------------------------
            0x0400 - 0xFFFF (16,384 to 65,536) takes 3 bytes
            
            Only call this method if the value is known to  be between 0 and 
            16,383 otherwise use Write(UInt16 value)
            </remarks>
            <param name="value">The UInt16 to store. Must be between 0 and 16,383 inclusive.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.WriteOptimized(System.UInt32)">
            <summary>
            Write a UInt32 value using the fewest number of bytes possible.
            </summary>
            <remarks>
            0x00000000 - 0x0000007f (0 to 127) takes 1 byte
            0x00000080 - 0x000003FF (128 to 16,383) takes 2 bytes
            0x00000400 - 0x001FFFFF (16,384 to 2,097,151) takes 3 bytes
            0x00200000 - 0x0FFFFFFF (2,097,152 to 268,435,455) takes 4 bytes
            ----------------------------------------------------------------
            0x10000000 - 0xFFFFFFFF (268,435,456 and above) takes 5 bytes
            
            Only call this method if the value is known to  be between 0 and 
            268,435,455 otherwise use Write(UInt32 value)
            </remarks>
            <param name="value">The UInt32 to store. Must be between 0 and 268,435,455 inclusive.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.WriteOptimized(System.UInt64)">
            <summary>
            Write a UInt64 value using the fewest number of bytes possible.
            </summary>
            <remarks>
            0x0000000000000000 - 0x000000000000007f (0 to 127) takes 1 byte
            0x0000000000000080 - 0x00000000000003FF (128 to 16,383) takes 2 bytes
            0x0000000000000400 - 0x00000000001FFFFF (16,384 to 2,097,151) takes 3 bytes
            0x0000000000200000 - 0x000000000FFFFFFF (2,097,152 to 268,435,455) takes 4 bytes
            0x0000000010000000 - 0x00000007FFFFFFFF (268,435,456 to 34,359,738,367) takes 5 bytes
            0x0000000800000000 - 0x000003FFFFFFFFFF (34,359,738,368 to 4,398,046,511,103) takes 6 bytes
            0x0000040000000000 - 0x0001FFFFFFFFFFFF (4,398,046,511,104 to 562,949,953,421,311) takes 7 bytes
            0x0002000000000000 - 0x00FFFFFFFFFFFFFF (562,949,953,421,312 to 72,057,594,037,927,935) takes 8 bytes
            ------------------------------------------------------------------
            0x0100000000000000 - 0x7FFFFFFFFFFFFFFF (72,057,594,037,927,936 to 9,223,372,036,854,775,807) takes 9 bytes
            0x7FFFFFFFFFFFFFFF - 0xFFFFFFFFFFFFFFFF (9,223,372,036,854,775,807 and above) takes 10 bytes
            
            Only call this method if the value is known to be between 0 and
            72,057,594,037,927,935 otherwise use Write(UInt64 value)
            </remarks>
            <param name="value">The UInt64 to store. Must be between 0 and 72,057,594,037,927,935 inclusive.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.Write(System.Boolean[])">
            <summary>
            Writes a Boolean[] into the stream.
            Notes:
            A null or empty array will take 1 byte.
            Calls WriteOptimized(Boolean[]).
            </summary>
            <param name="values">The Boolean[] to store.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.Write(System.Byte[])">
            <summary>
            Writes a Byte[] into the stream.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The Byte[] to store.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.Write(System.Char[])">
            <summary>
            Writes a Char[] into the stream.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The Char[] to store.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.Write(System.DateTime[])">
            <summary>
            Writes a DateTime[] into the stream.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The DateTime[] to store.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.Write(System.Decimal[])">
            <summary>
            Writes a Decimal[] into the stream.
            Notes:
            A null or empty array will take 1 byte.
            Calls WriteOptimized(Decimal[]).
            </summary>
            <param name="values">The Decimal[] to store.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.Write(System.Double[])">
            <summary>
            Writes a Double[] into the stream.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The Double[] to store.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.Write(System.Single[])">
            <summary>
            Writes a Single[] into the stream.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The Single[] to store.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.Write(System.Guid[])">
            <summary>
            Writes a Guid[] into the stream.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The Guid[] to store.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.Write(System.Int32[])">
            <summary>
            Writes an Int32[] into the stream.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The Int32[] to store.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.Write(System.Int64[])">
            <summary>
            Writes an Int64[] into the stream.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The Int64[] to store.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.Write(System.Object[])">
            <summary>
            Writes an object[] into the stream.
            Stored Size: 2 bytes upwards depending on data content
            Notes:
            A null object[] takes 1 byte.
            An empty object[] takes 2 bytes.
            The contents of the array will be stored optimized.
            </summary>
            <param name="values">The object[] to store.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.Write(System.SByte[])">
            <summary>
            Writes an SByte[] into the stream.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The SByte[] to store.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.Write(System.Int16[])">
            <summary>
            Writes an Int16[]or a null into the stream.
            Notes:
            A null or empty array will take 1 byte.
            Calls WriteOptimized(decimal[]).
            </summary>
            <param name="values">The Int16[] to store.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.Write(System.TimeSpan[])">
            <summary>
            Writes a TimeSpan[] into the stream.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The TimeSpan[] to store.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.Write(System.UInt32[])">
            <summary>
            Writes a UInt32[] into the stream.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The UInt32[] to store.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.Write(System.UInt64[])">
            <summary>
            Writes a UInt64[] into the stream.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The UInt64[] to store.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.Write(System.UInt16[])">
            <summary>
            Writes a UInt16[] into the stream.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The UInt16[] to store.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.WriteOptimized(System.Boolean[])">
            <summary>
            Writes an optimized Boolean[] into the stream using the fewest possible bytes.
            Notes:
            A null or empty array will take 1 byte.
            Stored as a BitArray.
            </summary>
            <param name="values">The Boolean[] to store.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.WriteOptimized(System.DateTime[])">
            <summary>
            Writes a DateTime[] into the stream using the fewest possible bytes.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The DateTime[] to store.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.WriteOptimized(System.Decimal[])">
            <summary>
            Writes a Decimal[] into the stream using the fewest possible bytes.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The Decimal[] to store.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.WriteOptimized(System.Object[])">
            <summary>
            Writes a not-null object[] into the stream using the fewest number of bytes possible.
            Stored Size: 2 bytes upwards depending on data content
            Notes:
            An empty object[] takes 1 byte.
            The contents of the array will be stored optimized.
            </summary>
            <param name="values">The object[] to store. Must not be null.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.WriteOptimized(System.Object[],System.Object[])">
            <summary>
            Writes a pair of object[] arrays into the stream using the fewest number of bytes possible.
            The arrays must not be null and must have the same length
            The first array's values are written optimized
            The second array's values are compared against the first and, where identical, will be stored
            using a single byte.
            Useful for storing entity data where there is a before-change and after-change set of value pairs
            and, typically, only a few of the values will have changed.
            </summary>
            <param name="values1">The first object[] value which must not be null and must have the same length as values2</param>
            <param name="values2">The second object[] value which must not be null and must have the same length as values1</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.WriteOptimized(System.Int16[])">
            <summary>
            Writes an Int16[] into the stream using the fewest possible bytes.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The Int16[] to store.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.WriteOptimized(System.Int32[])">
            <summary>
            Writes an Int32[] into the stream using the fewest possible bytes.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The Int32[] to store.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.WriteOptimized(System.Int64[])">
            <summary>
            Writes an Int64[] into the stream using the fewest possible bytes.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The Int64[] to store.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.WriteOptimized(System.TimeSpan[])">
            <summary>
            Writes a TimeSpan[] into the stream using the fewest possible bytes.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The TimeSpan[] to store.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.WriteOptimized(System.UInt16[])">
            <summary>
            Writes a UInt16[] into the stream using the fewest possible bytes.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The UInt16[] to store.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.WriteOptimized(System.UInt32[])">
            <summary>
            Writes a UInt32[] into the stream using the fewest possible bytes.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The UInt32[] to store.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.WriteOptimized(System.UInt64[])">
            <summary>
            Writes a UInt64[] into the stream using the fewest possible bytes.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The UInt64[] to store.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.WriteNullable(System.ValueType)">
            <summary>
            Writes a Nullable type into the stream.
            Synonym for WriteObject().
            </summary>
            <param name="value">The Nullable value to store.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.Write``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            Writes a non-null generic Dictionary into the stream.
            </summary>
            <remarks>
            The key and value types themselves are not stored - they must be 
            supplied at deserialization time.
            <para/>
            An array of keys is stored followed by an array of values.
            </remarks>
            <typeparam name="K">The key Type.</typeparam>
            <typeparam name="V">The value Type.</typeparam>
            <param name="value">The generic dictionary.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.Write``1(System.Collections.Generic.List{``0})">
            <summary>
            Writes a non-null generic List into the stream.
            </summary>
            <remarks>
            The list type itself is not stored - it must be supplied
            at deserialization time.
            <para/>
            The list contents are stored as an array.
            </remarks>
            <typeparam name="T">The list Type.</typeparam>
            <param name="value">The generic List.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.WriteTypedArray(System.Array)">
            <summary>
            Writes a null or a typed array into the stream.
            </summary>
            <param name="values">The array to store.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.UpdateHeader">
             <summary>
             Updates the header to store
             1) The total length of serialized data
             2) The number of string tokens
             3) The number of object tokens
             
             Does nothing if the stream is not seekable or the constructor
             specified not to update the header.
            
             Notes:
             Called automatically by ToArray() otherwise must be called
             manually when serialization is complete.
             </summary>
             <returns>The total length of serialized data or 0 if the stream is not seekable</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.ToArray">
            <summary>
            Returns a byte[] containing all of the serialized data
            where the underlying stream is a MemoryStream.
            
            Only call this method once all of the data has been serialized.
            
            </summary>
            <returns>A byte[] containing all serialized data.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.WriteBytesDirect(System.Byte[])">
            <summary>
            Writes a byte[] directly into the stream.
            The size of the array is not stored so only use this method when
            the number of bytes will be known at deserialization time.
            
            A null value will throw an exception
            </summary>
            <param name="value">The byte[] to store. Must not be null.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.WriteStringDirect(System.String)">
            <summary>
            Writes a non-null string directly to the stream without tokenization.
            </summary>
            <param name="value">The string to store. Must not be null.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.WriteTokenizedObject(System.Object)">
            <summary>
            Writes a token (an Int32 taking 1 to 4 bytes) into the stream that represents the object instance.
            The same token will always be used for the same object instance.
            
            The object will be serialized once and recreated at deserialization time.
            Calls to SerializationReader.ReadTokenizedObject() will retrieve the same object instance.
            
            </summary>
            <param name="value">The object to tokenize. Must not be null and must not be a string.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.WriteTokenizedObject(System.Object,System.Boolean)">
            <summary>
            Writes a token (an Int32 taking 1 to 4 bytes) into the stream that represents the object instance.
            The same token will always be used for the same object instance.
            
            When recreateFromType is set to true, the object's Type will be stored and the object recreated using 
            Activator.GetInstance with a parameterless contructor. This is useful for stateless, factory-type classes.
            
            When recreateFromType is set to false, the object will be serialized once and recreated at deserialization time.
            
            Calls to SerializationReader.ReadTokenizedObject() will retrieve the same object instance.
            </summary>
            <param name="value">The object to tokenize. Must not be null and must not be a string.</param>
            <param name="recreateFromType">true if the object can be recreated using a parameterless constructor; 
            false if the object should be serialized as-is</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.FindSurrogateForType(System.Type)">
            <summary>
            Finds the surrogate type for the type passed in.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.CreateBinaryFormatter">
            <summary>
            Creates the binary formatter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.EncodeTimeSpan(System.TimeSpan,System.Boolean,System.Int32)">
            <summary>
            Encodes a TimeSpan into the fewest number of bytes.
            Has been separated from the WriteOptimized(TimeSpan) method so that WriteOptimized(DateTime)
            can also use this for .NET 2.0 DateTimeKind information.
            By taking advantage of the fact that a DateTime's TimeOfDay portion will never use the IsNegative
            and HasDays flags, we can use these 2 bits to store the DateTimeKind and, since DateTimeKind is
            unlikely to be set without a Time, we need no additional bytes to support a .NET 2.0 DateTime.
            </summary>
            <param name="value">The TimeSpan to store.</param>
            <param name="partOfDateTime">True if the TimeSpan is the TimeOfDay from a DateTime; False if a real TimeSpan.</param>
            <param name="initialData">The intial data for the BitVector32 - contains DateTimeKind or 0</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.CheckOptimizable(System.Boolean,System.String)">
            <summary>
            Checks whether an optimization condition has been met and throw an exception if not.
            
            This method has been made conditional on THROW_IF_NOT_OPTIMIZABLE being set at compile time.
            By default, this isn't set but could be set explicitly if exceptions are required and
            the evaluation overhead is acceptable. 
            If not set, then this method and all references to it are removed at compile time.
            
            Leave at the default for optimum usage.
            </summary>
            <param name="condition">An expression evaluating to true if the optimization condition is met, false otherwise.</param>
            <param name="message">The message to include in the exception should the optimization condition not be met.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.Write7BitEncodedSigned32BitValue(System.Int32)">
            <summary>
            Stores a 32-bit signed value into the stream using 7-bit encoding.
            
            The value is written 7 bits at a time (starting with the least-significant bits) until there are no more bits to write.
            The eighth bit of each byte stored is used to indicate whether there are more bytes following this one.
            
            See Write(Int32) for details of the values that are optimizable.
            </summary>
            <param name="value">The Int32 value to encode.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.Write7BitEncodedSigned64BitValue(System.Int64)">
            <summary>
            Stores a 64-bit signed value into the stream using 7-bit encoding.
            
            The value is written 7 bits at a time (starting with the least-significant bits) until there are no more bits to write.
            The eighth bit of each byte stored is used to indicate whether there are more bytes following this one.
            
            See Write(Int64) for details of the values that are optimizable.
            </summary>
            <param name="value">The Int64 value to encode.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.Write7BitEncodedUnsigned32BitValue(System.UInt32)">
            <summary>
            Stores a 32-bit unsigned value into the stream using 7-bit encoding.
            
            The value is written 7 bits at a time (starting with the least-significant bits) until there are no more bits to write.
            The eighth bit of each byte stored is used to indicate whether there are more bytes following this one.
            
            See Write(UInt32) for details of the values that are optimizable.
            </summary>
            <param name="value">The UInt32 value to encode.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.Write7BitEncodedUnsigned64BitValue(System.UInt64)">
            <summary>
            Stores a 64-bit unsigned value into the stream using 7-bit encoding.
            
            The value is written 7 bits at a time (starting with the least-significant bits) until there are no more bits to write.
            The eighth bit of each byte stored is used to indicate whether there are more bytes following this one.
            
            See Write(ULong) for details of the values that are optimizable.
            </summary>
            <param name="value">The ULong value to encode.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.WriteArray(System.Boolean[])">
            <summary>
            Internal implementation to store a non-null Boolean[].
            </summary>
            <remarks>
            Stored as a BitArray for optimization.
            </remarks>
            <param name="values">The Boolean[] to store.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.WriteArray(System.Byte[])">
            <summary>
            Internal implementation to store a non-null Byte[].
            </summary>
            <param name="values">The Byte[] to store.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.WriteArray(System.Char[])">
            <summary>
            Internal implementation to store a non-null Char[].
            </summary>
            <param name="values">The Char[] to store.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.WriteArray(System.DateTime[],System.Collections.BitArray)">
            <summary>
            Internal implementation to write a non, null DateTime[] using a BitArray to 
            determine which elements are optimizable.
            </summary>
            <param name="values">The DateTime[] to store.</param>
            <param name="optimizeFlags">A BitArray indicating which of the elements which are optimizable; 
            a reference to constant FullyOptimizableValueArray if all the elements are optimizable; or null
            if none of the elements are optimizable.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.WriteArray(System.Decimal[])">
            <summary>
            Internal implementation to store a non-null Decimal[].
            </summary>
            <remarks>
            All elements are stored optimized.
            </remarks>
            <param name="values">The Decimal[] to store.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.WriteArray(System.Double[])">
            <summary>
            Internal implementation to store a non-null Double[].
            </summary>
            <param name="values">The Double[] to store.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.WriteArray(System.Single[])">
            <summary>
            Internal implementation to store a non-null Single[].
            </summary>
            <param name="values">The Single[] to store.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.WriteArray(System.Guid[])">
            <summary>
            Internal implementation to store a non-null Guid[].
            </summary>
            <param name="values">The Guid[] to store.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.WriteArray(System.Int16[],System.Collections.BitArray)">
            <summary>
            Internal implementation to write a non-null Int16[] using a BitArray to determine which elements are optimizable.
            </summary>
            <param name="values">The Int16[] to store.</param>
            <param name="optimizeFlags">A BitArray indicating which of the elements which are optimizable; 
            a reference to constant FullyOptimizableValueArray if all the elements are optimizable; or null
            if none of the elements are optimizable.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.WriteArray(System.Int32[],System.Collections.BitArray)">
            <summary>
            Internal implementation to write a non-null Int32[] using a BitArray to determine which elements are optimizable.
            </summary>
            <param name="values">The Int32[] to store.</param>
            <param name="optimizeFlags">A BitArray indicating which of the elements which are optimizable; 
            a reference to constant FullyOptimizableValueArray if all the elements are optimizable; or null
            if none of the elements are optimizable.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.WriteArray(System.Int64[],System.Collections.BitArray)">
            <summary>
            Internal implementation to writes a non-null Int64[] using a BitArray to determine which elements are optimizable.
            </summary>
            <param name="values">The Int64[] to store.</param>
            <param name="optimizeFlags">A BitArray indicating which of the elements which are optimizable; 
            a reference to constant FullyOptimizableValueArray if all the elements are optimizable; or null
            if none of the elements are optimizable.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.WriteArray(System.SByte[])">
            <summary>
            Internal implementation to store a non-null SByte[].
            </summary>
            <param name="values">The SByte[] to store.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.WriteArray(System.Int16[])">
            <summary>
            Internal implementation to store a non-null Int16[].
            </summary>
            <param name="values">The Int16[] to store.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.WriteArray(System.TimeSpan[],System.Collections.BitArray)">
            <summary>
            Internal implementation to write a non-null TimeSpan[] using a BitArray to determine which elements are optimizable.
            </summary>
            <param name="values">The TimeSpan[] to store.</param>
            <param name="optimizeFlags">A BitArray indicating which of the elements which are optimizable; 
            a reference to constant FullyOptimizableValueArray if all the elements are optimizable; or null
            if none of the elements are optimizable.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.WriteArray(System.UInt16[],System.Collections.BitArray)">
            <summary>
            Internal implementation to write a non-null UInt16[] using a BitArray to determine which elements are optimizable.
            </summary>
            <param name="values">The UInt16[] to store.</param>
            <param name="optimizeFlags">A BitArray indicating which of the elements which are optimizable; 
            a reference to constant FullyOptimizableValueArray if all the elements are optimizable; or null
            if none of the elements are optimizable.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.WriteArray(System.UInt32[],System.Collections.BitArray)">
            <summary>
            Internal implementation to write a non-null UInt32[] using a BitArray to determine which elements are optimizable.
            </summary>
            <param name="values">The UInt32[] to store.</param>
            <param name="optimizeFlags">A BitArray indicating which of the elements which are optimizable; 
            a reference to constant FullyOptimizableValueArray if all the elements are optimizable; or null
            if none of the elements are optimizable.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.WriteArray(System.UInt16[])">
            <summary>
            Internal implementation to store a non-null UInt16[].
            </summary>
            <param name="values">The UIn16[] to store.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.WriteArray(System.UInt64[],System.Collections.BitArray)">
            <summary>
            Internal implementation to write a non-null UInt64[] using a BitArray to determine which elements are optimizable.
            </summary>
            <param name="values">The UInt64[] to store.</param>
            <param name="optimizeFlags">A BitArray indicating which of the elements which are optimizable; 
            a reference to constant FullyOptimizableValueArray if all the elements are optimizable; or null
            if none of the elements are optimizable.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.WriteObjectArray(System.Object[])">
            <summary>
            Writes the values in the non-null object[] into the stream.
            
            Sequences of null values and sequences of DBNull.Values are stored with a flag and optimized count.
            Other values are stored using WriteObject().
            
            This routine is called by the Write(object[]), WriteOptimized(object[]) and Write(object[], object[])) methods.
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.WriteTypeCode(Mtime.Serialization.SerializedType)">
            <summary>
            Stores the specified SerializedType code into the stream.
            
            By using a centralized method, it is possible to collect statistics for the
            type of data being stored in DEBUG mode.
            
            Use the DumpTypeUsage() method to show a list of used SerializedTypes and
            the number of times each has been used. This method and the collection code
            will be optimized out when compiling in Release mode.
            </summary>
            <param name="typeCode">The SerializedType to store.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.WriteTypedArray(System.Array,System.Boolean)">
            <summary>
            Internal implementation to write a non-null typed array into the stream.
            </summary>
            <remarks>
            Checks first to see if the element type is a primitive type and calls the 
            correct routine if so. Otherwise determines the best, optimized method
            to store the array contents.
            <para/>
            An array of object elements never stores its type.
            </remarks>
            <param name="value">The non-null typed array to store.</param>
            <param name="storeType">True if the type should be stored; false otherwise</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.IsTypeRecreatable(System.Type)">
            <summary>
            Checks whether instances of a Type can be created.
            </summary>
            <remarks>
            A Value Type only needs to implement IOwnedDataSerializable. 
            A Reference Type needs to implement IOwnedDataSerializableAndRecreatable and provide a default constructor.
            </remarks>
            <param name="type">The Type to check</param>
            <returns>true if the Type is recreatable; false otherwise.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.HasEmptyConstructor(System.Type)">
            <summary>
            Checks whether a type has a default/empty constructor.
            </summary>
            <param name="type">The Type to check</param>
            <returns>true if the Type has a default/empty constructor; false otherwise.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.ArrayElementsAreSameType(System.Object[],System.Type)">
            <summary>
            Checks whether each element in an array is of the same type.
            </summary>
            <param name="values">The array to check</param>
            <param name="elementType">The expected element type.</param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.WriteTypedArrayTypeCode(System.Collections.BitArray,System.Int32)">
            <summary>
            Writes the TypeCode for the Typed Array followed by the number of elements.
            </summary>
            <param name="optimizeFlags"></param>
            <param name="length"></param>
        </member>
        <member name="P:Mtime.Serialization.SerializationWriter.TypeSurrogates">
            <summary>
            gets the list of optional IFastSerializationTypeSurrogate instances which
            SerializationWriter and SerializationReader will use to serialize objects not directly supported.
            It is important to use the same list on both client and server ends to ensure that the same surrogated-types are supported.
            </summary>
        </member>
        <member name="P:Mtime.Serialization.SerializationWriter.StringTokenTableSize">
            <summary>
            Returns the number of strings in the string token table.
            </summary>
        </member>
        <member name="P:Mtime.Serialization.SerializationWriter.ObjectTokenTableSize">
            <summary>
            Returns the number of objects in the object token table.
            </summary>
        </member>
        <member name="P:Mtime.Serialization.SerializationWriter.OptimizeForSize">
            <summary>
            Gets or Sets a boolean flag to indicate whether to optimize for size (default)
            by storing data as packed bits or sections where possible.
            Setting this value to false will turn off this optimization and store
            data directly which increases the speed.
            Note: This only affects optimization of data passed to the WriteObject method
            and direct calls to the WriteOptimized methods will always pack data into
            the smallest space where possible.
            </summary>
        </member>
        <member name="P:Mtime.Serialization.SerializationWriter.PreserveDecimalScale">
            <summary>
            Gets or Sets a boolean flag to indicate whether to preserve the scale within
            a Decimal value when it would have no effect on the represented value.
            Note: a 2m value and a 2.00m value represent the same value but internally they 
            are stored differently - the former has a value of 2 and a scale of 0 and
            the latter has a value of 200 and a scale of 2. 
            The scaling factor also preserves any trailing zeroes in a Decimal number. 
            Trailing zeroes do not affect the value of a Decimal number in arithmetic or 
            comparison operations. However, trailing zeroes can be revealed by the ToString 
            method if an appropriate format string is applied.
            From a serialization point of view, the former will take 2 bytes whereas the 
            latter would take 4 bytes, therefore it is preferable to not save the scale where
            it doesn't affect the represented value.
            </summary>
        </member>
        <member name="T:Mtime.Serialization.SerializationWriter.SingletonTypeWrapper">
            <summary>
            Private class used to wrap an object that is to be tokenized, and recreated at deserialization by its type.
            </summary>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.SingletonTypeWrapper.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Mtime.Serialization.SerializationWriter.SingletonTypeWrapper"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.SingletonTypeWrapper.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.SingletonTypeWrapper.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:Mtime.Serialization.SerializationWriter.SingletonTypeWrapper.WrappedType">
            <summary>
            Gets the type of the wrapped.
            </summary>
            <value>The type of the wrapped.</value>
        </member>
        <member name="T:Mtime.Serialization.SerializationWriter.UniqueStringList">
            <summary>
            Provides a faster way to store string tokens both maintaining the order that they were added and
            providing a fast lookup.
            
            Based on code developed by ewbi at http://ewbi.blogs.com/develops/2006/10/uniquestringlis.html
            </summary>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.UniqueStringList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mtime.Serialization.SerializationWriter.UniqueStringList"/> class.
            </summary>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.UniqueStringList.Expand">
            <summary>
            Expands this instance.
            </summary>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.UniqueStringList.Reindex">
            <summary>
            Reindexes this instance.
            </summary>
        </member>
        <member name="M:Mtime.Serialization.SerializationWriter.UniqueStringList.GetBucketIndex(System.String)">
            <summary>
            Gets the index of the bucket.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="P:Mtime.Serialization.SerializationWriter.UniqueStringList.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="T:Mtime.Serialization.SerializationReader">
             <summary>
             A SerializationReader instance is used to read stored values and objects from a byte array.
            
             Once an instance is created, use the various methods to read the required data.
             The data read MUST be exactly the same type and in the same order as it was written.
             </summary>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.DumpStringTables(System.Collections.ArrayList)">
            <summary>
            Dumps the string tables.
            </summary>
            <param name="list">The list.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.#ctor(System.Byte[])">
            <summary>
            Creates a SerializationReader using a byte[] previous created by SerializationWriter
            
            A MemoryStream is used to access the data without making a copy of it.
            </summary>
            <param name="data">The byte[] containining serialized data.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Mtime.Serialization.SerializationReader"/> class.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.#ctor(System.IO.Stream,System.Int32,System.Int32)">
            <summary>
            Creates a SerializationReader based around the passed Stream.
            Allows the string and object token tables to be presized using
            the specified values.
            </summary>
            <param name="stream">The stream containing the serialized data</param>
            <param name="stringTokenTablePresize">Number of string tokens to presize</param>
            <param name="objectTokenTablePresize">Number of object tokens to presize</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadArrayList">
            <summary>
            Returns an ArrayList or null from the stream.
            </summary>
            <returns>An ArrayList instance.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadBitArray">
            <summary>
            Returns a BitArray or null from the stream.
            </summary>
            <returns>A BitArray instance.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadBitVector32">
            <summary>
            Returns a BitVector32 value from the stream.
            </summary>
            <returns>A BitVector32 value.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadBytesDirect(System.Int32)">
            <summary>
            Reads the specified number of bytes directly from the stream.
            </summary>
            <param name="count">The number of bytes to read</param>
            <returns>A byte[] containing the read bytes</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadDateTime">
            <summary>
            Returns a DateTime value from the stream.
            </summary>
            <returns>A DateTime value.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadGuid">
            <summary>
            Returns a Guid value from the stream.
            </summary>
            <returns>A DateTime value.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadObject">
            <summary>
            Returns an object based on the SerializedType read next from the stream.
            </summary>
            <returns>An object instance.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadString">
            <summary>
            Called ReadOptimizedString().
            This override to hide base BinaryReader.ReadString().
            </summary>
            <returns>A string value.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadStringDirect">
            <summary>
            Returns a string value from the stream.
            </summary>
            <returns>A string value.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadTimeSpan">
            <summary>
            Returns a TimeSpan value from the stream.
            </summary>
            <returns>A TimeSpan value.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadType">
            <summary>
            Returns a Type or null from the stream.
            
            Throws an exception if the Type cannot be found.
            </summary>
            <returns>A Type instance.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadType(System.Boolean)">
            <summary>
            Returns a Type or null from the stream.
            
            Throws an exception if the Type cannot be found and throwOnError is true.
            </summary>
            <returns>A Type instance.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadOptimizedArrayList">
            <summary>
            Returns an ArrayList from the stream that was stored optimized.
            </summary>
            <returns>An ArrayList instance.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadOptimizedBitArray">
            <summary>
            Returns a BitArray from the stream that was stored optimized.
            </summary>
            <returns>A BitArray instance.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadOptimizedBitVector32">
            <summary>
            Returns a BitVector32 value from the stream that was stored optimized.
            </summary>
            <returns>A BitVector32 value.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadOptimizedDateTime">
            <summary>
            Returns a DateTime value from the stream that was stored optimized.
            </summary>
            <returns>A DateTime value.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadOptimizedDecimal">
            <summary>
            Returns a Decimal value from the stream that was stored optimized.
            </summary>
            <returns>A Decimal value.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadOptimizedInt32">
            <summary>
            Returns an Int32 value from the stream that was stored optimized.
            </summary>
            <returns>An Int32 value.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadOptimizedInt16">
            <summary>
            Returns an Int16 value from the stream that was stored optimized.
            </summary>
            <returns>An Int16 value.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadOptimizedInt64">
            <summary>
            Returns an Int64 value from the stream that was stored optimized.
            </summary>
            <returns>An Int64 value.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadOptimizedObjectArray">
            <summary>
            Returns an object[] from the stream that was stored optimized.
            </summary>
            <returns>An object[] instance.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadOptimizedObjectArray(System.Type)">
            <summary>
            Returns an object[] from the stream that was stored optimized.
            The returned array will be typed according to the specified element type
            and the resulting array can be cast to the expected type.
            e.g.
            string[] myStrings = (string[]) reader.ReadOptimizedObjectArray(typeof(string));
            
            An exception will be thrown if any of the deserialized values cannot be
            cast to the specified elementType.
            
            </summary>
            <param name="elementType">The Type of the expected array elements. null will return a plain object[].</param>
            <returns>An object[] instance.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadOptimizedObjectArrayPair(System.Object[]@,System.Object[]@)">
            <summary>
            Returns a pair of object[] arrays from the stream that were stored optimized.
            </summary>
            <returns>A pair of object[] arrays.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadOptimizedString">
            <summary>
            Returns a string value from the stream that was stored optimized.
            </summary>
            <returns>A string value.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadOptimizedTimeSpan">
            <summary>
            Returns a TimeSpan value from the stream that was stored optimized.
            </summary>
            <returns>A TimeSpan value.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadOptimizedType">
            <summary>
            Returns a Type from the stream.
            
            Throws an exception if the Type cannot be found.
            </summary>
            <returns>A Type instance.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadOptimizedType(System.Boolean)">
            <summary>
            Returns a Type from the stream.
            
            Throws an exception if the Type cannot be found and throwOnError is true.
            </summary>
            <returns>A Type instance.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadOptimizedUInt16">
            <summary>
            Returns a UInt16 value from the stream that was stored optimized.
            </summary>
            <returns>A UInt16 value.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadOptimizedUInt32">
            <summary>
            Returns a UInt32 value from the stream that was stored optimized.
            </summary>
            <returns>A UInt32 value.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadOptimizedUInt64">
            <summary>
            Returns a UInt64 value from the stream that was stored optimized.
            </summary>
            <returns>A UInt64 value.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadTypedArray">
            <summary>
            Returns a typed array from the stream.
            </summary>
            <returns>A typed array.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadDictionary``2">
            <summary>
            Returns a new, simple generic dictionary populated with keys and values from the stream.
            </summary>
            <typeparam name="K">The key Type.</typeparam>
            <typeparam name="V">The value Type.</typeparam>
            <returns>A new, simple, populated generic Dictionary.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadDictionary``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            Populates a pre-existing generic dictionary with keys and values from the stream.
            This allows a generic dictionary to be created without using the default constructor.
            </summary>
            <typeparam name="K">The key Type.</typeparam>
            <typeparam name="V">The value Type.</typeparam>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadList``1">
            <summary>
            Returns a generic List populated with values from the stream.
            </summary>
            <typeparam name="T">The list Type.</typeparam>
            <returns>A new generic List.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadNullable">
            <summary>
            Returns a Nullable struct from the stream.
            The value returned must be cast to the correct Nullable type.
            Synonym for ReadObject();
            </summary>
            <returns>A struct value or null</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadNullableBoolean">
            <summary>
            Returns a Nullable Boolean from the stream.
            </summary>
            <returns>A Nullable Boolean.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadNullableByte">
            <summary>
            Returns a Nullable Byte from the stream.
            </summary>
            <returns>A Nullable Byte.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadNullableChar">
            <summary>
            Returns a Nullable Char from the stream.
            </summary>
            <returns>A Nullable Char.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadNullableDateTime">
            <summary>
            Returns a Nullable DateTime from the stream.
            </summary>
            <returns>A Nullable DateTime.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadNullableDecimal">
            <summary>
            Returns a Nullable Decimal from the stream.
            </summary>
            <returns>A Nullable Decimal.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadNullableDouble">
            <summary>
            Returns a Nullable Double from the stream.
            </summary>
            <returns>A Nullable Double.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadNullableGuid">
            <summary>
            Returns a Nullable Guid from the stream.
            </summary>
            <returns>A Nullable Guid.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadNullableInt16">
            <summary>
            Returns a Nullable Int16 from the stream.
            </summary>
            <returns>A Nullable Int16.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadNullableInt32">
            <summary>
            Returns a Nullable Int32 from the stream.
            </summary>
            <returns>A Nullable Int32.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadNullableInt64">
            <summary>
            Returns a Nullable Int64 from the stream.
            </summary>
            <returns>A Nullable Int64.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadNullableSByte">
            <summary>
            Returns a Nullable SByte from the stream.
            </summary>
            <returns>A Nullable SByte.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadNullableSingle">
            <summary>
            Returns a Nullable Single from the stream.
            </summary>
            <returns>A Nullable Single.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadNullableTimeSpan">
            <summary>
            Returns a Nullable TimeSpan from the stream.
            </summary>
            <returns>A Nullable TimeSpan.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadNullableUInt16">
            <summary>
            Returns a Nullable UInt16 from the stream.
            </summary>
            <returns>A Nullable UInt16.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadNullableUInt32">
            <summary>
            Returns a Nullable UInt32 from the stream.
            </summary>
            <returns>A Nullable UInt32.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadNullableUInt64">
            <summary>
            Returns a Nullable UInt64 from the stream.
            </summary>
            <returns>A Nullable UInt64.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadByteArray">
            <summary>
            Returns a Byte[] from the stream.
            </summary>
            <returns>A Byte instance; or null.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadCharArray">
            <summary>
            Returns a Char[] from the stream.
            </summary>
            <returns>A Char[] value; or null.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadDoubleArray">
            <summary>
            Returns a Double[] from the stream.
            </summary>
            <returns>A Double[] instance; or null.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadGuidArray">
            <summary>
            Returns a Guid[] from the stream.
            </summary>
            <returns>A Guid[] instance; or null.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadInt16Array">
            <summary>
            Returns an Int16[] from the stream.
            </summary>
            <returns>An Int16[] instance; or null.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadObjectArray">
            <summary>
            Returns an object[] or null from the stream.
            </summary>
            <returns>A DateTime value.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadObjectArray(System.Type)">
            <summary>
            Returns an object[] or null from the stream.
            The returned array will be typed according to the specified element type
            and the resulting array can be cast to the expected type.
            e.g.
            string[] myStrings = (string[]) reader.ReadObjectArray(typeof(string));
            
            An exception will be thrown if any of the deserialized values cannot be
            cast to the specified elementType.
            
            </summary>
            <param name="elementType">The Type of the expected array elements. null will return a plain object[].</param>
            <returns>An object[] instance.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadSingleArray">
            <summary>
            Returns a Single[] from the stream.
            </summary>
            <returns>A Single[] instance; or null.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadSByteArray">
            <summary>
            Returns an SByte[] from the stream.
            </summary>
            <returns>An SByte[] instance; or null.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadStringArray">
            <summary>
            Returns a string[] or null from the stream.
            </summary>
            <returns>An string[] instance.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadUInt16Array">
            <summary>
            Returns a UInt16[] from the stream.
            </summary>
            <returns>A UInt16[] instance; or null.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadBooleanArray">
            <summary>
            Returns a Boolean[] from the stream.
            </summary>
            <returns>A Boolean[] instance; or null.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadDateTimeArray">
            <summary>
            Returns a DateTime[] from the stream.
            </summary>
            <returns>A DateTime[] instance; or null.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadDecimalArray">
            <summary>
            Returns a Decimal[] from the stream.
            </summary>
            <returns>A Decimal[] instance; or null.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadInt32Array">
            <summary>
            Returns an Int32[] from the stream.
            </summary>
            <returns>An Int32[] instance; or null.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadInt64Array">
            <summary>
            Returns an Int64[] from the stream.
            </summary>
            <returns>An Int64[] instance; or null.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadOptimizedStringArray">
            <summary>
            Returns a string[] from the stream that was stored optimized.
            </summary>
            <returns>An string[] instance.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadTimeSpanArray">
            <summary>
            Returns a TimeSpan[] from the stream.
            </summary>
            <returns>A TimeSpan[] instance; or null.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadUInt32Array">
            <summary>
            Returns a UInt[] from the stream.
            </summary>
            <returns>A UInt[] instance; or null.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadUInt64Array">
            <summary>
            Returns a UInt64[] from the stream.
            </summary>
            <returns>A UInt64[] instance; or null.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadOptimizedBooleanArray">
            <summary>
            Returns a Boolean[] from the stream.
            </summary>
            <returns>A Boolean[] instance; or null.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadOptimizedDateTimeArray">
            <summary>
            Returns a DateTime[] from the stream.
            </summary>
            <returns>A DateTime[] instance; or null.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadOptimizedDecimalArray">
            <summary>
            Returns a Decimal[] from the stream.
            </summary>
            <returns>A Decimal[] instance; or null.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadOptimizedInt16Array">
            <summary>
            Returns a Int16[] from the stream.
            </summary>
            <returns>An Int16[] instance; or null.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadOptimizedInt32Array">
            <summary>
            Returns a Int32[] from the stream.
            </summary>
            <returns>An Int32[] instance; or null.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadOptimizedInt64Array">
            <summary>
            Returns a Int64[] from the stream.
            </summary>
            <returns>A Int64[] instance; or null.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadOptimizedTimeSpanArray">
            <summary>
            Returns a TimeSpan[] from the stream.
            </summary>
            <returns>A TimeSpan[] instance; or null.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadOptimizedUInt16Array">
            <summary>
            Returns a UInt16[] from the stream.
            </summary>
            <returns>A UInt16[] instance; or null.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadOptimizedUInt32Array">
            <summary>
            Returns a UInt32[] from the stream.
            </summary>
            <returns>A UInt32[] instance; or null.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadOptimizedUInt64Array">
            <summary>
            Returns a UInt64[] from the stream.
            </summary>
            <returns>A UInt64[] instance; or null.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadOwnedData(Mtime.Serialization.IOwnedDataSerializable,System.Object)">
            <summary>
            Allows an existing object, implementing IOwnedDataSerializable, to 
            retrieve its owned data from the stream.
            </summary>
            <param name="target">Any IOwnedDataSerializable object.</param>
            <param name="context">An optional, arbitrary object to allow context to be provided.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadTokenizedObject">
            <summary>
            Returns the object associated with the object token read next from the stream.
            </summary>
            <returns>An object.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.InitializeTokenTables(System.Int32,System.Int32)">
            <summary>
            Initializes the token tables.
            </summary>
            <param name="stringTokenTablePresize">The string token table presize.</param>
            <param name="objectTokenTablePresize">The object token table presize.</param>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.DecodeTimeSpan(System.Byte)">
            <summary>
            Returns a TimeSpan decoded from packed data.
            This routine is called from ReadOptimizedDateTime() and ReadOptimizedTimeSpan().
            <remarks>
            This routine uses a parameter to allow ReadOptimizedDateTime() to 'peek' at the
            next byte and extract the DateTimeKind from bits one and two (IsNegative and HasDays)
            which are never set for a Time portion of a DateTime.
            </remarks>
            </summary>
            <param name="initialByte">The first of two always-present bytes.</param>
            <returns>A decoded TimeSpan</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadTypedArrayOptimizeFlags(Mtime.Serialization.SerializedType)">
            <summary>
            Creates a BitArray representing which elements of a typed array
            are serializable.
            </summary>
            <param name="serializedType">The type of typed array.</param>
            <returns>A BitArray denoting which elements are serializable.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ProcessObject(Mtime.Serialization.SerializedType)">
            <summary>
            Returns an object based on supplied SerializedType.
            </summary>
            <returns>An object instance.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ProcessArrayTypes(Mtime.Serialization.SerializedType,System.Type)">
            <summary>
            Determine whether the passed-in type code refers to an array type
            and deserializes the array if it is.
            Returns null if not an array type.
            </summary>
            <param name="typeCode">The SerializedType to check.</param>
            <param name="defaultElementType">The Type of array element; null if to be read from stream.</param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadTokenizedString(System.Int32)">
            <summary>
            Returns the string value associated with the string token read next from the stream.
            </summary>
            <returns>A DateTime value.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadTypeCode">
            <summary>
            Returns the SerializedType read next from the stream.
            </summary>
            <returns>A SerializedType value.</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadBooleanArrayInternal">
            <summary>
            Internal implementation returning a Bool[].
            </summary>
            <returns>A Bool[].</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadByteArrayInternal">
            <summary>
            Internal implementation returning a Byte[].
            </summary>
            <returns>A Byte[].</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadCharArrayInternal">
            <summary>
            Internal implementation returning a Char[].
            </summary>
            <returns>A Char[].</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadDecimalArrayInternal">
            <summary>
            Internal implementation returning a Decimal[].
            </summary>
            <returns>A Decimal[].</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadDoubleArrayInternal">
            <summary>
            Internal implementation returning a Double[].
            </summary>
            <returns>A Double[].</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadGuidArrayInternal">
            <summary>
            Internal implementation returning a Guid[].
            </summary>
            <returns>A Guid[].</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadSByteArrayInternal">
            <summary>
            Internal implementation returning an SByte[].
            </summary>
            <returns>An SByte[].</returns>
        </member>
        <member name="M:Mtime.Serialization.SerializationReader.ReadSingleArrayInternal">
            <summary>
            Internal implementation returning a Single[].
            </summary>
            <returns>A Single[].</returns>
        </member>
        <member name="P:Mtime.Serialization.SerializationReader.BytesRemaining">
            <summary>
            Returns the number of bytes or serialized remaining to be processed.
            Useful for checking that deserialization is complete.
            
            Warning: Retrieving the Position in certain stream types can be expensive,
            e.g. a FileStream, so use sparingly unless known to be a MemoryStream.
            </summary>
        </member>
        <member name="T:Mtime.Serialization.IFastSerializationTypeSurrogate">
            <summary>
            Interface to allow helper classes to be used to serialize objects
            that are not directly supported by SerializationWriter/SerializationReader
            </summary>
        </member>
        <member name="M:Mtime.Serialization.IFastSerializationTypeSurrogate.SupportsType(System.Type)">
            <summary>
            Allows a surrogate to be queried as to whether a particular type is supported
            </summary>
            <param name="type">The type being queried</param>
            <returns>true if the type is supported; otherwise false</returns>
        </member>
        <member name="M:Mtime.Serialization.IFastSerializationTypeSurrogate.Serialize(Mtime.Serialization.SerializationWriter,System.Object)">
            <summary>
            FastSerializes the object into the SerializationWriter.
            </summary>
            <param name="writer">The SerializationWriter into which the object is to be serialized.</param>
            <param name="value">The object to serialize.</param>
        </member>
        <member name="M:Mtime.Serialization.IFastSerializationTypeSurrogate.Deserialize(Mtime.Serialization.SerializationReader,System.Type)">
            <summary>
            Deserializes an object of the supplied type from the SerializationReader.
            </summary>
            <param name="reader">The SerializationReader containing the serialized object.</param>
            <param name="type">The type of object required to be deserialized.</param>
            <returns></returns>
        </member>
        <member name="T:Mtime.Serialization.IOwnedDataSerializable">
            <summary>
            Interface which allows a class to save/retrieve their internal data to/from an existing SerializationWriter/SerializationReader.
            </summary>
        </member>
        <member name="M:Mtime.Serialization.IOwnedDataSerializable.SerializeOwnedData(Mtime.Serialization.SerializationWriter,System.Object)">
            <summary>
            Lets the implementing class store internal data directly into a SerializationWriter.
            </summary>
            <param name="writer">The SerializationWriter to use</param>
            <param name="context">Optional context to use as a hint as to what to store (BitVector32 is useful)</param>
        </member>
        <member name="M:Mtime.Serialization.IOwnedDataSerializable.DeserializeOwnedData(Mtime.Serialization.SerializationReader,System.Object)">
            <summary>
            Lets the implementing class retrieve internal data directly from a SerializationReader.
            </summary>
            <param name="reader">The SerializationReader to use</param>
            <param name="context">Optional context to use as a hint as to what to retrieve (BitVector32 is useful) </param>
        </member>
        <member name="T:Mtime.Serialization.IOwnedDataSerializableAndRecreatable">
            <summary>
            Interface which allows a class to specify that it can be recreated during deserialization using a default constructor
            and then calling DeserializeOwnedData()
            </summary>
        </member>
        <member name="T:Mtime.Serialization.SerializedType">
            <summary>
            Enum which is used for fast serialization. It stores information about a type or type/value.
            </summary>
        </member>
        <member name="T:Mtime.MongoDB.Bson.JsonFormatter">
            <summary>
            Lightweight routines to handle basic json serializing.
            </summary>
        </member>
        <member name="M:Mtime.MongoDB.Bson.JsonFormatter.Serialize(Mtime.MongoDB.Document)">
            <summary>
            Serializes the specified doc.
            </summary>
            <param name="doc">The doc.</param>
            <returns></returns>
        </member>
        <member name="M:Mtime.MongoDB.Bson.JsonFormatter.SerializeType(System.Object,System.Text.StringBuilder)">
            <summary>
            Serializes the type.
            </summary>
            <param name="value">The value.</param>
            <param name="json">The json.</param>
        </member>
        <member name="M:Mtime.MongoDB.Bson.JsonFormatter.Escape(System.String)">
            <summary>
            Escapes any characters that are special to javascript.
            </summary>
        </member>
        <member name="T:Mtime.MongoDB.MongoGridFS">
            <summary>
            MongoGridFS客户端实现
            </summary>
        </member>
        <member name="M:Mtime.MongoDB.MongoGridFS.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="connectionName"></param>
            <param name="databaseName"></param>
        </member>
        <member name="M:Mtime.MongoDB.MongoGridFS.#ctor(System.String,System.String,Mtime.MongoDB.MongoGridFSSetting)">
            <summary>
            构造函数
            </summary>
            <param name="connectionName"></param>
            <param name="databaseName"></param>
            <param name="setting"></param>
        </member>
        <member name="M:Mtime.MongoDB.MongoGridFS.BeginQuery">
            <summary>
            准备执行多次查询，在所有查询完成后必须调用EndQuery以释放资源
            </summary>
        </member>
        <member name="M:Mtime.MongoDB.MongoGridFS.EndQuery">
            <summary>
            结束执行多次查询
            </summary>
        </member>
        <member name="M:Mtime.MongoDB.MongoGridFS.Upload(System.String)">
            <summary>
            上传文件
            </summary>
            <param name="localFileName"></param>
            <param name="remoteFileName"></param>
        </member>
        <member name="M:Mtime.MongoDB.MongoGridFS.Upload(System.String,System.String)">
            <summary>
            上传文件
            </summary>
            <param name="localFileName"></param>
            <param name="remoteFileName"></param>
        </member>
        <member name="M:Mtime.MongoDB.MongoGridFS.Upload(System.String,System.String,Mtime.MongoDB.MongoGridFSCreateOption)">
            <summary>
            上传文件
            </summary>
            <param name="localFileName"></param>
            <param name="remoteFileName"></param>
        </member>
        <member name="M:Mtime.MongoDB.MongoGridFS.Upload(System.Byte[],System.String,Mtime.MongoDB.MongoGridFSCreateOption)">
            <summary>
            上传文件
            </summary>
            <param name="fileContent"></param>
            <param name="remoteFileName"></param>
            <param name="createOptions"></param>
        </member>
        <member name="M:Mtime.MongoDB.MongoGridFS.Upload(System.IO.Stream,System.String,Mtime.MongoDB.MongoGridFSCreateOption)">
            <summary>
            上传文件
            </summary>
            <param name="stream"></param>
            <param name="remoteFileName"></param>
        </member>
        <member name="M:Mtime.MongoDB.MongoGridFS.Delete(System.String)">
            <summary>
            按文件名删除文件
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:Mtime.MongoDB.MongoGridFS.Delete(Mtime.MongoDB.Bson.Oid)">
            <summary>
            按文件ID删除文件
            </summary>
            <param name="fileId"></param>
        </member>
        <member name="M:Mtime.MongoDB.MongoGridFS.Download(System.String)">
            <summary>
            下载文件的最新版本
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.MongoDB.MongoGridFS.Download(System.String,System.Int32)">
            <summary>
            下载文件的指定版本（-1:最新，1:最老，0:不指定）
            </summary>
            <param name="fileName"></param>
            <param name="version"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.MongoDB.MongoGridFS.DownloadTo(System.String,System.String)">
            <summary>
            下载文件的最新版本
            </summary>
            <param name="remoteFileName"></param>
            <param name="localFileName"></param>
        </member>
        <member name="M:Mtime.MongoDB.MongoGridFS.DownloadTo(System.String,System.String,System.Int32)">
            <summary>
            下载文件的指定版本（-1:最新，1:最老，0:不指定）
            </summary>
            <param name="remoteFileName"></param>
            <param name="localFileName"></param>
            <param name="version"></param>
        </member>
        <member name="M:Mtime.MongoDB.MongoGridFS.SetIndex">
            <summary>
            设置索引
            </summary>
        </member>
        <member name="M:Mtime.MongoDB.MongoGridFSCreateOption.#ctor">
            <summary>
            Initializes a new instance of the MongoGridFSCreateOptions class.
            </summary>
        </member>
        <member name="P:Mtime.MongoDB.MongoGridFSCreateOption.Aliases">
            <summary>
            Gets or sets the aliases.
            </summary>
        </member>
        <member name="P:Mtime.MongoDB.MongoGridFSCreateOption.ChunkSize">
            <summary>
            Gets or sets the chunk size.
            </summary>
        </member>
        <member name="P:Mtime.MongoDB.MongoGridFSCreateOption.ContentType">
            <summary>
            Gets or sets the content type.
            </summary>
        </member>
        <member name="P:Mtime.MongoDB.MongoGridFSCreateOption.Metadata">
            <summary>
            Gets or sets the metadata.
            </summary>
        </member>
        <member name="P:Mtime.MongoDB.MongoGridFSCreateOption.UploadDate">
            <summary>
            Gets or sets the upload date.
            </summary>
        </member>
        <member name="P:Mtime.MongoDB.MongoGridFSSetting.Root">
            <summary>
            Gets or sets the root collection name (the files and chunks collection names are derived from the root).
            </summary>
        </member>
        <member name="P:Mtime.MongoDB.MongoGridFSSetting.VerifyMD5">
            <summary>
            Gets or sets whether to verify the MD5 hash when a file is uploaded or downloaded.
            </summary>
        </member>
        <member name="P:Mtime.MongoDB.MongoGridFSSetting.UpdateMD5">
            <summary>
            Gets or sets whether to udpate the MD5 hash on the server when a file is uploaded or modified.
            </summary>
        </member>
        <member name="T:Mtime.Community.Utility.Client.UIntEqualityComparer">
            <summary>
            A fast comparer for dictionaries indexed by UInt. Faster than using Comparer.Default
            </summary>
        </member>
        <member name="T:Mtime.Community.Utility.HttpCompress.Algorithms">
            <summary>
            The available compression algorithms to use with the HttpCompressionModule
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.HttpCompress.Algorithms.Deflate">
            <summary>Use the Deflate algorithm</summary>
        </member>
        <member name="F:Mtime.Community.Utility.HttpCompress.Algorithms.GZip">
            <summary>Use the GZip algorithm</summary>
        </member>
        <member name="F:Mtime.Community.Utility.HttpCompress.Algorithms.Default">
            <summary>Use the default algorithm (picked by client)</summary>
        </member>
        <member name="T:Mtime.Community.Utility.HttpCompress.CompressionLevels">
            <summary>
            The level of compression to use with deflate
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.HttpCompress.CompressionLevels.Default">
            <summary>Use the default compression level</summary>
        </member>
        <member name="F:Mtime.Community.Utility.HttpCompress.CompressionLevels.Highest">
            <summary>The highest level of compression.  Also the slowest.</summary>
        </member>
        <member name="F:Mtime.Community.Utility.HttpCompress.CompressionLevels.Higher">
            <summary>A higher level of compression.</summary>
        </member>
        <member name="F:Mtime.Community.Utility.HttpCompress.CompressionLevels.High">
            <summary>A high level of compression.</summary>
        </member>
        <member name="F:Mtime.Community.Utility.HttpCompress.CompressionLevels.More">
            <summary>More compression.</summary>
        </member>
        <member name="F:Mtime.Community.Utility.HttpCompress.CompressionLevels.Normal">
            <summary>Normal compression.</summary>
        </member>
        <member name="F:Mtime.Community.Utility.HttpCompress.CompressionLevels.Less">
            <summary>Less than normal compression.</summary>
        </member>
        <member name="F:Mtime.Community.Utility.HttpCompress.CompressionLevels.Low">
            <summary>A low level of compression.</summary>
        </member>
        <member name="F:Mtime.Community.Utility.HttpCompress.CompressionLevels.Lower">
            <summary>A lower level of compression.</summary>
        </member>
        <member name="F:Mtime.Community.Utility.HttpCompress.CompressionLevels.Lowest">
            <summary>The lowest level of compression that still performs compression.</summary>
        </member>
        <member name="F:Mtime.Community.Utility.HttpCompress.CompressionLevels.None">
            <summary>No compression.  Use this is you are quite silly.</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Encryption.PkzipClassic">
            <summary>
            PkzipClassic embodies the classic or original encryption facilities used in Pkzip archives.
            While it has been superceded by more recent and more powerful algorithms, its still in use and 
            is viable for preventing casual snooping
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassic.GenerateKeys(System.Byte[])">
            <summary>
            Generates new encryption keys based on given seed
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Encryption.PkzipClassicCryptoBase">
            <summary>
            PkzipClassicCryptoBase provides the low level facilities for encryption
            and decryption using the PkzipClassic algorithm.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassicCryptoBase.TransformByte">
            <summary>
            Transform a single byte 
            </summary>
            <returns>
            The transformed value
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassicCryptoBase.SetKeys(System.Byte[])">
            <summary>
            Set the key schedule for encryption/decryption.
            </summary>
            <param name="keyData">The data use to set the keys from.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassicCryptoBase.UpdateKeys(System.Byte)">
            <summary>
            Update encryption keys 
            </summary>		
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassicCryptoBase.Reset">
            <summary>
            Reset the internal state.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform">
            <summary>
            PkzipClassic CryptoTransform for encryption.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform.#ctor(System.Byte[])">
            <summary>
            Initialise a new instance of <see cref="T:ICSharpCode.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform"></see>
            </summary>
            <param name="keyBlock">The key block to use.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Transforms the specified region of the specified byte array.
            </summary>
            <param name="inputBuffer">The input for which to compute the transform.</param>
            <param name="inputOffset">The offset into the byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the byte array to use as data.</param>
            <returns>The computed transform.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Transforms the specified region of the input byte array and copies 
            the resulting transform to the specified region of the output byte array.
            </summary>
            <param name="inputBuffer">The input for which to compute the transform.</param>
            <param name="inputOffset">The offset into the input byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the input byte array to use as data.</param>
            <param name="outputBuffer">The output to which to write the transform.</param>
            <param name="outputOffset">The offset into the output byte array from which to begin writing data.</param>
            <returns>The number of bytes written.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform.Dispose">
            <summary>
            Cleanup internal state.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform.CanReuseTransform">
            <summary>
            Gets a value indicating whether the current transform can be reused.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform.InputBlockSize">
            <summary>
            Gets the size of the input data blocks in bytes.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform.OutputBlockSize">
            <summary>
            Gets the size of the output data blocks in bytes.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform.CanTransformMultipleBlocks">
            <summary>
            Gets a value indicating whether multiple blocks can be transformed.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform">
            <summary>
            PkzipClassic CryptoTransform for decryption.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform.#ctor(System.Byte[])">
            <summary>
            Initialise a new instance of <see cref="T:ICSharpCode.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform"></see>.
            </summary>
            <param name="keyBlock">The key block to decrypt with.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Transforms the specified region of the specified byte array.
            </summary>
            <param name="inputBuffer">The input for which to compute the transform.</param>
            <param name="inputOffset">The offset into the byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the byte array to use as data.</param>
            <returns>The computed transform.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Transforms the specified region of the input byte array and copies 
            the resulting transform to the specified region of the output byte array.
            </summary>
            <param name="inputBuffer">The input for which to compute the transform.</param>
            <param name="inputOffset">The offset into the input byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the input byte array to use as data.</param>
            <param name="outputBuffer">The output to which to write the transform.</param>
            <param name="outputOffset">The offset into the output byte array from which to begin writing data.</param>
            <returns>The number of bytes written.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform.Dispose">
            <summary>
            Cleanup internal state.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform.CanReuseTransform">
            <summary>
            Gets a value indicating whether the current transform can be reused.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform.InputBlockSize">
            <summary>
            Gets the size of the input data blocks in bytes.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform.OutputBlockSize">
            <summary>
            Gets the size of the output data blocks in bytes.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform.CanTransformMultipleBlocks">
            <summary>
            Gets a value indicating whether multiple blocks can be transformed.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Encryption.PkzipClassicManaged">
            <summary>
            Defines a wrapper object to access the Pkzip algorithm. 
            This class cannot be inherited.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassicManaged.GenerateIV">
            <summary>
            Generate an initial vector.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassicManaged.GenerateKey">
            <summary>
            Generate a new random key.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassicManaged.CreateEncryptor(System.Byte[],System.Byte[])">
            <summary>
            Create an encryptor.
            </summary>
            <param name="rgbKey">The key to use for this encryptor.</param>
            <param name="rgbIV">Initialisation vector for the new encryptor.</param>
            <returns>Returns a new PkzipClassic encryptor</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassicManaged.CreateDecryptor(System.Byte[],System.Byte[])">
            <summary>
            Create a decryptor.
            </summary>
            <param name="rgbKey">Keys to use for this new decryptor.</param>
            <param name="rgbIV">Initialisation vector for the new decryptor.</param>
            <returns>Returns a new decryptor.</returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.PkzipClassicManaged.BlockSize">
            <summary>
            Get / set the applicable block size in bits.
            </summary>
            <remarks>The only valid block size is 8.</remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.PkzipClassicManaged.LegalKeySizes">
            <summary>
            Get an array of legal <see cref="T:System.Security.Cryptography.KeySizes">key sizes.</see>
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.PkzipClassicManaged.LegalBlockSizes">
            <summary>
            Get an array of legal <see cref="T:System.Security.Cryptography.KeySizes">block sizes</see>.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.PkzipClassicManaged.Key">
            <summary>
            Get / set the key value applicable.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.StreamUtils">
            <summary>
            Provides simple <see cref="T:System.IO.Stream"/>" utilities.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.StreamUtils.ReadFully(System.IO.Stream,System.Byte[])">
            <summary>
            Read from a <see cref="T:System.IO.Stream"/> ensuring all the required data is read.
            </summary>
            <param name="stream">The stream to read.</param>
            <param name="buffer">The buffer to fill.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.StreamUtils.ReadFully(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read from a <see cref="T:System.IO.Stream"/>" ensuring all the required data is read.
            </summary>
            <param name="stream">The stream to read data from.</param>
            <param name="buffer">The buffer to store data in.</param>
            <param name="offset">The offset at which to begin storing data.</param>
            <param name="count">The number of bytes of data to store.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.StreamUtils.Copy(System.IO.Stream,System.IO.Stream,System.Byte[])">
            <summary>
            Copy the contents of one <see cref="T:System.IO.Stream"/> to another.
            </summary>
            <param name="source">The stream to source data from.</param>
            <param name="destination">The stream to write data to.</param>
            <param name="buffer">The buffer to use during copying.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.StreamUtils.#ctor">
            <summary>
            Initialise an instance of <see cref="T:ICSharpCode.SharpZipLib.Core.StreamUtils"></see>
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Checksums.Crc32">
             <summary>
             Generate a table for a byte-wise 32-bit CRC calculation on the polynomial:
             x^32+x^26+x^23+x^22+x^16+x^12+x^11+x^10+x^8+x^7+x^5+x^4+x^2+x+1.
            
             Polynomials over GF(2) are represented in binary, one bit per coefficient,
             with the lowest powers in the most significant bit.  Then adding polynomials
             is just exclusive-or, and multiplying a polynomial by x is a right shift by
             one.  If we call the above polynomial p, and represent a byte as the
             polynomial q, also with the lowest power in the most significant bit (so the
             byte 0xb1 is the polynomial x^7+x^3+x+1), then the CRC is (q*x^32) mod p,
             where a mod b means the remainder after dividing a by b.
            
             This calculation is done using the shift-register method of multiplying and
             taking the remainder.  The register is initialized to zero, and for each
             incoming bit, x^32 is added mod p to the register if the bit is a one (where
             x^32 mod p is p+x^32 = x^26+...+1), and the register is multiplied mod p by
             x (which is shifting right by one and adding x^32 mod p if the bit shifted
             out is a one).  We start with the highest power (least significant bit) of
             q and repeat for all eight bits of q.
            
             The table is simply the CRC of all possible eight bit values.  This is all
             the information needed to generate CRC's on data a byte at a time for all
             combinations of CRC register values and incoming bytes.
             </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Checksums.Crc32.crc">
            <summary>
            The crc data checksum so far.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Crc32.Reset">
            <summary>
            Resets the CRC32 data checksum as if no update was ever called.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Crc32.Update(System.Int32)">
            <summary>
            Updates the checksum with the int bval.
            </summary>
            <param name = "value">
            the byte is taken as the lower 8 bits of value
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Crc32.Update(System.Byte[])">
            <summary>
            Updates the checksum with the bytes taken from the array.
            </summary>
            <param name="buffer">
            buffer an array of bytes
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Crc32.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Adds the byte array to the data checksum.
            </summary>
            <param name = "buffer">
            The buffer which contains the data
            </param>
            <param name = "offset">
            The offset in the buffer where the data starts
            </param>
            <param name = "count">
            The number of data bytes to update the CRC with.
            </param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Checksums.Crc32.Value">
            <summary>
            Returns the CRC32 data checksum computed so far.
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.Web.PageContext.GetIntFromRequest(System.Web.HttpContext,System.String,System.Int32)">
            <summary>
            获取请求的数字
            </summary>
            <param name="context"></param>
            <param name="key"></param>
            <param name="defaultReturnValue"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Web.PageContext.GetStringFromRequest(System.Web.HttpContext,System.String,System.String)">
            <summary>
            获取请求的字符串，默认返回string.empty
            </summary>
            <param name="context"></param>
            <param name="key"></param>
            <param name="defaultReturnValue"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Web.PageContext.GetBooleanFromRequest(System.Web.HttpContext,System.String,System.Boolean)">
            <summary>
            获取请求参数的Bool类型的值
            对于数字，大于1则为true
            对于字符，除了“true”和“false”外的字符都返回默认值（false）
            没有则返回默认值（false）
            </summary>
            <param name="context"></param>
            <param name="key"></param>
            <param name="defaultReturnValue"></param>
            <returns></returns>
        </member>
        <member name="T:Rss.RssModuleItem">
            <summary>A module may contain any number of items (either channel-based or item-based).</summary>
        </member>
        <member name="M:Rss.RssModuleItem.#ctor">
            <summary>Initialize a new instance of the RssModuleItem class</summary>
        </member>
        <member name="M:Rss.RssModuleItem.#ctor(System.String)">
            <summary>Initialize a new instance of the RssModuleItem class</summary>
            <param name="name">The name of this RssModuleItem.</param>
        </member>
        <member name="M:Rss.RssModuleItem.#ctor(System.String,System.Boolean)">
            <summary>Initialize a new instance of the RssModuleItem class</summary>
            <param name="name">The name of this RssModuleItem.</param>
            <param name="required">Is text required for this RssModuleItem?</param>
        </member>
        <member name="M:Rss.RssModuleItem.#ctor(System.String,System.String)">
            <summary>Initialize a new instance of the RssModuleItem class</summary>
            <param name="name">The name of this RssModuleItem.</param>
            <param name="text">The text contained within this RssModuleItem.</param>
        </member>
        <member name="M:Rss.RssModuleItem.#ctor(System.String,System.Boolean,System.String)">
            <summary>Initialize a new instance of the RssModuleItem class</summary>
            <param name="name">The name of this RssModuleItem.</param>
            <param name="required">Is text required for this RssModuleItem?</param>
            <param name="text">The text contained within this RssModuleItem.</param>
        </member>
        <member name="M:Rss.RssModuleItem.#ctor(System.String,System.String,Rss.RssModuleItemCollection)">
            <summary>Initialize a new instance of the RssModuleItem class</summary>
            <param name="name">The name of this RssModuleItem.</param>
            <param name="text">The text contained within this RssModuleItem.</param>
            <param name="subElements">The sub-elements of this RssModuleItem (if any exist).</param>
        </member>
        <member name="M:Rss.RssModuleItem.#ctor(System.String,System.Boolean,System.String,Rss.RssModuleItemCollection)">
            <summary>Initialize a new instance of the RssModuleItem class</summary>
            <param name="name">The name of this RssModuleItem.</param>
            <param name="required">Is text required for this RssModuleItem?</param>
            <param name="text">The text contained within this RssModuleItem.</param>
            <param name="subElements">The sub-elements of this RssModuleItem (if any exist).</param>
        </member>
        <member name="M:Rss.RssModuleItem.ToString">
            <summary>Returns a string representation of the current Object.</summary>
            <returns>The item's title, description, or "RssModuleItem" if the title and description are blank.</returns>
        </member>
        <member name="P:Rss.RssModuleItem.Name">
            <summary>
            The name of this RssModuleItem.
            </summary>
        </member>
        <member name="P:Rss.RssModuleItem.Text">
            <summary>
            The text contained within this RssModuleItem.
            </summary>
        </member>
        <member name="P:Rss.RssModuleItem.SubElements">
            <summary>
            The sub-elements of this RssModuleItem (if any exist).
            </summary>
        </member>
        <member name="P:Rss.RssModuleItem.IsRequired">
            <summary>
            Is text for this element required?
            </summary>
        </member>
        <member name="T:Rss.RssFeedCollection">
            <summary>A strongly typed collection of <see cref="T:Rss.RssFeed"/> objects</summary>
        </member>
        <member name="M:Rss.RssFeedCollection.Add(Rss.RssFeed)">
            <summary>Adds a specified feed to this collection.</summary>
            <param name="feed">The feed to add.</param>
            <returns>The zero-based index of the added feed.</returns>
        </member>
        <member name="M:Rss.RssFeedCollection.Contains(Rss.RssFeed)">
            <summary>Determines whether the RssFeedCollection contains a specific element.</summary>
            <param name="rssFeed">The RssFeed to locate in the RssFeedCollection.</param>
            <returns>true if the RssFeedCollection contains the specified value; otherwise, false.</returns>
        </member>
        <member name="M:Rss.RssFeedCollection.CopyTo(Rss.RssFeed[],System.Int32)">
            <summary>Copies the entire RssFeedCollection to a compatible one-dimensional <see cref="T:System.Array"/>, starting at the specified index of the target array.</summary>
            <param name="array">The one-dimensional RssFeed Array that is the destination of the elements copied from RssFeedCollection. The Array must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">array is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero.</exception>
            <exception cref="T:System.ArgumentException">array is multidimensional. -or- index is equal to or greater than the length of array.-or-The number of elements in the source RssFeedCollection is greater than the available space from index to the end of the destination array.</exception>
        </member>
        <member name="M:Rss.RssFeedCollection.IndexOf(Rss.RssFeed)">
            <summary>Searches for the specified RssFeed and returns the zero-based index of the first occurrence within the entire RssFeedCollection.</summary>
            <param name="rssFeed">The RssFeed to locate in the RssFeedCollection.</param>
            <returns>The zero-based index of the first occurrence of RssFeed within the entire RssFeedCollection, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Rss.RssFeedCollection.Insert(System.Int32,Rss.RssFeed)">
            <summary>Inserts a feed into this collection at a specified index.</summary>
            <param name="index">The zero-based index of the collection at which to insert the feed.</param>
            <param name="feed">The feed to insert into this collection.</param>
        </member>
        <member name="M:Rss.RssFeedCollection.Remove(Rss.RssFeed)">
            <summary>Removes a specified category from this collection.</summary>
            <param name="feed">The category to remove.</param>
        </member>
        <member name="P:Rss.RssFeedCollection.Item(System.Int32)">
            <summary>Gets or sets the feed at a specified index.<para>In C#, this property is the indexer for the class.</para></summary>
            <param name="index">The index of the collection to access.</param>
            <value>A feed at each valid index.</value>
            <remarks>This method is an indexer that can be used to access the collection.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index.</exception>
        </member>
        <member name="P:Rss.RssFeedCollection.Item(System.String)">
            <summary>Gets or sets the feed with the given name.<para>In C#, this property is the indexer for the class.</para></summary>
            <param name="url">The url of the feed to access.</param>
            <value>A feed at each valid url. If the feed does not exist, null.</value>
            <remarks>This method is an indexer that can be used to access the collection.</remarks>
        </member>
        <member name="T:ProtoBuf.Helpers">
            <summary>
            Not all frameworks are created equal (fx1.1 vs fx2.0,
            micro-framework, compact-framework,
            silverlight, etc). This class simply wraps up a few things that would
            otherwise make the real code unnecessarily messy, providing fallback
            implementations if necessary.
            </summary>
        </member>
        <member name="T:Mtime.Community.Utility.OAuth.OAuthHelper">
            <summary>
            工具
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.OAuth.OAuthHelper.AnalyseToken(System.String,Mtime.Community.Components.Constants.OAuthProvider)">
            <summary>
            Token分析
            </summary>
            <param name="response"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.OAuth.OAuthHelper.GetWebExceptionJsonResult(System.Net.WebException)">
            <summary>
            获取Web ExceptionJson结果
            </summary>
            <param name="exception"></param>
        </member>
        <member name="M:Mtime.Community.Utility.OAuth.OAuthHelper.GetWebExceptionResult(System.Net.WebException)">
            <summary>
            获取Web Exception结果
            </summary>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.OAuth.OAuthHelper.CreateInstence(Mtime.Community.Components.Constants.OAuthProvider,Mtime.Community.Utility.OAuth.OAuthConfigInfo)">
            <summary>
            创建指定服务提供者的的新实例
            </summary>
            <param name="provider">服务提供者</param>
            <param name="config">配置</param>
        </member>
        <member name="M:Mtime.Community.Utility.OAuth.OAuthHelper.GetOAuthName(Mtime.Community.Components.Constants.OAuthProvider)">
            <summary>
            获取ProviderType的名称
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="T:Mtime.Community.Utility.zxing.qrcode.encoder.MatrixUtil">
            <author>  satorux@google.com (Satoru Takabayashi) - creator
            </author>
            <author>  dswitkin@google.com (Daniel Switkin) - ported from C++
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="T:Mtime.Community.Utility.zxing.EncodeHintType">
            <summary> These are a set of hints that you may pass to Writers to specify their behavior.
            
            </summary>
            <author>  dswitkin@google.com (Daniel Switkin)
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="F:Mtime.Community.Utility.zxing.EncodeHintType.ERROR_CORRECTION">
            <summary> Specifies what degree of error correction to use, for example in QR Codes (type Integer).</summary>
        </member>
        <member name="F:Mtime.Community.Utility.zxing.EncodeHintType.CHARACTER_SET">
            <summary> Specifies what character encoding to use where applicable (type String)</summary>
        </member>
        <member name="T:Mtime.Community.Utility.Client.SHA1KeyTransformer">
            <summary>
            A key transformer which converts the item keys into their SHA1 hash.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmpty(System.Collections.ICollection)">
            <summary>
            Determines whether the collection is null or empty.
            </summary>
            <param name="collection">The collection.</param>
            <returns>
            	<c>true</c> if the collection is null or empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Determines whether the collection is null or empty.
            </summary>
            <param name="collection">The collection.</param>
            <returns>
            	<c>true</c> if the collection is null or empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmptyOrDefault``1(System.Collections.Generic.IList{``0})">
            <summary>
            Determines whether the collection is null, empty or its contents are uninitialized values.
            </summary>
            <param name="list">The list.</param>
            <returns>
            	<c>true</c> if the collection is null or empty or its contents are uninitialized values; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.CollectionUtils.Slice``1(System.Collections.Generic.IList{``0},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Makes a slice of the specified list in between the start and end indexes.
            </summary>
            <param name="list">The list.</param>
            <param name="start">The start index.</param>
            <param name="end">The end index.</param>
            <returns>A slice of the list.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.CollectionUtils.Slice``1(System.Collections.Generic.IList{``0},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Makes a slice of the specified list in between the start and end indexes,
            getting every so many items based upon the step.
            </summary>
            <param name="list">The list.</param>
            <param name="start">The start index.</param>
            <param name="end">The end index.</param>
            <param name="step">The step.</param>
            <returns>A slice of the list.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.CollectionUtils.GroupBy``2(System.Collections.Generic.ICollection{``1},Newtonsoft.Json.Utilities.Func{``1,``0})">
            <summary>
            Group the collection using a function which returns the key.
            </summary>
            <param name="source">The source collection to group.</param>
            <param name="keySelector">The key selector.</param>
            <returns>A Dictionary with each key relating to a list of objects in a list grouped under it.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.CollectionUtils.AddRange``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the elements of the specified collection to the specified generic IList.
            </summary>
            <param name="initial">The list to add to.</param>
            <param name="collection">The collection of elements to add.</param>
        </member>
        <member name="T:Newtonsoft.Json.JavaScriptObject">
            <summary>
            Represents a JavaScript object.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JavaScriptObject"/> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptObject.#ctor(Newtonsoft.Json.JavaScriptObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JavaScriptObject"/> class that
            contains values copied from the specified <see cref="T:Newtonsoft.Json.JavaScriptObject"/>.
            </summary>
            <param name="javaScriptObject">The <see cref="T:Newtonsoft.Json.JavaScriptObject"/> whose elements are copied to the new object.</param>
        </member>
        <member name="M:Mtime.Community.Utility.Json.JsonNumber.ToString">
            <returns>A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.</returns>
        </member>
        <member name="M:Mtime.Community.Utility.Json.JsonDate.ToString">
            <returns>A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.</returns>
        </member>
        <member name="T:GifUtility.LogicalScreenDescriptor">
            <summary>
            逻辑屏幕标识符(Logical Screen Descriptor)
            </summary>
        </member>
        <member name="P:GifUtility.LogicalScreenDescriptor.Width">
            <summary>
            逻辑屏幕宽度 像素数，定义GIF图象的宽度
            </summary>
        </member>
        <member name="P:GifUtility.LogicalScreenDescriptor.Height">
            <summary>
            逻辑屏幕高度 像素数，定义GIF图象的高度
            </summary>
        </member>
        <member name="P:GifUtility.LogicalScreenDescriptor.BgColorIndex">
            <summary>
            背景色,背景颜色(在全局颜色列表中的索引，如果没有全局颜色列表，该值没有意义)
            </summary>
        </member>
        <member name="P:GifUtility.LogicalScreenDescriptor.PixcelAspect">
            <summary>
            像素宽高比,像素宽高比(Pixel Aspect Radio)
            </summary>
        </member>
        <member name="P:GifUtility.LogicalScreenDescriptor.GlobalColorTableFlag">
            <summary>
            m - 全局颜色列表标志(Global Color Table Flag)，当置位时表示有全局颜色列表，pixel值有意义.
            </summary>
        </member>
        <member name="P:GifUtility.LogicalScreenDescriptor.ColorResoluTion">
            <summary>
            cr - 颜色深度(Color ResoluTion)，cr+1确定图象的颜色深度.
            </summary>
        </member>
        <member name="P:GifUtility.LogicalScreenDescriptor.SortFlag">
            <summary>
            s - 分类标志(Sort Flag)，如果置位表示全局颜色列表分类排列.
            </summary>
        </member>
        <member name="P:GifUtility.LogicalScreenDescriptor.GlobalColorTableSize">
            <summary>
            全局颜色列表大小，pixel+1确定颜色列表的索引数（2的pixel+1次方）.
            </summary>
        </member>
        <member name="T:GifUtility.GifImage">
            <summary>
            类GifImage - 描述Gif的类
            </summary>
        </member>
        <member name="P:GifUtility.GifImage.Width">
            <summary>
            背景图片的长度
            </summary>
        </member>
        <member name="P:GifUtility.GifImage.Height">
            <summary>
            背景图片的高度
            </summary>
        </member>
        <member name="P:GifUtility.GifImage.GlobalColorTable">
            <summary>
            全局颜色列表
            </summary>
        </member>
        <member name="P:GifUtility.GifImage.Palette">
            <summary>
            Gif的调色板
            </summary>
        </member>
        <member name="P:GifUtility.GifImage.GlobalColorIndexedTable">
            <summary>
            全局颜色的索引表
            </summary>
        </member>
        <member name="P:GifUtility.GifImage.CommentExtensions">
            <summary>
            注释块集合
            </summary>
        </member>
        <member name="P:GifUtility.GifImage.ApplictionExtensions">
            <summary>
            应用程序扩展块集合
            </summary>
        </member>
        <member name="P:GifUtility.GifImage.PlainTextEntensions">
            <summary>
            图形文本扩展集合
            </summary>
        </member>
        <member name="P:GifUtility.GifImage.LogicalScreenDescriptor">
            <summary>
            逻辑屏幕描述
            </summary>
        </member>
        <member name="P:GifUtility.GifImage.Frames">
            <summary>
            解析出来的帧集合
            </summary>
        </member>
        <member name="T:Mtime.Community.Components.Constants.v3.AllowedHtmlTagType">
            <summary>
            允许的HTML标记类型
            </summary>
        </member>
        <member name="T:Mtime.Community.Components.Constants.v3.AllowedHtmlTags">
            <summary>
            暂时放在这里
            </summary>
        </member>
        <member name="T:Mtime.Service.Files.ShareFolderFileService">
            <summary> 
            ShareFolderFileService 
            </summary>
        </member>
        <member name="M:Mtime.Service.Files.ShareFolderFileService.RenameFileByID(System.String,System.String,System.String,System.String)">
            <summary>
            更改文件名
            </summary>
            <param name="fileServer"></param>
            <param name="id"></param>
            <param name="extension"></param>
            <param name="newID"></param>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterPending">
            <summary>
            This class stores the pending output of the Deflater.
            
            author of the original java version : Jochen Hoenicke
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterPending.#ctor">
            <summary>
            Construct instance with default buffer size
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.Web.AsyncPageState.#ctor(Mtime.Community.Utility.Web.PageContext,Mtime.Community.Utility.Web.IAsyncPage,System.AsyncCallback,System.Object)">
            <summary>
            Default constructor.
            </summary>
            <param name="ctx">A HttpContext object</param>
            <param name="cb">Callback function</param>
            <param name="extraData">Extra data</param>
        </member>
        <member name="M:Mtime.Community.Utility.Web.AsyncPageState.CompleteRequest">
            <summary>
            Completes the request.
            </summary>
        </member>
        <member name="T:Mtime.Community.Utility.URLRewriter.Config.GdvnetRewriterConfig">
            <summary>
            定义了URL重写的配置类文件结构以及获取配置
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.URLRewriter.Config.GdvnetRewriterConfig.GetConfig">
            <summary>
            从配置文件中返回一个RewriterConfiguration实例
            </summary>
        </member>
        <member name="T:Mtime.Community.Utility.zxing.qrcode.encoder.MaskUtil">
            <author>  satorux@google.com (Satoru Takabayashi) - creator
            </author>
            <author>  dswitkin@google.com (Daniel Switkin) - ported from C++
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="T:Mtime.Community.Utility.zxing.common.reedsolomon.ReedSolomonEncoder">
            <summary> <p>Implements Reed-Solomon enbcoding, as the name implies.</p>
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>  William Rucklidge
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="T:Mtime.Community.Utility.Net.Components.ReadOnlySocketStream">
            <summary>
            高性能只读Socket流
            </summary>
        </member>
        <member name="M:Mtime.Service.Messaging.MsgServiceFactory.Create(System.String)">
            <summary>
            获取消息服务
            </summary>
            <param name="label">消息队列名称</param>
            <returns>消息服务</returns>
        </member>
        <member name="T:Newtonsoft.Json.JsonToken">
            <summary>
            Specifies the type of Json token.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.None">
            <summary>
            This is returned by the <see cref="T:Newtonsoft.Json.JsonReader"/> if a <see cref="M:Newtonsoft.Json.JsonReader.Read"/> method has not been called. 
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.StartObject">
            <summary>
            An object start token.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.StartArray">
            <summary>
            An array start token.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.PropertyName">
            <summary>
            An object property name.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Comment">
            <summary>
            A comment.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Integer">
            <summary>
            An interger.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Float">
            <summary>
            A float.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.String">
            <summary>
            A string.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Boolean">
            <summary>
            A boolean.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Null">
            <summary>
            A null token.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Undefined">
            <summary>
            An undefined token.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.EndObject">
            <summary>
            An object end token.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.EndArray">
            <summary>
            An array end token.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Constructor">
            <summary>
            A JavaScript object constructor.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Date">
            <summary>
            A Date.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.JavaScriptConvert">
            <summary>
            Provides methods for converting between common language runtime types and JavaScript types.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JavaScriptConvert.True">
            <summary>
            Represents JavaScript's boolean value true as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JavaScriptConvert.False">
            <summary>
            Represents JavaScript's boolean value false as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JavaScriptConvert.Null">
            <summary>
            Represents JavaScript's null as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JavaScriptConvert.Undefined">
            <summary>
            Represents JavaScript's undefined as a string. This field is read-only.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.ToString(System.DateTime)">
            <summary>
            Converts the <see cref="T:System.DateTime"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.ToString(System.Boolean)">
            <summary>
            Converts the <see cref="T:System.Boolean"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.Boolean"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.ToString(System.Char)">
            <summary>
            Converts the <see cref="T:System.Char"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.Char"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.ToString(System.Enum)">
            <summary>
            Converts the <see cref="T:System.Enum"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.Enum"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.ToString(System.Int32)">
            <summary>
            Converts the <see cref="T:System.Int32"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.Int32"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.ToString(System.Int16)">
            <summary>
            Converts the <see cref="T:System.Int16"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.Int16"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.ToString(System.UInt16)">
            <summary>
            Converts the <see cref="T:System.UInt16"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.UInt16"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.ToString(System.UInt32)">
            <summary>
            Converts the <see cref="T:System.UInt32"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.UInt32"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.ToString(System.Int64)">
            <summary>
            Converts the <see cref="T:System.Int64"/>  to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.Int64"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.ToString(System.UInt64)">
            <summary>
            Converts the <see cref="T:System.UInt64"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.UInt64"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.ToString(System.Single)">
            <summary>
            Converts the <see cref="T:System.Single"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.Single"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.ToString(System.Double)">
            <summary>
            Converts the <see cref="T:System.Double"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.Double"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.ToString(System.Byte)">
            <summary>
            Converts the <see cref="T:System.Byte"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.Byte"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.ToString(System.SByte)">
            <summary>
            Converts the <see cref="T:System.SByte"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.SByte"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.ToString(System.Decimal)">
            <summary>
            Converts the <see cref="T:System.Decimal"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.SByte"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.ToString(System.Guid)">
            <summary>
            Converts the <see cref="T:System.Guid"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.Guid"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.ToString(System.String)">
            <summary>
            Converts the <see cref="T:System.String"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.ToString(System.String,System.Char)">
            <summary>
            Converts the <see cref="T:System.String"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="delimter">The string delimiter character.</param>
            <returns>A Json string representation of the <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.ToString(System.Object)">
            <summary>
            Converts the <see cref="T:System.Object"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.SerializeObject(System.Object)">
            <summary>
            Serializes the specified object to a Json object.
            </summary>
            <param name="value">The object to serialize.</param>
            <returns>A Json string representation of the object.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.DeserializeObject(System.String)">
            <summary>
            Deserializes the specified object to a Json object.
            </summary>
            <param name="value">The object to deserialize.</param>
            <returns>The deserialized object from the Json string.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.DeserializeObject(System.String,System.Type)">
            <summary>
            Deserializes the specified object to a Json object.
            </summary>
            <param name="value">The object to deserialize.</param>
            <param name="type">The <see cref="T:System.Type"/> of object being deserialized.</param>
            <returns>The deserialized object from the Json string.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.DeserializeObject``1(System.String)">
            <summary>
            Deserializes the specified object to a Json object.
            </summary>
            <typeparam name="T">The type of the object to deserialize.</typeparam>
            <param name="value">The object to deserialize.</param>
            <returns>The deserialized object from the Json string.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JavaScriptConvert.DeserializeObject``1(System.String,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Deserializes the specified object to a Json object.
            </summary>
            <typeparam name="T">The type of the object to deserialize.</typeparam>
            <param name="value">The object to deserialize.</param>
            <param name="converters">Converters to use while deserializing.</param>
            <returns>The deserialized object from the Json string.</returns>
        </member>
        <member name="M:Mtime.Community.Utility.imdb.GetHTML(System.String)">
            <summary>
            判断Imdb号是否存在
            </summary>
            <param name="imdb"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.imdb.DelOthersChar(System.String)">
            <summary>
            删除\n字符
            </summary>
            <param name="strHtml"></param>
            <returns></returns>
        </member>
        <member name="F:GifUtility.BitEncoder.current_Bit">
            <summary>
            上一次处理剩余的bit数
            </summary>
        </member>
        <member name="F:GifUtility.BitEncoder.OutList">
            <summary>
            输出字节数据的集合
            </summary>
        </member>
        <member name="M:GifUtility.BitEncoder.Add(System.Int32)">
            <summary>
            编码
            </summary>
            <param name="inByte">输入数据</param>
            <param name="inBit">输入数据的bit位数</param>
        </member>
        <member name="P:GifUtility.BitEncoder.Length">
            <summary>
            当前输出字节数据长度
            </summary>
        </member>
        <member name="M:Mtime.EPay.AliPayEncrypt.GetMD5(System.String,System.Text.Encoding)">
            <summary>
            获取MD5值
            </summary>
            <param name="input"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="T:Mtime.Community.Utility.ContactImporter.MailContact">
            <summary>
            联系人信息
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.ContactImporter.MailContact.Name">
            <summary>
             姓名
            </summary>
        </member>
        <member name="P:Mtime.Community.Utility.ContactImporter.MailContact.Email">
            <summary>
             Email
            </summary>
        </member>
        <member name="T:Mtime.Community.Utility.ContactImporter.HttpValueCollection">
            <summary>
            请求数据
            </summary>
        </member>
        <member name="T:Mtime.Community.Utility.Client.SerializedVersionType">
            <summary>
            序列号版本类型
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.Client.SerializedVersionType.NotSet">
            <summary>
            未设置
            </summary>
        </member>
        <member name="F:Mtime.Community.Utility.Client.SerializedVersionType.Mtime2011">
            <summary>
            当前的处理方式
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.Client.Serializer.CombinationTypeAndData(System.UInt16,System.Byte[])">
            <summary>
            合并类型和数据在一起
            </summary>
            <param name="type"></param>
            <param name="dataBits"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Client.Serializer.UnCombinationTypeAndData(Mtime.Community.Utility.Client.SerializedItem)">
            <summary>
            将类型和数据解包成CacheItem
            </summary>
            <param name="serializedItem"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Client.Serializer.IdentifyVersion(System.Byte[],System.Int32)">
            <summary>
            鉴别版本
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Client.SimpleRemoteService.Protocol.Operation.GetRequestData">
            <summary>
            发送:SimpleRequest SimpleRequestMessageDataLength\r\nSimpleRequestMessage
            </summary>
            <param name="clientId"></param>
            <param name="userToken"></param>
            <returns></returns>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ZipHelperStream">
            <summary>
            This class assists with writing/reading from Zip files.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipHelperStream.#ctor(System.String)">
            <summary>
            Initialise an instance of this class.
            </summary>
            <param name="name">The name of the file to open.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipHelperStream.#ctor(System.IO.Stream)">
            <summary>
            Initialise a new instance of <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipHelperStream"/>.
            </summary>
            <param name="stream">The stream to use.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipHelperStream.WriteZip64EndOfCentralDirectory(System.Int64,System.Int64,System.Int64)">
            <summary>
            Write Zip64 end of central directory records (File header and locator).
            </summary>
            <param name="noOfEntries">The number of entries in the central directory.</param>
            <param name="sizeEntries">The size of entries in the central directory.</param>
            <param name="centralDirOffset">The offset of the dentral directory.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipHelperStream.WriteEndOfCentralDirectory(System.Int64,System.Int64,System.Int64,System.Byte[])">
            <summary>
            Write the required records to end the central directory.
            </summary>
            <param name="noOfEntries">The number of entries in the directory.</param>
            <param name="sizeEntries">The size of the entries in the directory.</param>
            <param name="startOfCentralDirectory">The start of the central directory.</param>
            <param name="comment">The archive comment.  (This can be null).</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipHelperStream.ReadLEShort">
            <summary>
            Read an unsigned short in little endian byte order.
            </summary>
            <returns>Returns the value read.</returns>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs.
            </exception>
            <exception cref="T:System.IO.EndOfStreamException">
            The file ends prematurely
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipHelperStream.ReadLEInt">
            <summary>
            Read an int in little endian byte order.
            </summary>
            <returns>Returns the value read.</returns>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs.
            </exception>
            <exception cref="T:System.IO.EndOfStreamException">
            The file ends prematurely
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipHelperStream.ReadLELong">
            <summary>
            Read a long in little endian byte order.
            </summary>
            <returns>The value read.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipHelperStream.WriteLEShort(System.Int32)">
            <summary>
            Write an unsigned short in little endian byte order.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipHelperStream.WriteLEUshort(System.UInt16)">
            <summary>
            Write a ushort in little endian byte order.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipHelperStream.WriteLEInt(System.Int32)">
            <summary>
            Write an int in little endian byte order.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipHelperStream.WriteLEUint(System.UInt32)">
            <summary>
            Write a uint in little endian byte order.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipHelperStream.WriteLELong(System.Int64)">
            <summary>
            Write a long in little endian byte order.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipHelperStream.WriteLEUlong(System.UInt64)">
            <summary>
            Write a ulong in little endian byte order.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipHelperStream.Close">
            <summary>
            Close the stream.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipHelperStream.IsStreamOwner">
            <summary>
            Get / set a value indicating wether the the underlying stream is owned or not.
            </summary>
            <remarks>If the stream is owned it is closed when this instance is closed.</remarks>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer">
            <summary>
            An input buffer customised for use by <see cref="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream"/>
            </summary>
            <remarks>
            The buffer supports decryption of incoming data.
            </remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.#ctor(System.IO.Stream)">
            <summary>
            Initialise a new instance of <see cref="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer"/> with a default buffer size
            </summary>
            <param name="stream">The stream to buffer.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Initialise a new instance of <see cref="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer"/>
            </summary>
            <param name="stream">The stream to buffer.</param>
            <param name="bufferSize">The size to use for the buffer</param>
            <remarks>A minimum buffer size of 1KB is permitted.  Lower sizes are treated as 1KB.</remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.SetInflaterInput(ICSharpCode.SharpZipLib.Zip.Compression.Inflater)">
            <summary>
            Call <see cref="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.SetInput(System.Byte[],System.Int32,System.Int32)"/> passing the current clear text buffer contents.
            </summary>
            <param name="inflater">The inflater to set input for.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.Fill">
            <summary>
            Fill the buffer from the underlying input stream.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ReadRawBuffer(System.Byte[])">
            <summary>
            Read a buffer directly from the input stream
            </summary>
            <param name="buffer">The buffer to fill</param>
            <returns>Returns the number of bytes read.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ReadRawBuffer(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read a buffer directly from the input stream
            </summary>
            <param name="outBuffer">The buffer to read into</param>
            <param name="offset">The offset to start reading data into.</param>
            <param name="length">The number of bytes to read.</param>
            <returns>Returns the number of bytes read.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ReadClearTextBuffer(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read clear text data from the input stream.
            </summary>
            <param name="outBuffer">The buffer to add data to.</param>
            <param name="offset">The offset to start adding data at.</param>
            <param name="length">The number of bytes to read.</param>
            <returns>Returns the number of bytes actually read.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ReadLeByte">
            <summary>
            Read a byte from the input stream.
            </summary>
            <returns>Returns the byte read.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ReadLeShort">
            <summary>
            Read an unsigned short in little endian byte order.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ReadLeInt">
            <summary>
            Read an int in little endian byte order.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ReadLeLong">
            <summary>
            Read an int baseInputStream little endian byte order.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.RawLength">
            <summary>
            Get the length of bytes bytes in the <see cref="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.RawData"/>
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.RawData">
            <summary>
            Get the contents of the raw data buffer.
            </summary>
            <remarks>This may contain encrypted data.</remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ClearTextLength">
            <summary>
            Get the number of useable bytes in <see cref="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ClearText"/>
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ClearText">
            <summary>
            Get the contents of the clear text buffer.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.Available">
            <summary>
            Get/set the number of bytes available
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.CryptoTransform">
            <summary>
            Get/set the <see cref="T:System.Security.Cryptography.ICryptoTransform"/> to apply to any data.
            </summary>
            <remarks>Set this value to null to have no transform applied.</remarks>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Tar.TarInputStream">
            <summary>
            The TarInputStream reads a UNIX tar archive as an InputStream.
            methods are provided to position at each successive entry in
            the archive, and the read each entry as a normal input stream
            using read().
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.#ctor(System.IO.Stream)">
            <summary>
            Construct a TarInputStream with default block factor
            </summary>
            <param name="inputStream">stream to source data from</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Construct a TarInputStream with user specified block factor
            </summary>
            <param name="inputStream">stream to source data from</param>
            <param name="blockFactor">block factor to apply to archive</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.Flush">
            <summary>
            Flushes the baseInputStream
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Set the streams position.  This operation is not supported and will throw a NotSupportedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the stream
            This operation is not supported and will throw a NotSupportedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a block of bytes to this stream using data from a buffer.
            This operation is not supported and will throw a NotSupportedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the current position in the file stream.
            This operation is not supported and will throw a NotSupportedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.ReadByte">
            <summary>
            Reads a byte from the current tar archive entry.
            This method simply calls Read(byte[], int, int).
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads bytes from the current tar archive entry.
            
            This method is aware of the boundaries of the current
            entry in the archive and will deal with them appropriately
            </summary>
            <param name="buffer">
            The buffer into which to place bytes read.
            </param>
            <param name="offset">
            The offset at which to place bytes read.
            </param>
            <param name="count">
            The number of bytes to read.
            </param>
            <returns>
            The number of bytes read, or 0 at end of stream/EOF.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.Close">
            <summary>
            Closes this stream. Calls the TarBuffer's close() method.
            The underlying stream is closed by the TarBuffer.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.SetEntryFactory(ICSharpCode.SharpZipLib.Tar.TarInputStream.IEntryFactory)">
            <summary>
            Set the entry factory for this instance.
            </summary>
            <param name="factory">The factory for creating new entries</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.GetRecordSize">
            <summary>
            Get the record size being used by this stream's TarBuffer.
            </summary>
            <returns>
            TarBuffer record size.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.Skip(System.Int64)">
            <summary>
            Skip bytes in the input buffer. This skips bytes in the
            current entry's data, not the entire archive, and will
            stop at the end of the current entry's data if the number
            to skip extends beyond that point.
            </summary>
            <param name="skipCount">
            The number of bytes to skip.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.Mark(System.Int32)">
            <summary>
            Since we do not support marking just yet, we do nothing.
            </summary>
            <param name ="markLimit">
            The limit to mark.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.Reset">
            <summary>
            Since we do not support marking just yet, we do nothing.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.GetNextEntry">
            <summary>
            Get the next entry in this tar archive. This will skip
            over any remaining data in the current entry, if there
            is one, and place the input stream at the header of the
            next entry, and read the header and instantiate a new
            TarEntry from the header bytes and return that entry.
            If there are no more entries in the archive, null will
            be returned to indicate that the end of the archive has
            been reached.
            </summary>
            <returns>
            The next TarEntry in the archive, or null.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.CopyEntryContents(System.IO.Stream)">
            <summary>
            Copies the contents of the current tar archive entry directly into
            an output stream.
            </summary>
            <param name="outputStream">
            The OutputStream into which to write the entry's data.
            </param>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarInputStream.hasHitEOF">
            <summary>
            Flag set when last block has been read
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarInputStream.entrySize">
            <summary>
            Size of this entry as recorded in header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarInputStream.entryOffset">
            <summary>
            Number of bytes read for this entry so far
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarInputStream.readBuffer">
            <summary>
            Buffer used with calls to <code>Read()</code>
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarInputStream.buffer">
            <summary>
            Working buffer
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarInputStream.currentEntry">
            <summary>
            Current entry being read
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarInputStream.entryFactory">
            <summary>
            Factory used to create TarEntry or descendant class instance
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarInputStream.inputStream">
            <summary>
            Stream used as the source of input data.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarInputStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarInputStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking
            This property always returns false.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarInputStream.CanWrite">
            <summary>
            Gets a value indicating if the stream supports writing.
            This property always returns false.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarInputStream.Length">
            <summary>
            The length in bytes of the stream
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarInputStream.Position">
            <summary>
            Gets or sets the position within the stream. 
            Setting the Position is not supported and throws a NotSupportedExceptionNotSupportedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any attempt to set position</exception>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarInputStream.RecordSize">
            <summary>
            Get the record size being used by this stream's TarBuffer.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarInputStream.Available">
            <summary>
            Get the available data that can be read from the current
            entry in the archive. This does not indicate how much data
            is left in the entire archive, only in the current entry.
            This value is determined from the entry's size header field
            and the amount of data already read from the current entry.
            </summary>
            <returns>
            The number of available bytes for the current entry.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarInputStream.IsMarkSupported">
            <summary>
            Return a value of true if marking is supported; false otherwise.
            </summary>
            <remarks>Currently marking is not supported, the return value is always false.</remarks>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Tar.TarInputStream.IEntryFactory">
            <summary>
            This interface is provided, along with the method <see cref="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.SetEntryFactory(ICSharpCode.SharpZipLib.Tar.TarInputStream.IEntryFactory)"/>, to allow
            the programmer to have their own <see cref="T:ICSharpCode.SharpZipLib.Tar.TarEntry"/> subclass instantiated for the
            entries return from <see cref="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.GetNextEntry"/>.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.IEntryFactory.CreateEntry(System.String)">
            <summary>
            Create an entry based on name alone
            </summary>
            <param name="name">
            Name of the new EntryPointNotFoundException to create
            </param>
            <returns>created TarEntry or descendant class</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.IEntryFactory.CreateEntryFromFile(System.String)">
            <summary>
            Create an instance based on an actual file
            </summary>
            <param name="fileName">
            Name of file to represent in the entry
            </param>
            <returns>
            Created TarEntry or descendant class
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.IEntryFactory.CreateEntry(System.Byte[])">
            <summary>
            Create a tar entry based on the header information passed
            </summary>
            <param name="headerBuf">
            Buffer containing header information to base entry on
            </param>
            <returns>
            Created TarEntry or descendant class
            </returns>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Tar.TarInputStream.EntryFactoryAdapter">
            <summary>
            Standard entry factory class creating instances of the class TarEntry
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.EntryFactoryAdapter.CreateEntry(System.String)">
            <summary>
            Create a TarEntry based on named
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.EntryFactoryAdapter.CreateEntryFromFile(System.String)">
            <summary>
            Create a tar entry with details obtained from <paramref name="fileName">file</paramref>
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.EntryFactoryAdapter.CreateEntry(System.Byte[])">
            <summary>
            Create and entry based on details in <paramref name="headerBuf">header</paramref>
            </summary>			
        </member>
        <member name="T:Mtime.Community.Utility.URLRewriter.Config.PeopleRewriterConfig">
            <summary>
            定义了URL重写的配置类文件结构以及获取配置
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.URLRewriter.Config.PeopleRewriterConfig.GetConfig">
            <summary>
            从配置文件中返回一个RewriterConfiguration实例
            </summary>
        </member>
        <member name="T:Mtime.Community.Utility.URLRewriter.Config.WandaRewriterConfig">
            <summary>
            定义了URL重写的配置类文件结构以及获取配置
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.URLRewriter.Config.WandaRewriterConfig.GetConfig">
            <summary>
            从配置文件中返回一个RewriterConfiguration实例
            </summary>
        </member>
        <member name="T:Mtime.Community.Utility.URLRewriter.Config.CctvRewriterConfig">
            <summary>
            定义了URL重写的配置类文件结构以及获取配置
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.URLRewriter.Config.CctvRewriterConfig.GetConfig">
            <summary>
            从配置文件中返回一个RewriterConfiguration实例
            </summary>
        </member>
        <member name="T:ProtoBuf.SubItemToken">
            <summary>
            Used to hold particulars relating to nested objects. This is opaque to the caller - simply
            give back the token you are given at the end of an object.
            </summary>
        </member>
        <member name="T:ProtoBuf.ProtoIgnoreAttribute">
            <summary>
            Indicates that a member should be excluded from serialization; this
            is only normally used when using implict fields.
            </summary>
        </member>
        <member name="T:ProtoBuf.ProtoPartialIgnoreAttribute">
            <summary>
            Indicates that a member should be excluded from serialization; this
            is only normally used when using implict fields. This allows
            ProtoIgnoreAttribute usage
            even for partial classes where the individual members are not
            under direct control.
            </summary>
        </member>
        <member name="M:ProtoBuf.ProtoPartialIgnoreAttribute.#ctor(System.String)">
            <summary>
            Creates a new ProtoPartialIgnoreAttribute instance.
            </summary>
            <param name="memberName">Specifies the member to be ignored.</param>
        </member>
        <member name="P:ProtoBuf.ProtoPartialIgnoreAttribute.MemberName">
            <summary>
            The name of the member to be ignored.
            </summary>
        </member>
        <member name="T:ProtoBuf.KeyValuePairSurrogate`2">
            <summary>
            Mutable version of the common key/value pair struct; used during serialization
            </summary>
        </member>
        <member name="M:ProtoBuf.KeyValuePairSurrogate`2.op_Implicit(ProtoBuf.KeyValuePairSurrogate{`0,`1})~System.Collections.Generic.KeyValuePair{`0,`1}">
            <summary>
            Convert a surrogate instance to a standard pair instance.
            </summary>
        </member>
        <member name="M:ProtoBuf.KeyValuePairSurrogate`2.op_Implicit(System.Collections.Generic.KeyValuePair{`0,`1})~ProtoBuf.KeyValuePairSurrogate{`0,`1}">
            <summary>
            Convert a standard pair instance to a surrogate instance.
            </summary>
        </member>
        <member name="P:ProtoBuf.KeyValuePairSurrogate`2.Key">
            <summary>
            The key of the pair.
            </summary>
        </member>
        <member name="P:ProtoBuf.KeyValuePairSurrogate`2.Value">
            <summary>
            The value of the pair.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.StringBuffer">
            <summary>
            Builds a string. Unlike StringBuilder this class lets you reuse it's internal buffer.
            </summary>
        </member>
        <member name="F:GifUtility.OcTreeNode.Red">
            <summary>
            红色的数量
            </summary>
        </member>
        <member name="F:GifUtility.OcTreeNode.Green">
            <summary>
            绿色的数量
            </summary>
        </member>
        <member name="F:GifUtility.OcTreeNode.Blue">
            <summary>
            蓝色的数量
            </summary>
        </member>
        <member name="M:GifUtility.OcTreeNode.#ctor(System.Int32,System.Int32,GifUtility.OcTree)">
            <summary>
            八叉树的构造函数
            </summary>
            <param name="leaf">是否是叶子节点</param>
            <param name="level">层级</param>
            <param name="parent">父节点</param>
        </member>
        <member name="T:Mtime.Community.Utility.Helper.CollectionHelper">
            <summary>
            集合辅助方法
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.CollectionHelper.MergeUnion``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0},System.Int32,System.Comparison{``0})">
            <summary>
            归并合并，默认降序(DESC)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="listA">必须为降序</param>
            <param name="listB">必须为降序</param>
            <param name="topN"></param>
            <param name="comparison">返回a.CompareTo(b)的结果</param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.CollectionHelper.MergeUnion``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0},System.Int32,System.Comparison{``0},Mtime.Community.Utility.SortType)">
            <summary>
            归并合并
            </summary>
            <typeparam name="T"></typeparam>
            <param name="listA">排序必须与sortType一致</param>
            <param name="listB">排序必须与sortType一致</param>
            <param name="topN"></param>
            <param name="comparison"></param>
            <param name="sortType">返回a.CompareTo(b)的结果</param>
            <returns></returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.CollectionHelper.Find``1(System.Collections.IEnumerable,System.Predicate{``0})">
            <summary>
            查找集合中某一匹配项
            </summary>
            <typeparam name="T">集合元素类型</typeparam>
            <param name="collection">要查找的集合</param>
            <param name="predicate">条件</param>
            <returns>找到的匹配项，找不到则返回为<see cref="!:T"/>默认值</returns>
        </member>
        <member name="M:Mtime.Community.Utility.Helper.CollectionHelper.Find``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            查找集合中某一匹配项
            </summary>
            <typeparam name="T">集合元素类型</typeparam>
            <param name="collection">要查找的集合</param>
            <param name="predicate">条件</param>
            <returns>找到的匹配项，找不到则返回为<see cref="!:T"/>默认值</returns>
        </member>
        <member name="T:Mtime.Service.Files.ImpersonateUser">
            <summary>
            Windows 用户帐号模拟
            </summary>
        </member>
        <member name="T:Mtime.Net.Telnet.Client.TelnetConnection">
            <summary>
            TelnetClient连接对象
            </summary>
        </member>
        <member name="M:Mtime.Community.Utility.Caching.RedisCachingService.AddInSets``1(System.String,System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            添加到Redis，Sets集合数据结构中
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
            <param name="minutes">设置为0，表示不设置键过期时间</param>
            <returns>返回添加数,小于等于0表示添加失败</returns>
        </member>
        <member name="M:Mtime.Community.Utility.Caching.RedisCachingService.RemoveInSets(System.String)">
            <summary>
            移除整个Set集合
            </summary>
            <param name="key"></param>
            <returns>小于等于0表示添加失败</returns>
        </member>
        <member name="M:Mtime.Community.Utility.Caching.RedisCachingService.RemoveInSet``1(System.String,``0)">
            <summary>
            移除Set集合中，相应Key值对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
            <returns>小于等于0表示添加失败</returns>
        </member>
    </members>
</doc>
